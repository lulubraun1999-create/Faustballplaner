
{
  "entities": {
    "UserAbsence": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAbsence",
      "type": "object",
      "description": "Represents a period of absence for a user.",
      "properties": {
        "id": { "type": "string" },
        "userId": { "type": "string" },
        "startDate": { "type": "string", "format": "date-time" },
        "endDate": { "type": "string", "format": "date-time" },
        "reason": { "type": "string" },
        "createdAt": { "type": "string", "format": "date-time" }
      },
      "required": ["id", "userId", "startDate", "endDate", "reason", "createdAt"]
    },
    "NewsArticle": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NewsArticle",
      "type": "object",
      "description": "Represents a news article related to Bayer Leverkusen.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the news article."
        },
        "title": {
          "type": "string",
          "description": "Title of the news article."
        },
        "content": {
          "type": "string",
          "description": "The full content of the news article."
        },
        "author": {
          "type": "string",
          "description": "Author of the news article."
        },
        "publicationDate": {
          "type": "string",
          "description": "Date and time when the article was published.",
          "format": "date-time"
        },
        "imageUrls": {
          "type": "array",
          "description": "URLs of the images associated with the article.",
          "items": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "required": [
        "id",
        "title",
        "content",
        "author",
        "publicationDate"
      ]
    },
    "Match": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Match",
      "type": "object",
      "description": "Represents a Bayer Leverkusen match.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the match."
        },
        "date": {
          "type": "string",
          "description": "Date and time of the match.",
          "format": "date-time"
        },
        "homeTeam": {
          "type": "string",
          "description": "Name of the home team."
        },
        "awayTeam": {
          "type": "string",
          "description": "Name of the away team."
        },
        "homeScore": {
          "type": "number",
          "description": "Score of the home team."
        },
        "awayScore": {
          "type": "number",
          "description": "Score of the away team."
        },
        "matchStatus": {
          "type": "string",
          "description": "Status of the match (e.g., upcoming, live, finished)."
        }
      },
      "required": [
        "id",
        "date",
        "homeTeam",
        "awayTeam",
        "homeScore",
        "awayScore",
        "matchStatus"
      ]
    },
    "Player": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Player",
      "type": "object",
      "description": "Represents a Bayer Leverkusen player.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the player."
        },
        "name": {
          "type": "string",
          "description": "Name of the player."
        },
        "position": {
          "type": "string",
          "description": "Playing position of the player."
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth of the player.",
          "format": "date"
        },
        "nationality": {
          "type": "string",
          "description": "Nationality of the player."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the player's image.",
          "format": "uri"
        },
        "jerseyNumber": {
          "type": "number",
          "description": "Jersey number of the player."
        }
      },
      "required": [
        "id",
        "name",
        "position",
        "dateOfBirth",
        "nationality"
      ]
    },
    "HighlightReel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HighlightReel",
      "type": "object",
      "description": "Represents a highlight reel generated for a match.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the highlight reel."
        },
        "matchId": {
          "type": "string",
          "description": "Reference to Match. (Relationship: Match 1:N HighlightReel)"
        },
        "generationDate": {
          "type": "string",
          "description": "Date and time when the highlight reel was generated.",
          "format": "date-time"
        },
        "videoUrl": {
          "type": "string",
          "description": "URL of the generated highlight reel video.",
          "format": "uri"
        },
        "description": {
          "type": "string",
          "description": "Description of the highlight reel."
        }
      },
      "required": [
        "id",
        "matchId",
        "generationDate",
        "videoUrl"
      ]
    },
    "ForumPost": {
      "$schema": "http://json-schema.org/draft
-07/schema#",
      "title": "ForumPost",
      "type": "object",
      "description": "Represents a post in the fan forum.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the forum post."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ForumPost)"
        },
        "title": {
          "type": "string",
          "description": "Title of the forum post."
        },
        "content": {
          "type": "string",
          "description": "Content of the forum post."
        },
        "creationDate": {
          "type": "string",
          "description": "Date and time when the post was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "title",
        "content",
        "creationDate"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "Username of the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time when the user registered.",
          "format": "date-time"
        },
        "teamIds": {
          "type": "array",
          "description": "The IDs of the teams this user belongs to.",
          "items": {
            "type": "string"
          }
        },
        "adminRechte": {
            "type": "boolean",
            "description": "Indicates if the user has trainer/admin rights."
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "registrationDate"
      ]
    },
    "TeamCategory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TeamCategory",
      "type": "object",
      "description": "Represents a category for teams.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the category."
        },
        "order": {
          "type": "number",
          "description": "The order in which to display the categories."
        }
      },
      "required": ["name", "order"]
    },
    "Team": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Team",
      "type": "object",
      "description": "Represents a single team within a category.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the team."
        },
        "categoryId": {
          "type": "string",
          "description": "The ID of the category this team belongs to."
        }
      },
      "required": ["name", "categoryId"]
    },
    "Member": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Member",
      "type": "object",
      "description": "Represents a denormalized user object for efficient querying, containing all data from the members list.",
      "properties": {
        "id": { "type": "string" },
        "vorname": { "type": "string" },
        "nachname": { "type": "string" },
        "geschlecht": { "type": "string" },
        "position": {
          "type": "object",
          "properties": {
            "abwehr": { "type": "boolean" },
            "zuspiel": { "type": "boolean" },
            "angriff": { "type": "boolean" }
          }
        },
        "adminRechte": { "type": "boolean" },
        "geburtstag": { "type": "string", "format": "date-time" },
        "email": { "type": "string", "format": "email" },
        "telefon": { "type": "string" },
        "wohnort": { "type": "string" },
        "teamIds": { "type": "array", "items": { "type": "string" } }
      }
    },
    "GroupMember": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GroupMember",
      "type": "object",
      "description": "Represents a lightweight, denormalized user object containing only essential details for quick reference.",
      "properties": {
        "vorname": { "type": "string" },
        "nachname": { "type": "string" },
        "position": {
          "type": "object",
          "properties": {
            "abwehr": { "type": "boolean" },
            "zuspiel": { "type": "boolean" },
            "angriff": { "type": "boolean" }
          }
        },
        "adminRechte": { "type": "boolean" },
        "teamIds": {
          "type": "array",
          "items": { "type": "string" },
          "description": "The IDs of the teams this user belongs to."
        }
      }
    },
    "Poll": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Poll",
      "type": "object",
      "description": "Represents a user-created poll.",
      "properties": {
        "id": { "type": "string" },
        "question": { "type": "string" },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": { "type": "string" },
              "text": { "type": "string" }
            },
            "required": ["id", "text"]
          }
        },
        "allowCustomOptions": { "type": "boolean", "description": "Whether users can add their own options." },
        "allowMultipleAnswers": { "type": "boolean" },
        "isAnonymous": { "type": "boolean", "description": "If true, voter identities are not revealed." },
        "expiresAt": { "type": "string", "format": "date-time" },
        "archiveAt": { "type": "string", "format": "date-time" },
        "targetTeamIds": { "type": "array", "items": { "type": "string" } },
        "createdBy": { "type": "string", "description": "User ID of the creator." },
        "createdAt": { "type": "string", "format": "date-time" }
      },
      "required": ["id", "question", "options", "createdBy", "createdAt", "allowCustomOptions", "isAnonymous"]
    },
    "PollResponse": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PollResponse",
      "type": "object",
      "description": "Represents a user's response to a poll.",
      "properties": {
        "id": { "type": "string" },
        "pollId": { "type": "string" },
        "userId": { "type": "string" },
        "selectedOptionIds": { "type": "array", "items": { "type": "string" } },
        "customOption": { "type": "string" },
        "respondedAt": { "type": "string", "format": "date-time" }
      },
      "required": ["id", "pollId", "userId", "respondedAt"]
    },
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents an event or appointment.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the event." },
        "titleId": { "type": "string", "description": "Reference to the EventTitle in the 'event_titles' collection." },
        "date": { "type": "string", "format": "date-time", "description": "The date and start time of the event." },
        "endTime": { "type": "string", "format": "date-time", "description": "Optional end time of the event." },
        "isAllDay": { "type": "boolean", "description": "Indicates if the event lasts the whole day." },
        "recurrence": {
          "type": "string",
          "enum": ["none", "weekly", "biweekly", "monthly"],
          "description": "Recurrence rule for the event."
        },
        "recurrenceEndDate": { "type": "string", "format": "date-time", "description": "Optional end date for the recurrence." },
        "targetTeamIds": {
          "type": "array",
          "items": { "type": "string" },
          "description": "IDs of teams the event is for."
        },
        "rsvpDeadline": { "type": "string", "format": "date-time", "description": "Deadline for RSVPs." },
        "locationId": { "type": "string", "description": "Reference to the Location in the 'locations' collection." },
        "meetingPoint": { "type": "string", "description": "Specific meeting point for the event." },
        "description": { "type": "string", "description": "A detailed description of the event." },
        "createdBy": { "type": "string", "description": "User ID of the creator." },
        "createdAt": { "type": "string", "format": "date-time", "description": "The timestamp when the event was created." }
      },
      "required": ["id", "titleId", "date", "createdBy", "createdAt"]
    },
     "EventResponse": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EventResponse",
      "type": "object",
      "description": "Represents a user's RSVP response to a specific date of an event.",
      "properties": {
        "id": { "type": "string" },
        "eventId": { "type": "string" },
        "userId": { "type": "string" },
        "eventDate": { "type": "string", "format": "date-time", "description": "The specific date of the event instance this response is for." },
        "status": { "type": "string", "enum": ["attending", "declined", "uncertain"] },
        "reason": { "type": "string", "description": "The reason for declining the event." },
        "respondedAt": { "type": "string", "format": "date-time" }
      },
      "required": ["id", "eventId", "userId", "eventDate", "status", "respondedAt"]
    },
     "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a single message in a chat room.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message."
        },
        "roomId": {
          "type": "string",
          "description": "Identifier for the chat room this message belongs to."
        },
        "userId": {
          "type": "string",
          "description": "The ID of the user who sent the message."
        },
        "username": {
          "type": "string",
          "description": "The display name of the user who sent the message."
        },
        "message": {
          "type": "string",
          "description": "The content of the chat message."
        },
        "timestamp": {
          "type": "string",
          "description": "The server timestamp when the message was created.",
          "format": "date-time"
        }
      },
      "required": ["id", "roomId", "userId", "username", "message", "timestamp"]
    },
    "UserChatStatus": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "UserChatStatus",
        "type": "object",
        "description": "Tracks the last time a user viewed a specific chat room.",
        "properties": {
          "lastSeen": {
            "type": "string",
            "description": "The server timestamp of when the user last viewed the chat room.",
            "format": "date-time"
          }
        },
        "required": ["lastSeen"]
    },
    "Location": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Location",
        "type": "object",
        "description": "Represents a physical location for an event.",
        "properties": {
            "id": { "type": "string" },
            "name": { "type": "string", "description": "The name of the location (e.g., 'Fritz-Jacobi-Anlage')." },
            "address": { "type": "string", "description": "Street and house number." },
            "city": { "type": "string", "description": "The city of the location." }
        },
        "required": ["id", "name", "address", "city"]
    },
     "EventTitle": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "EventTitle",
        "type": "object",
        "description": "Represents a standard title for an event.",
        "properties": {
            "id": { "type": "string" },
            "name": { "type": "string", "description": "The name of the event title (e.g., 'Training', 'Spieltag')." }
        },
        "required": ["id", "name"]
    },
    "EventOverride": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EventOverride",
      "type": "object",
      "description": "Represents an override for a single instance of a recurring event.",
      "properties": {
        "id": { "type": "string" },
        "eventId": { "type": "string", "description": "The ID of the recurring event being overridden." },
        "originalDate": { "type": "string", "format": "date-time", "description": "The original date of the event instance that is being changed." },
        "isCancelled": { "type": "boolean", "description": "If true, this specific instance of the event is cancelled." },
        "cancellationReason": { "type": "string", "description": "The reason for cancelling the event instance." },
        "titleId": { "type": "string" },
        "date": { "type": "string", "format": "date-time" },
        "endTime": { "type": "string", "format": "date-time" },
        "isAllDay": { "type": "boolean" },
        "targetTeamIds": { "type": "array", "items": { "type": "string" } },
        "rsvpDeadline": { "type": "string", "format": "date-time" },
        "locationId": { "type": "string" },
        "meetingPoint": { "type": "string" },
        "description": { "type": "string" },
        "updatedAt": { "type": "string", "format": "date-time" }
      },
      "required": ["id", "eventId", "originalDate"]
    },
    "Penalty": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Penalty",
        "type": "object",
        "description": "Represents a single penalty type in a team's penalty catalog.",
        "properties": {
            "id": { "type": "string" },
            "name": { "type": "string", "description": "Name of the penalty (e.g., 'Zuspätkommen')." },
            "amount": { "type": "number", "description": "The monetary value of the penalty." }
        },
        "required": ["id", "name", "amount"]
    },
    "UserPenalty": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "UserPenalty",
        "type": "object",
        "description": "Represents a penalty assigned to a specific user.",
        "properties": {
            "id": { "type": "string" },
            "userId": { "type": "string" },
            "teamId": { "type": "string" },
            "penaltyId": { "type": "string", "description": "Reference to the penalty in the team's catalog." },
            "penaltyName": { "type": "string", "description": "Denormalized name of the penalty." },
            "amount": { "type": "number", "description": "Denormalized amount of the penalty." },
            "assignedAt": { "type": "string", "format": "date-time" },
            "paid": { "type": "boolean", "default": false }
        },
        "required": ["id", "userId", "teamId", "penaltyId", "penaltyName", "amount", "assignedAt"]
    },
    "TreasuryTransaction": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "TreasuryTransaction",
        "type": "object",
        "description": "Represents a transaction (deposit or payment) in the team treasury.",
        "properties": {
            "id": { "type": "string" },
            "teamId": { "type": "string" },
            "userId": { "type": "string", "description": "User who made the payment or received the payout." },
            "type": { "type": "string", "enum": ["deposit", "payout", "correction"] },
            "amount": { "type": "number", "description": "Transaction amount. Positive for deposits, negative for payouts." },
            "description": { "type": "string" },
            "date": { "type": "string", "format": "date-time" },
            "recordedBy": { "type": "string", "description": "User ID of the person who recorded the transaction." }
        },
        "required": ["id", "teamId", "userId", "type", "amount", "date", "recordedBy"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/news_articles/{newsArticleId}",
        "definition": {
          "entityName": "NewsArticle",
          "schema": {
            "$ref": "#/backend/entities/NewsArticle"
          },
          "description": "Collection of news articles related to Bayer Leverkusen.",
          "params": [
            {
              "name": "newsArticleId",
              "description": "Unique identifier for the news article."
            }
          ]
        }
      },
      {
        "path": "/matches/{matchId}",
        "definition": {
          "entityName": "Match",
          "schema": {
            "$ref": "#/backend/entities/Match"
          },
          "description": "Collection of Bayer Leverkusen matches.",
          "params": [
            {
              "name": "matchId",
              "description": "Unique identifier for the match."
            }
          ]
        }
      },
      {
        "path": "/players/{playerId}",
        "definition": {
          "entityName": "Player",
          "schema": {
            "$ref": "#/backend/entities/Player"
          },
          "description": "Collection of Bayer Leverkusen players.",
          "params": [
            {
              "name": "playerId",
              "description": "Unique identifier for the player."
            }
          ]
        }
      },
      {
        "path": "/highlight_reels/{highlightReelId}",
        "definition": {
          "entityName": "HighlightReel",
          "schema": {
            "$ref": "#/backend/entities/HighlightReel"
          },
          "description": "Collection of highlight reels generated for matches. Includes denormalized 'matchId' for querying highlight reels for a specific match.",
          "params": [
            {
              "name": "highlightReelId",
              "description": "Unique identifier for the highlight reel."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/forum_posts/{postId}",
        "definition": {
          "entityName": "ForumPost",
          "schema": {
            "$ref": "#/backend/entities/ForumPost"
          },
          "description": "Collection of forum posts created by a specific user.  Uses path-based ownership for simplified security rules.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            },
            {
              "name": "postId",
              "description": "Unique identifier for the forum post."
            }
          ]
        }
      },
       {
        "path": "/users/{userId}/absences/{absenceId}",
        "definition": {
          "entityName": "UserAbsence",
          "schema": {
            "$ref": "#/backend/entities/UserAbsence"
          },
          "description": "Collection of a user's planned absences."
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Collection of user documents. Path based ownership for securing data to the user.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/team_categories/{categoryId}",
        "definition": {
          "entityName": "TeamCategory",
          "schema": {
            "$ref": "#/backend/entities/TeamCategory"
          },
          "description": "Collection of team categories."
        }
      },
      {
        "path": "/teams/{teamId}",
        "definition": {
          "entityName": "Team",
          "schema": {
            "$ref": "#/backend/entities/Team"
          },
          "description": "Collection of all teams."
        }
      },
       {
        "path": "/members/{memberId}",
        "definition": {
          "entityName": "Member",
          "schema": {
            "$ref": "#/backend/entities/Member"
          },
          "description": "Collection of denormalized user data for quick lookups, sorted by team."
        }
      },
      {
        "path": "/group_members/{memberId}",
        "definition": {
          "entityName": "GroupMember",
          "schema": {
            "$ref": "#/backend/entities/GroupMember"
          },
          "description": "Collection of lightweight, denormalized user data for quick lookups."
        }
      },
      {
        "path": "/polls/{pollId}",
        "definition": {
          "entityName": "Poll",
          "schema": { "$ref": "#/backend/entities/Poll" },
          "description": "Collection of all polls."
        }
      },
      {
        "path": "/polls/{pollId}/responses/{responseId}",
        "definition": {
          "entityName": "PollResponse",
          "schema": { "$ref": "#/backend/entities/PollResponse" },
          "description": "Subcollection for responses to a specific poll."
        }
      },
      {
        "path": "/events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": { "$ref": "#/backend/entities/Event" },
          "description": "Collection of all events and appointments."
        }
      },
      {
        "path": "/event_overrides/{overrideId}",
        "definition": {
          "entityName": "EventOverride",
          "schema": { "$ref": "#/backend/entities/EventOverride" },
          "description": "Top-level collection for overrides of specific instances of a recurring event."
        }
      },
       {
        "path": "/event_responses/{responseId}",
        "definition": {
          "entityName": "EventResponse",
          "schema": { "$ref": "#/backend/entities/EventResponse" },
          "description": "Top-level collection for RSVP responses to a specific event."
        }
      },
       {
        "path": "/chat_rooms/{roomId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Subcollection of messages within a specific chat room."
        }
      },
      {
        "path": "/users/{userId}/chat_status/{roomId}",
        "definition": {
          "entityName": "UserChatStatus",
          "schema": { "$ref": "#/backend/entities/UserChatStatus" },
          "description": "Tracks the last time a user viewed a chat room to calculate unread messages."
        }
      },
       {
        "path": "/locations/{locationId}",
        "definition": {
          "entityName": "Location",
          "schema": { "$ref": "#/backend/entities/Location" },
          "description": "Collection of all event locations."
        }
      },
      {
        "path": "/event_titles/{eventTitleId}",
        "definition": {
          "entityName": "EventTitle",
          "schema": { "$ref": "#/backend/entities/EventTitle" },
          "description": "Collection of all standard event titles."
        }
      },
      {
        "path": "/teams/{teamId}/penalties/{penaltyId}",
        "definition": {
          "entityName": "Penalty",
          "schema": { "$ref": "#/backend/entities/Penalty" },
          "description": "Subcollection for a team's individual penalty catalog."
        }
      },
      {
        "path": "/teams/{teamId}/transactions/{transactionId}",
        "definition": {
          "entityName": "TreasuryTransaction",
          "schema": { "$ref": "#/backend/entities/TreasuryTransaction" },
          "description": "Subcollection for a team's treasury transactions."
        }
      },
      {
        "path": "/teams/{teamId}/user_penalties/{userPenaltyId}",
        "definition": {
          "entityName": "UserPenalty",
          "schema": {
            "$ref": "#/backend/entities/UserPenalty"
          },
          "description": "Subcollection of all assigned penalties for a team, allowing for easier querying based on team-level permissions."
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Werkself Hub application, focusing on news, match data, player information, AI-generated highlights, and a fan forum. The structure emphasizes authorization independence and efficient data retrieval.  \n\nAuthorization Independence is achieved by avoiding `get()` calls in Firestore rules. For instance, user-specific forum posts are stored under the `/users/{userId}/forum_posts/{postId}` path, making ownership explicit and verifiable without needing to access parent document data.  Similarly, although HighlightReels have a relationship to Matches, they are stored under a separate collection `/highlight_reels/{highlightReelId}` with the `matchId` denormalized, removing authorization dependencies based on match data.  The lack of any custom claims enforces DBAC. \n\nQAPs (Queries Are Permissions) are supported via Structural Segregation.  There is no mixing of secured and public data in any collection. For instance, forum posts are accessible only to authenticated users (or potentially publicly, depending on desired configuration), and sensitive user data (if any beyond the auth record) would be kept in `/users/{userId}` which uses path-based authorization, ensuring only the user can access their own data.\n\nThe structure favors path-based ownership (`/users/{userId}/forum_posts/{postId}`) for user-generated content and dedicated collections (e.g., `/news_articles`, `/matches`, `/players`) for global data. Global data is assumed to be read-only for most users, with administrative access controlled at the application level. In the future, if access controls are required for global data, a membership map could be used to control access, with appropriate denormalization."
  }
}

    