/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy: This ruleset prioritizes secure data access based on a combination of
 * path-based ownership and public read access where appropriate. It strictly enforces
 * user ownership for personal data and write access to user-generated content. It leverages
 * denormalization to avoid costly `get()` calls in rules, enhancing performance and security.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels, denormalized with `matchId`.
 * - `/users/{userId}`: Private user profiles.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user.
 * - `/team_categories/{categoryId}`: Public team categories.
 * - `/teams/{teamId}`: Public team data.
 * - `/members/{memberId}`: Public member data.
 * - `/group_members/{memberId}`: Public group member data.
 * - `/polls/{pollId}`: Polls created by users.
 * - `/polls/{pollId}/responses/{responseId}`: Responses to a poll.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the data structure.
 * - Public collections (`news_articles`, `matches`, `players`, `highlight_reels`, `team_categories`, `teams`, `members`, `group_members`) are readable by all.
 * - User-generated content (forum posts, polls) is secured using path-based ownership.
 * - Data validation is minimized in this prototyping phase, focusing on ownership and
 *   relational integrity checks rather than comprehensive schema enforcement.
 *
 * Denormalization for Authorization:
 * - Highlight reels include a denormalized `matchId` to allow efficient querying without
 *   requiring a `get()` call to the `matches` collection.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under `/users/{userId}/forum_posts/{postId}`,
 *   ensuring clear ownership and simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updating, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for news articles; write operations are denied to all.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updating, and deletion.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for match data; write operations are denied to all.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updating, and deletion.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for player data; write operations are denied to all.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updating, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for highlight reels; write operations are denied to all.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces path-based ownership for forum posts, restricting access to the owner.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces path-based ownership for user documents, restricting access to the owner.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updating, and deletion.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for team categories; write operations are denied to all.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updating, and deletion.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for team data; write operations are denied to all.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
      /**
       * @description Allows anyone to read member data, but restricts creation, updating, and deletion.
       * @path /members/{memberId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public read access for member data; write operations are denied to all.
       */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read group member data, but restricts creation, updating, and deletion.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for group member data; write operations are denied to all.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to create polls. Requires that the `createdBy` field in the poll data matches the user's UID.
     *              Allows only the creator to update or delete polls. Allows anyone to read polls.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.createdBy);
     * @allow delete: if isExistingOwner(resource.data.createdBy);
     * @principle Enforces that only authenticated users can create polls, and they must own the poll.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows anyone to read poll responses. Requires authentication to create a response.
     *              Allows only the user who created the response to update or delete it.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if request.auth.uid == resource.data.userId && resource != null;
     * @allow delete: if request.auth.uid == resource.data.userId && resource != null;
     * @principle Enforces that only authenticated users can create poll responses, and they must own the response.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.userId && resource != null;
      allow delete: if request.auth.uid == resource.data.userId && resource != null;
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   * @principle Verifies user authentication before granting access.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user ID matches the authenticated user's ID.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
   * @principle Enforces path-based ownership, ensuring a user can only access their own data.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of an existing document.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   * @principle Combines ownership check with resource existence check for safer updates and deletes.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}