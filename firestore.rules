/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on path-based ownership and explicit authorization. It avoids complex `get()` calls by denormalizing data where necessary and segregating data into private user subcollections and public top-level collections.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles. Write access is not controlled at the rule level.
 * - `/matches/{matchId}`: Publicly readable match data. Write access is not controlled at the rule level.
 * - `/players/{playerId}`: Publicly readable player data. Write access is not controlled at the rule level.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels. Write access is not controlled at the rule level.
 * - `/users/{userId}`: User profiles, accessible only to the authenticated user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 * - `/team_categories/{categoryId}`: Publicly readable team categories. Write access is not controlled at the rule level.
 * - `/teams/{teamId}`: Publicly readable teams. Write access is not controlled at the rule level.
 * - `/members/{memberId}`: Publicly readable denormalized member data. Write access is not controlled at the rule level.
 * - `/group_members/{memberId}`: Publicly readable lightweight user group data. Write access is not controlled at the rule level.
 * - `/polls/{pollId}`: Publicly readable polls. Write access is not controlled at the rule level.
 * - `/polls/{pollId}/responses/{responseId}`: Poll responses. Write access is not controlled at the rule level.
 * - `/events/{eventId}`: Publicly readable events. Write access is not controlled at the rule level.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Publicly readable chat messages. Write access is not controlled at the rule level.
 * - `/users/{userId}/chat_status/{roomId}`: Tracks the last time a user viewed a chat room. Only the user can write to their own status.
 *
 * Key Security Decisions:
 * - Public read access to news articles, matches, players, highlight reels, team categories, teams, members, group members, polls, events, and chat messages.
 * - Strict user ownership for user profiles and their forum posts.
 * - Write access to top-level collections is not secured at the rule level (assumed to be handled by the application).
 * - No user listing is allowed for the `/users` collection to protect user privacy.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` document to allow efficient querying and avoid `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Write access is not controlled at the rule level.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write access is not controlled at the rule level.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Write access is not controlled at the rule level.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write access is not controlled at the rule level.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces ownership for forum posts.  Only the user who owns the post can read, create, update, or delete it.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @allow (create): User ktsIeHZuenhgIdwo0jWzumfHHNm1 creates a forum post under their user ID.
     * @deny (create): User abc tries to create a forum post under user xyz's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user profiles. Only the authenticated user can read or modify their own profile.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny list: if false;
     * @allow (create): User ktsIeHZuenhgIdwo0jWzumfHHNm1 creates their profile.
     * @deny (update): User abc tries to update user xyz's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows anyone to read team categories. Write access is not controlled at the rule level.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data. Write access is not controlled at the rule level.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read member data. Write access is not controlled at the rule level.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data. Write access is not controlled at the rule level.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read polls. Write access is not controlled at the rule level.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Placeholder for poll response security rules.  Write access is not controlled at the rule level.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Placeholder for poll response security rules.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read events. Write access is not controlled at the rule level.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows anyone to read messages in a chat room. Write access is not controlled at the rule level.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Tracks the last time a user viewed a chat room. Only the user can write to their own status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @allow list: if isOwner(userId);
     * @principle Restricts access to a user's own data.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}