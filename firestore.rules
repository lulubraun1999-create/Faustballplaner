/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * path-based ownership. It avoids complex `get()` calls to other documents to
 * keep the rules efficient. Data validation is relaxed for prototyping,
 * focusing on authorization and relational integrity only.
 *
 * Data Structure:
 * - User-specific data (e.g., forum posts) is nested under `/users/{userId}` to
 *   enforce ownership.
 * - Global data (e.g., news articles, matches, players) resides in top-level
 *   collections.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the absence of a `list` rule on the `/users` collection.
 * - Global collections are publicly readable, but write access is restricted to owners.
 * - The rules do not implement any data-type validation.
 *
 * Denormalization for Authorization:
 * - The `createdBy` field in `/polls/{pollId}` is used for owner-based write
 *   permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but only allows owners to create, update, or delete them.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null; // Assuming any authenticated user can create
     * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if true;
     * @principle Public read, authenticated create, no update/delete.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but only allows owners to create, update, or delete them.
     * @path /matches/{matchId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null; // Assuming any authenticated user can create
     * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if true;
     * @principle Public read, authenticated create, no update/delete.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but only allows owners to create, update, or delete them.
     * @path /players/{playerId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null; // Assuming any authenticated user can create
     * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if true;
     * @principle Public read, authenticated create, no update/delete.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but only allows owners to create, update, or delete them.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null; // Assuming any authenticated user can create
     * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if true;
     * @principle Public read, authenticated create, no update/delete.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): if request.auth.uid == userId;
     * @allow (get, list): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @deny (create): if request.auth.uid != userId;
     * @deny (get, list): if request.auth == null || request.auth.uid != userId;
     * @deny (update): if !isExistingOwner(userId);
     * @deny (delete): if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create): if request.auth.uid == userId;
     * @allow (get): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @deny (create): if request.auth.uid != userId;
     * @deny (get): if request.auth == null || request.auth.uid != userId;
     * @deny (update): if !isExistingOwner(userId);
     * @deny (delete): if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows anyone to read team categories, but only allows owners to create, update, or delete them.
      * @path /team_categories/{categoryId}
      * @allow (get, list): if true;
      * @allow (create): if request.auth != null; // Assuming any authenticated user can create
      * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
      * @deny (create): if request.auth == null;
      * @deny (update, delete): if true;
      * @principle Public read, authenticated create, no update/delete.
      */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read teams, but only allows owners to create, update, or delete them.
     * @path /teams/{teamId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null; // Assuming any authenticated user can create
     * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if true;
     * @principle Public read, authenticated create, no update/delete.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read members, but only allows owners to create, update, or delete them.
     * @path /members/{memberId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null; // Assuming any authenticated user can create
     * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if true;
     * @principle Public read, authenticated create, no update/delete.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read group members, but only allows owners to create, update, or delete them.
     * @path /group_members/{memberId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null; // Assuming any authenticated user can create
     * @allow (update, delete): if false; // Assuming no updates or deletes are allowed in the prototype
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if true;
     * @principle Public read, authenticated create, no update/delete.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read polls, but only allows the poll creator to update or delete them.  Polls can be created by any authenticated user.
     * @path /polls/{pollId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null && request.resource.data.createdBy == request.auth.uid;
     * @allow (update): if isExistingOwner(request.resource.data.createdBy);
     * @allow (delete): if isExistingOwner(request.resource.data.createdBy);
     * @deny (create): if request.auth == null || request.resource.data.createdBy != request.auth.uid;
     * @deny (update): if !isExistingOwner(request.resource.data.createdBy);
     * @deny (delete): if !isExistingOwner(request.resource.data.createdBy);
     * @principle Public read, owner-only writes, enforces creatorId on create.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows anyone to read poll responses, but only allows the response creator to update or delete them. Responses can be created by any authenticated user.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null;
     * @allow (update): if isExistingOwner(request.resource.data.userId);
     * @allow (delete): if isExistingOwner(request.resource.data.userId);
     * @deny (create): if request.auth == null;
     * @deny (update): if !isExistingOwner(request.resource.data.userId);
     * @deny (delete): if !isExistingOwner(request.resource.data.userId);
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}