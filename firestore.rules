/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user-generated content (forum posts) and user profiles,
 * while allowing public read access to global data collections (news articles, matches, players, highlight reels).
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.  Write access is not controlled at the rule level and must be enforced server-side (e.g., via Firebase Functions).
 * - /matches/{matchId}: Publicly readable match data. Write access is not controlled at the rule level and must be enforced server-side.
 * - /players/{playerId}: Publicly readable player data. Write access is not controlled at the rule level and must be enforced server-side.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels. Write access is not controlled at the rule level and must be enforced server-side.
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Public read access is granted to news articles, match data, player information, and highlight reels.  Write access to these collections MUST be secured at the application level (e.g., via a Firebase Function with admin privileges).
 * - User listing is implicitly denied (no `list` rule on `/users`).
 * - All write operations require authentication.
 * - The rules explicitly deny any write operations that are not explicitly allowed, providing a secure-by-default posture.
 *
 * Denormalization for Authorization:
 * - HighlightReel documents denormalize the `matchId` to enable efficient queries.
 * - ForumPost documents are stored under the user's path (/users/{userId}/forum_posts/{postId}) to enable path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is not controlled at the rule level.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Always.
     * @deny create, update, delete: Never.
     * @principle Allows public read access to news articles. Write operations are not permitted at the rule level.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is not controlled at the rule level.
     * @path /matches/{matchId}
     * @allow get, list: Always.
     * @deny create, update, delete: Never.
     * @principle Allows public read access to match data. Write operations are not permitted at the rule level.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is not controlled at the rule level.
     * @path /players/{playerId}
     * @allow get, list: Always.
     * @deny create, update, delete: Never.
     * @principle Allows public read access to player data. Write operations are not permitted at the rule level.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is not controlled at the rule level.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Always.
     * @deny create, update, delete: Never.
     * @principle Allows public read access to highlight reels. Write operations are not permitted at the rule level.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to user documents.  Allows a user to read and write their own profile.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @allow list: if false; // User listing is not permitted.
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces document ownership, ensuring only the authenticated user can access their own data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to forum posts. Allows a user to read, create, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.auth.uid;
     * @allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.auth.uid;
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn() || request.resource.data.userId != request.auth.uid;
     * @deny update: if !isSignedIn() || resource.data.userId != request.auth.uid;
     * @deny delete: if !isSignedIn() || resource.data.userId != request.auth.uid;
     * @principle Enforces document ownership for forum posts, ensuring users can only manage their own content.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.auth.uid;
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}