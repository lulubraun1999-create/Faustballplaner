rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access, restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access, restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information. Write access is denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access, restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access, restricts write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts. Only the owner can read, create, update, or delete their posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isValidForumPost();
     * @deny update: if !isValidForumPost();
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user documents. Only the owner can read, create, update, or delete their own document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Write access is denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access, restricts write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams. Write access is denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to teams, restricts write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to members. Write access is denied.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to members, restricts write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group members. Write access is denied.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to group members, restricts write access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows public read access to polls. Write access is denied.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to polls, restricts write access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create poll responses. Only the owner can read, update, or delete their responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if isSignedIn() && request.auth.uid == resource.data.userId;
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
     * @allow delete: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

     /**
     * @description Allows public read access to events. Write access is denied.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to events, restricts write access.
     */
    match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event overrides. Write access is denied.
     * @path /event_overrides/{overrideId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event overrides, restricts write access.
     */
    match /event_overrides/{overrideId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

     /**
     * @description Allows public read access to event responses. Write access is denied.
     * @path /event_responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event responses, restricts write access.
     */
    match /event_responses/{responseId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to chat messages. Write access is allowed to signed-in users.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @deny update, delete: if false;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get, list: if false;
     * @allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to locations. Write access is denied.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to locations, restricts write access.
     */
    match /locations/{locationId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event titles. Write access is denied.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event titles, restricts write access.
     */
    match /event_titles/{eventTitleId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to penalties. Write access is denied.
     * @path /teams/{teamId}/penalties/{penaltyId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to penalties, restricts write access.
     */
    match /teams/{teamId}/penalties/{penaltyId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to treasury transactions. Write access is denied.
     * Trainers can delete transactions.
     * @path /teams/{teamId}/transactions/{transactionId}
     * @allow get, list: if true;
     * @allow delete: if isAdmin();
     * @deny create, update: if false;
     * @principle Allows public read access to treasury transactions, restricts write access.
     */
    match /teams/{teamId}/transactions/{transactionId} {
        allow get, list: if true;
        allow create, update: if false;
        allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to user penalties. Write access is denied.
     * @path /teams/{teamId}/user_penalties/{userPenaltyId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to user penalties, restricts write access.
     */
    match /teams/{teamId}/user_penalties/{userPenaltyId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return request.auth != null && request.auth.uid == userId && resource.data != null;
    }

    function isValidForumPost() {
        return request.resource.data.keys().hasAll(['userId', 'title', 'content', 'creationDate']);
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminRechte == true;
    }
  }
}