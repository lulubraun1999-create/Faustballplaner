/**
 * @file Firestore Security Rules for Werkself Hub
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset prioritizes authorization independence, leveraging path-based ownership and data denormalization to minimize `get()` calls and optimize security rule performance.  It adopts a strict user-ownership model for user-generated content and assumes read-only access for most global data.
 *
 * @Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable collection of news articles.
 * - `/matches/{matchId}`: Publicly readable collection of match data.
 * - `/players/{playerId}`: Publicly readable collection of player information.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable collection of highlight reels.
 * - `/users/{userId}/forum_posts/{postId}`: User-owned subcollection for forum posts.
 * - `/users/{userId}`: User-owned document containing user profile data.
 * - `/team_categories/{categoryId}`: Publicly readable collection of team categories.
 * - `/teams/{teamId}`: Publicly readable collection of team data.
 * - `/members/{memberId}`: Publicly readable collection of member data.
 * - `/group_members/{memberId}`: Publicly readable collection of group member data.
 * - `/polls/{pollId}`: Publicly readable collection of polls.
 * - `/polls/{pollId}/responses/{responseId}`: Subcollection for poll responses, owned by the user.
 * - `/events/{eventId}`: Publicly readable collection of events.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within a chat room, access not directly managed by rules.
 * - `/users/{userId}/chat_status/{roomId}`: Tracks user chat status, owned by the user.
 *
 * @Key Security Decisions:
 * - User listing is implicitly disallowed (no top-level `/users` collection with list access).
 * - Global collections (`/news_articles`, `/matches`, etc.) are publicly readable.  Write access is not managed by rules and is assumed to be handled at the application level or via Firebase Functions.
 * - Data validation is relaxed during the prototyping phase, focusing only on relational integrity and ownership checks.
 *
 * @Denormalization for Authorization:
 * - `HighlightReel` documents denormalize the `matchId` to enable efficient queries without requiring `get()` calls to the `matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to news articles. Write access is not directly managed by rules.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to match data. Write access is not directly managed by rules.
     * @path /matches/{matchId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to player data. Write access is not directly managed by rules.
     * @path /players/{playerId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to highlight reels. Write access is not directly managed by rules.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): User A (auth.uid = "user_abc") can create a post in /users/user_abc/forum_posts/post_123.
     * @allow (get, list): User A (auth.uid = "user_abc") can read/list posts in /users/user_abc/forum_posts/.
     * @allow (update, delete): User A (auth.uid = "user_abc") can update/delete a post in /users/user_abc/forum_posts/post_123.
     * @deny (create): User B (auth.uid = "user_def") cannot create a post in /users/user_abc/forum_posts/post_123.
     * @deny (get, list): User B (auth.uid = "user_def") cannot read/list posts in /users/user_abc/forum_posts/.
     * @deny (update, delete): User B (auth.uid = "user_def") cannot update/delete a post in /users/user_abc/forum_posts/post_123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create): User A (auth.uid = "user_abc") can create a document in /users/user_abc.
     * @allow (get): User A (auth.uid = "user_abc") can read their document in /users/user_abc.
     * @allow (update, delete): User A (auth.uid = "user_abc") can update/delete their document in /users/user_abc.
     * @deny (create): User B (auth.uid = "user_def") cannot create a document in /users/user_abc.
     * @deny (get): User B (auth.uid = "user_def") cannot read User A's document in /users/user_abc.
     * @deny (update, delete): User B (auth.uid = "user_def") cannot update/delete User A's document in /users/user_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows read access to team categories. Write access is not directly managed by rules.
     * @path /team_categories/{categoryId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to team data. Write access is not directly managed by rules.
     * @path /teams/{teamId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to member data. Write access is not directly managed by rules.
     * @path /members/{memberId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows read access to group member data. Write access is not directly managed by rules.
     * @path /group_members/{memberId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to poll data. Write access is not directly managed by rules.
     * @path /polls/{pollId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to poll data.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): User A (auth.uid = "user_abc") can create a response in /polls/poll_123/responses/response_abc.
     * @allow (get, list): User A (auth.uid = "user_abc") can read/list their response in /polls/poll_123/responses/.
     * @allow (update, delete): User A (auth.uid = "user_abc") can update/delete their response in /polls/poll_123/responses/response_abc.
     * @deny (create): User B (auth.uid = "user_def") cannot create a response in /polls/poll_123/responses/response_abc.
     * @deny (get, list): User B (auth.uid = "user_def") cannot read/list User A's response in /polls/poll_123/responses/.
     * @deny (update, delete): User B (auth.uid = "user_def") cannot update/delete User A's response in /polls/poll_123/responses/response_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow read, list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && isOwner(request.auth.uid);
      allow update: if isSignedIn() && isExistingOwner(request.auth.uid);
      allow delete: if isSignedIn() && isExistingOwner(request.auth.uid);
    }

    /**
     * @description Allows read access to event data. Write access is not directly managed by rules.
     * @path /events/{eventId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public read access to event data.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows read and write access to chat messages. Access not directly managed by rules.
      * @path /chat_rooms/{roomId}/messages/{messageId}
      */
    match /chat_rooms/{roomId}/messages/{messageId} {
       allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create): User A (auth.uid = "user_abc") can create a chat status in /users/user_abc/chat_status/room_123.
     * @allow (get): User A (auth.uid = "user_abc") can read their chat status in /users/user_abc/chat_status/room_123.
     * @allow (update, delete): User A (auth.uid = "user_abc") can update/delete their chat status in /users/user_abc/chat_status/room_123.
     * @deny (create): User B (auth.uid = "user_def") cannot create a chat status in /users/user_abc/chat_status/room_123.
     * @deny (get): User B (auth.uid = "user_def") cannot read User A's chat status in /users/user_abc/chat_status/room_123.
     * @deny (update, delete): User B (auth.uid = "user_def") cannot update/delete User A's chat status in /users/user_abc/chat_status/room_123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}