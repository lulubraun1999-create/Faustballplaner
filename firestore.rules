/**
 * @file Firestore Security Rules for Werkself Hub
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user-generated content and public read access for global data collections. Data validation is relaxed in this prototype to enable rapid iteration.
 * @dataStructure The database is structured with top-level collections for global data (news, matches, players) and user-scoped subcollections for private data (forum posts, user data).
 * @keySecurityDecisions
 *   - User listing is implicitly denied by the absence of a rule on the `/users` collection.
 *   - Global data collections are publicly readable.
 *   - Write access to user-scoped data is restricted to the owner.
 *   - No write access is granted based on admin rights, and no custom claims exist (enforces DBAC).
 *   - Flexible data validation is implemented to allow for prototyping and easy data modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles. Write access is denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to match data. Write access is denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to player data. Write access is denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to highlight reel data. Write access is denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages forum posts for a specific user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user data.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Grants public read access to team categories. Write access is denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to teams. Write access is denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Grants public read access to members. Write access is denied.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to group members. Write access is denied.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to polls. Write access is denied.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own responses to a poll.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to events. Write access is denied.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Grants public read access to event overrides. Write access is denied.
     * @path /event_overrides/{overrideId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /event_overrides/{overrideId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Grants public read access to event responses. Write access is denied.
     * @path /event_responses/{responseId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /event_responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages chat messages within a specific chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

     /**
     * @description Grants public read access to locations. Write access is denied.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Grants public read access to event titles. Write access is denied.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes permitted.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}