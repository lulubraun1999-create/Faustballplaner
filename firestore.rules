/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @core_philosophy This ruleset enforces a primarily public-read, owner-write model,
 * with path-based ownership where applicable. Data validation is relaxed for prototyping,
 * focusing on authorization and relational integrity.
 *
 * @data_structure
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles.
 * - `/matches/{matchId}`: Publicly readable match data.
 * - `/players/{playerId}`: Publicly readable player information.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels, denormalized with matchId.
 * - `/users/{userId}`: User profile data, owner-only access.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user, owner-only access.
 * - `/team_categories/{categoryId}`: Publicly readable team categories.
 * - `/teams/{teamId}`: Publicly readable team data.
 * - `/members/{memberId}`: Publicly readable member data.
 * - `/group_members/{memberId}`: Publicly readable group member data.
 * - `/polls/{pollId}`: Publicly readable polls.
 * - `/polls/{pollId}/responses/{responseId}`: Publicly readable poll responses.
 * - `/events/{eventId}`: Publicly readable events.
 * - `/events/{eventId}/responses/{responseId}`: Publicly readable event responses.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Publicly readable chat messages.
 * - `/users/{userId}/chat_status/{roomId}`: Owner only access to chat status.
 * - `/locations/{locationId}`: Publicly readable locations
 *
 * @key_security_decisions
 * - Public read access is granted for most top-level collections to simplify data retrieval.
 * - Write access is restricted based on ownership or denied entirely for most users.
 * - No user listing is allowed to prevent unauthorized data scraping.
 * - Data validation is minimized to essential authorization checks for rapid prototyping.
 *
 * @denormalization_for_authorization
 * - HighlightReels denormalize 'matchId' for efficient querying without requiring `get()` calls
 * - The rule structure avoids all `get()` calls for authorization.
 *
 * @structural_segregation
 * - User-specific forum posts are stored under `/users/{userId}/forum_posts/{postId}`
 *   to leverage path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID of the expected owner.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rules for news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - Any user can read news articles.
     * @deny (create, update, delete) - No user can create, update, or delete news articles through client-side rules.
     * @principle Allows public read access while restricting write access.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - No user can create, update, or delete match data through client-side rules.
     * @principle Allows public read access while restricting write access.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for players.
     * @path /players/{playerId}
     * @allow (get, list) - Any user can read player information.
     * @deny (create, update, delete) - No user can create, update, or delete player information through client-side rules.
     * @principle Allows public read access while restricting write access.
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) - Any user can read highlight reels.
     * @deny (create, update, delete) - No user can create, update, or delete highlight reels through client-side rules.
     * @principle Allows public read access while restricting write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for forum posts under a user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) - Only the authenticated user can create a forum post under their own user ID.
     * @allow (get, list) - Only the owner can read their own forum posts.
     * @allow (update, delete) - Only the owner can update or delete their own forum posts, and the document must exist.
     * @deny (create) - Prevents creating forum posts with mismatched user IDs.
     * @deny (update, delete) - Prevents updating or deleting non-existent documents.
     * @principle Enforces document ownership for writes and prevents unauthorized modifications.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Only the authenticated user can create their own user document.
     * @allow (get) - Only the owner can get their own user document.
     * @deny (list) - Prevents listing all users.
     * @allow (update, delete) - Only the owner can update or delete their own user document, and the document must exist.
     * @deny (create) - Prevents creating user documents with mismatched user IDs.
     * @deny (update, delete) - Prevents updating or deleting non-existent documents.
     * @principle Enforces document ownership for writes and prevents unauthorized modifications.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for team categories.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /team_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Rules for Members.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for Group Members.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /group_members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for polls.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /polls/{pollId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

      /**
     * @description Rules for events.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for event responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /events/{eventId}/responses/{responseId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for chat messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for user chat status.
     * @path /users/{userId}/chat_status/{roomId}
     *  @allow (create) - Only the authenticated user can create their own chat status.
     *  @allow (get) - Only the owner can get their own chat status.
     *  @deny (list) - Prevents listing all chat statuses.
     *  @allow (update, delete) - Only the owner can update or delete their own chat status, and the document must exist.
     *  @deny (create) - Prevents creating chat statuses with mismatched user IDs.
     *  @deny (update, delete) - Prevents updating or deleting non-existent documents.
     * @principle Enforces document ownership for writes and prevents unauthorized modifications.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for locations.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }
  }
}