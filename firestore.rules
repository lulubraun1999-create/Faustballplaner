/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on path-based ownership and explicit authorization. It avoids complex `get()` calls by denormalizing authorization-related data directly into the documents. The rules are designed to prevent unauthorized data access and modification, while allowing for flexible data structures during the prototyping phase.
 *
 * Data Structure:
 * - Global data (news, matches, players, highlight reels, team categories, teams, events) resides in top-level collections (e.g., `/news_articles/{newsArticleId}`).
 * - User-specific data (forum posts, user profiles) is nested under `/users/{userId}`.
 * - Team-related data (members, group members) resides in top-level collections `/members/{memberId}` and `/group_members/{memberId}`.
 * - Polls and poll responses reside in `/polls/{pollId}` and `/polls/{pollId}/responses/{responseId}`.
 * - Chat messages are nested under `/chat_rooms/{roomId}/messages/{messageId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Global data collections are publicly readable but require owner-only access for write operations.
 * - User-owned data trees are strictly controlled by path-based ownership.
 * - Data validation is limited to relational integrity and authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - The `HighlightReel` entity denormalizes the `matchId` to enable efficient querying without requiring `get()` calls to the `Match` document.
 *
 * Structural Segregation:
 * - User-generated content (forum posts) is stored under the user's document to avoid mixing public and private data within the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts write access to owners.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to match data, but restricts write access to owners.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to player data, but restricts write access to owners.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to highlight reel data, but restricts write access to owners.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Allows public read access to team categories, but restricts write access to owners.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    /**
     * @description Allows public read access to teams, but restricts write access to owners.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
     /**
     * @description Allows public read access to members, but restricts write access to owners.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
     match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    /**
     * @description Allows public read access to group members, but restricts write access to owners.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    /**
     * @description Allows public read access to polls, but restricts write access to owners.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    /**
     * @description Allows a user to create, read, update, and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Enforces authentication for access.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Allows public read access to events, but restricts write access to owners.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
     /**
     * @description Allows all authenticated users to read messages within a chat room, but restricts write access.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows read access to authenticated users while restricting write access.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}