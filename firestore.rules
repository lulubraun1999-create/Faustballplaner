/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @core_philosophy This ruleset prioritizes authorization independence and efficient data retrieval.
 *  It enforces a strict user-ownership model for user-generated content and assumes read-only access for global data collections.
 * @data_structure Data is organized into top-level collections for global data (news articles, matches, players, etc.) and user-scoped subcollections under `/users/{userId}` for user-generated content (forum posts, chat statuses).
 * @key_security_decisions
 *  - User listing is implicitly disallowed by the absence of a global `list` rule on the `/users` collection.
 *  - Global data collections are assumed to be read-only for most users, with write access potentially managed at the application level.
 *  - Path-based ownership is enforced for user-generated content, simplifying security rules and improving performance.
 * @denormalization_for_authorization The `matchId` is denormalized in the `HighlightReel` entity to enable direct querying of highlight reels for a specific match without requiring additional `get()` calls.
 * @structural_segregation No mixing of secured and public data in any collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updating, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updating, and deletion.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updating, and deletion.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updating, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces ownership for forum posts under a user's path.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Strict ownership: Only the user can create, read, update, or delete their own forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user documents.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny get: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Strict ownership: Only the user can create, read, update, or delete their own user document.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updating, and deletion.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updating, and deletion.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

       /**
     * @description Allows anyone to read member data, but restricts creation, updating, and deletion.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
     * @description Allows anyone to read group member data, but restricts creation, updating, and deletion.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes. Assumes administrative access is managed externally.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

      /**
       * @description Allows anyone to read polls, but restricts creation, updating, and deletion.
       * @path /polls/{pollId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Public read, restricted writes. Assumes administrative access is managed externally.
       */
      match /polls/{pollId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }

      /**
       * @description Restricts poll responses to authenticated users.
       * @path /polls/{pollId}/responses/{responseId}
       * @allow create: if isSignedIn();
       * @allow get: if isSignedIn();
       * @allow list: if isSignedIn();
       * @allow update: if false;
       * @allow delete: if false;
       * @principle Authenticated users can create, read, and list poll responses. Updates and deletes are disallowed.
       */
      match /polls/{pollId}/responses/{responseId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow update: if false;
        allow delete: if false;
      }

      /**
       * @description Allows anyone to read events, but restricts creation, updating, and deletion.
       * @path /events/{eventId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Public read, restricted writes. Assumes administrative access is managed externally.
       */
      match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }

      /**
       * @description Restricts event responses to authenticated users.
       * @path /events/{eventId}/responses/{responseId}
       * @allow create: if isSignedIn();
       * @allow get: if isSignedIn();
       * @allow list: if isSignedIn();
       * @allow update: if false;
       * @allow delete: if false;
       * @principle Authenticated users can create, read, and list event responses. Updates and deletes are disallowed.
       */
      match /events/{eventId}/responses/{responseId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow update: if false;
        allow delete: if false;
      }

      /**
       * @description Restricts chat messages to authenticated users.
       * @path /chat_rooms/{roomId}/messages/{messageId}
       * @allow create: if isSignedIn();
       * @allow get: if isSignedIn();
       * @allow list: if isSignedIn();
       * @allow update: if false;
       * @allow delete: if false;
       * @principle Authenticated users can create, read, and list chat messages. Updates and deletes are disallowed.
       */
      match /chat_rooms/{roomId}/messages/{messageId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow update: if false;
        allow delete: if false;
      }

      /**
       * @description Enforces ownership for user chat statuses.
       * @path /users/{userId}/chat_status/{roomId}
       * @allow create: if isSignedIn() && request.auth.uid == userId;
       * @allow get: if isOwner(userId);
       * @allow list: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @deny create: if request.auth.uid != userId;
       *
       * @principle Strict ownership: Only the user can create, read, update, or delete their own chat status.
       */
      match /users/{userId}/chat_status/{roomId} {
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Allows anyone to read locations, but restricts creation, updating, and deletion.
       * @path /locations/{locationId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Public read, restricted writes. Assumes administrative access is managed externally.
       */
      match /locations/{locationId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}