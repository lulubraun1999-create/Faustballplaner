/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and allows public read access to global data collections.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Global data (news, matches, players) resides in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Global data collections are publicly readable.
 * - Write access to user-owned data is restricted to the owner.
 * - Data shape is not strictly validated in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The `ForumPost` entity has a `userId` field that must match the path `/users/{userId}/forum_posts/{postId}`. This enables path-based authorization and avoids costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and the resource exists.
     * @param userId The user ID to check against.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Collection of news articles related to Bayer Leverkusen.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify news articles.
     * @deny (create, update, delete): Unauthenticated users cannot modify news articles.
     * @principle Public read, admin-only write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Collection of Bayer Leverkusen matches.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify match data.
     * @deny (create, update, delete): Unauthenticated users cannot modify match data.
     * @principle Public read, admin-only write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin role check
    }

    /**
     * @description Collection of Bayer Leverkusen players.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify player data.
     * @deny (create, update, delete): Unauthenticated users cannot modify player data.
     * @principle Public read, admin-only write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Collection of highlight reels generated for matches. Includes denormalized 'matchId' for querying highlight reels for a specific match.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reel data.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify highlight reel data.
     * @deny (create, update, delete): Unauthenticated users cannot modify highlight reel data.
     * @principle Public read, admin-only write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Collection of forum posts created by a specific user. Uses path-based ownership for simplified security rules.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): Authenticated user can create a forum post if the userId matches their own ID.
     * @allow (get, list, update, delete): Only the owner of the forum post can read, list, update, or delete it.
     * @deny (create): If the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of user documents. Path based ownership for securing data to the user.
     * @path /users/{userId}
     * @allow (create): Only the user themselves can create their own user document.
     * @allow (get, update, delete): Only the owner of the user document can read, update, or delete it.
     * @deny (create): If the userId does not match the authenticated user's ID.
     *  @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Collection of team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team category data.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify team category data.
     * @deny (create, update, delete): Unauthenticated users cannot modify team category data.
     * @principle Public read, admin-only write.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Collection of all teams.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify team data.
     * @deny (create, update, delete): Unauthenticated users cannot modify team data.
     * @principle Public read, admin-only write.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Collection of denormalized user data for quick lookups, sorted by team.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify member data.
     * @deny (create, update, delete): Unauthenticated users cannot modify member data.
     * @principle Public read, admin-only write.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Collection of lightweight, denormalized user data for quick lookups.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify group member data.
     * @deny (create, update, delete): Unauthenticated users cannot modify group member data.
     * @principle Public read, admin-only write.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

     /**
      * @description Collection of all polls.
      * @path /polls/{pollId}
      * @allow (get, list): Any user can read poll data.
      * @allow (create, update, delete): Only authenticated users with appropriate admin roles (not defined here) can modify poll data.
      * @deny (create, update, delete): Unauthenticated users cannot modify poll data.
      * @principle Public read, admin-only write.
      */
    match /polls/{pollId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin/owner role check
    }

    /**
     * @description Subcollection for responses to a specific poll.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): Authenticated users can create a response.
     * @allow (get, list): Any user can read all poll responses.
     * @allow (update, delete): Only the owner of the response can update or delete it.
     *  @principle Enforces document ownership for writes.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow get, list: if true;
        allow update: if isExistingOwner(request.resource.data.userId);
        allow delete: if isExistingOwner(request.resource.data.userId);
    }

    /**
     * @description Collection of all events and appointments.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event data.
     * @allow (create): Only authenticated users can create events.
     * @allow (update, delete): Only the event creator can update or delete the event.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
    }

    /**
     * @description Subcollection for RSVP responses to a specific event.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (create): Authenticated users can create a response.
     * @allow (get, list): Any user can read all event responses.
     * @allow (update, delete): Only the owner of the response can update or delete it.
     */
    match /events/{eventId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get, list: if true;
      allow update: if isExistingOwner(request.resource.data.userId);
      allow delete: if isExistingOwner(request.resource.data.userId);
    }

    /**
     * @description Subcollection of messages within a specific chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list, create): Any authenticated user can read messages and create new messages.
     * @allow (update, delete): No one can update or delete messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list, create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Tracks the last time a user viewed a chat room to calculate unread messages.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (get, create, update): Only the user can read, create or update their own chat status.
     * @allow list, delete: if false;
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get, create, update: if isOwner(userId);
      allow list, delete: if false;
    }
  }
}