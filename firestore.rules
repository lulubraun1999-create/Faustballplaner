/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy: This ruleset prioritizes authorization independence through structural segregation
 * and path-based ownership. It avoids `get()` calls in rules by denormalizing data where necessary.
 * This design enables efficient data retrieval while maintaining a high level of security.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles.
 * - `/matches/{matchId}`: Publicly readable match data.
 * - `/players/{playerId}`: Publicly readable player information.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels.
 * - `/users/{userId}`: User profile data, accessible only to the owning user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 * - `/team_categories/{categoryId}`: Publicly readable team categories.
 * - `/teams/{teamId}`: Publicly readable team data.
 * - `/members/{memberId}`: Publicly readable, denormalized member data.
 * - `/group_members/{memberId}`: Publicly readable, lightweight member data.
 * - `/polls/{pollId}`: Publicly readable polls.
 * - `/polls/{pollId}/responses/{responseId}`: Poll responses, accessible only with write access.
 * - `/events/{eventId}`: Publicly readable events.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within a room, accessible with write access.
 * - `/users/{userId}/chat_status/{roomId}`: User's chat status, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Public read access for news articles, matches, players, highlight reels, teams, team categories, members, and group members.
 * - Strict user-ownership model for user profiles, forum posts, and chat status.
 * - Write access control for poll responses, events, and chat messages.
 * - No user listing is allowed for the /users collection.
 *
 * Denormalization for Authorization:
 * - `matchId` is denormalized in `/highlight_reels/{highlightReelId}` to avoid `get()` calls when authorizing access to highlight reels.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the user ID of the existing resource.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner of the existing resource, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): No one can create, update, or delete news articles through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /matches collection.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @allow (create, update, delete): No one can create, update, or delete match data through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /players collection.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player information.
     * @allow (create, update, delete): No one can create, update, or delete player information through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /highlight_reels collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @allow (create, update, delete): No one can create, update, or delete highlight reels through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/forum_posts collection.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list): The owner can read their own forum posts.
     * @allow (create): The owner can create forum posts under their own user ID.
     * @allow (update, delete): The owner can update and delete their own existing forum posts.
     * @deny (create): Deny if the user ID in the path does not match the authenticated user ID.
     * @deny (update, delete): Deny if the document doesn't exist or the user is not the owner.
     * @principle User-owned data, path-based authorization.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get): The owner can read their own user document.
     * @allow (create): Any authenticated user can create their own user document.
     * @allow (update, delete): The owner can update and delete their own existing user document.
     * @deny (list): Listing users is not allowed.
     * @deny (create): Deny if the user ID in the path does not match the authenticated user ID.
     * @deny (update, delete): Deny if the document doesn't exist or the user is not the owner.
     * @principle User-owned data, path-based authorization, self-creation.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for the /team_categories collection.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team categories.
     * @allow (create, update, delete): No one can create, update, or delete team categories through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @allow (create, update, delete): No one can create, update, or delete team data through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /members collection.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read denormalized member data.
     * @allow (create, update, delete): No one can create, update, or delete member data through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /group_members collection.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read lightweight member data.
     * @allow (create, update, delete): No one can create, update, or delete member data through the client (admin only).
     * @deny (create): Always deny client-side creation.
     * @principle Public read, admin-only write.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /polls collection.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read polls.
     * @allow (create, update, delete): No one can create, update, or delete polls through the client (admin only).
     * @deny (create): Always deny client-side creation.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /polls/{pollId}/responses collection.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get, list: if false;
     * @allow update, delete: if false;
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if false;
      allow update, delete: if false;
    }

   /**
     * @description Rules for the /events collection.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false;
     *  @deny (create): Always deny client-side creation.
     */
    match /events/{eventId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

   /**
     * @description Rules for the /chat_rooms/{roomId}/messages collection.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow create: if isSignedIn();
     * @allow get, list: if false;
     * @allow update, delete: if false;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get, list: if false;
      allow update, delete: if false;
    }

     /**
      * @description Rules for the /users/{userId}/chat_status/{roomId} collection.
      * @path /users/{userId}/chat_status/{roomId}
      *  @allow get: if isOwner(userId);
      *  @allow create: if isOwner(userId);
      *  @allow update: if isExistingOwner(userId);
      *  @allow delete: if isExistingOwner(userId);
      *  @allow list: if isOwner(userId);
      */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
  }
}