/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership. It enforces a strict
 * path-based ownership model for user-generated content and assumes global
 * data is read-only for most users. The goal is to prevent unauthorized data
 * access and modification.
 *
 * Data Structure:
 * - User-specific data (e.g., forum posts, user profiles) is nested under
 *   `/users/{userId}/...`.
 * - Global data (e.g., news articles, matches, players) resides in top-level
 *   collections (e.g., `/news_articles`, `/matches`, `/players`).
 *
 * Key Security Decisions:
 * - Strict path-based ownership: Users can only create, read, update, and
 *   delete data under their own `/users/{userId}` path.
 * - No user listing: Listing all users is explicitly denied.
 * - Global data is publicly readable but only writable via application-level
 *   logic (assumed admin access).
 * - No validation of data types is implemented.
 *
 * Denormalization for Authorization:
 * - To avoid costly `get()` calls in security rules, the `matchId` is denormalized
 *   into the `highlight_reels` collection, enabling direct authorization checks
 *   without needing to retrieve related match data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to news articles for all users.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read-only access to matches for all users.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read-only access to players for all users.
     * @path /players/{playerId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read-only access to highlight reels for all users.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages forum posts for a specific user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): if isSignedIn() && request.auth.uid == userId
     * @allow (get, list, update, delete): if isOwner(userId)
     * @deny (create): if !isSignedIn() || request.auth.uid != userId
     * @deny (get, list, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list, update, delete: if isOwner(userId);
    }

    /**
     * @description Manages user-specific data.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && request.auth.uid == userId
     * @allow (get, update, delete): if isOwner(userId)
     * @allow (list): if false;
     * @deny (create): if !isSignedIn() || request.auth.uid != userId
     * @deny (get, update, delete): if !isOwner(userId)
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, update, delete: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows read-only access to team categories for all users.
     * @path /team_categories/{categoryId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read-only access to teams for all users.
     * @path /teams/{teamId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    
    /**
     * @description Allows read-only access to members for all users.
     * @path /members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read-only access to group members for all users.
     * @path /group_members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read-only access to polls for all users.
     * @path /polls/{pollId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages poll responses for a specific poll.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): if isSignedIn()
     * @allow (get, list): if true
     * @deny (update, delete): if false
     * @principle Restricts write access, allows public reads.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if true;
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read-only access to events for all users.
     * @path /events/{eventId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages event responses for a specific event.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (create): if isSignedIn()
     * @allow (get, list): if true
     * @deny (update, delete): if false
     * @principle Restricts write access, allows public reads.
     */
    match /events/{eventId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if true;
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows creating chat messages.
      * @path /chat_rooms/{roomId}/messages/{messageId}
      * @allow create: if isSignedIn()
      * @allow get, list: if true
      * @deny update, delete: if false
      */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get, list: if true;
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Track the last time a user viewed a chat room.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow create, update: if isOwner(userId)
     * @allow get: if isOwner(userId)
     * @deny list, delete: if false
     */
    match /users/{userId}/chat_status/{roomId} {
        allow create, update: if isOwner(userId);
        allow get: if isOwner(userId);
        allow list, delete: if false;
    }

    /**
     * @description Allows read-only access to locations for all users.
     * @path /locations/{locationId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for global data, owner-only writes.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows read-only access to event titles for all users.
      * @path /event_titles/{eventTitleId}
      * @allow (get, list): if true
      * @deny (create, update, delete): if false
      * @principle Public read access for global data, owner-only writes.
      */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}