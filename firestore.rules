/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, path-based ownership model for user-generated content
 * while allowing public read access to global data collections.  It assumes that write access
 * to public collections will be handled via a backend admin interface, not directly by client applications.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public news articles.
 * - /matches/{matchId}: Public match data.
 * - /players/{playerId}: Public player information.
 * - /highlight_reels/{highlightReelId}: Public highlight reels (matchId is denormalized).
 * - /users/{userId}: User profiles (private).
 * - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user.
 *
 * Key Security Decisions:
 * - Public read access for news articles, matches, players, and highlight reels.
 * - Strict user-ownership for forum posts under the /users/{userId} path.
 * - User documents are only accessible to the authenticated user.
 * - Administrative privileges are assumed to be managed server-side.
 *
 * Denormalization for Authorization:
 *  - The `matchId` is denormalized into the `highlight_reels` collection to avoid needing `get()` calls
 *    to the `matches` collection for authorization.
 *
 * Structural Segregation:
 *  - User-specific forum posts are stored under a user-specific subcollection (/users/{userId}/forum_posts/{postId})
 *    to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles.  Write access is denied to clients.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, restricts all client-side writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is denied to clients.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, restricts all client-side writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is denied to clients.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, restricts all client-side writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied to clients.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, restricts all client-side writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages forum posts for a specific user. Only the owner (the user whose ID is in the path) can create, read, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId) || request.resource.data.userId != userId;
     * @deny update: if !isSignedIn() || !isExistingOwner(userId);
     * @deny delete: if !isSignedIn() || !isExistingOwner(userId);
     * @principle Enforces strict user-ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user documents. Only the user themselves can read, create, update, or delete their own document.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @allow list: if false;
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId) || request.resource.data.id != userId;
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource.data.id != userId;
     * @deny delete: if !isSignedIn() || !isExistingOwner(userId);
     * @principle Enforces strict user-ownership for user documents and prevents listing.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

      /**
       * @description Allows public read access to team categories.  Write access is denied to clients.
       * @path /team_categories/{categoryId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public reads, restricts all client-side writes.
       */
      match /team_categories/{categoryId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

      /**
       * @description Allows public read access to teams. Write access is denied to clients.
       * @path /teams/{teamId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public reads, restricts all client-side writes.
       */
      match /teams/{teamId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

      /**
       * @description Allows public read access to members. Write access is denied to clients.
       * @path /members/{memberId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public reads, restricts all client-side writes.
       */
      match /members/{memberId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

      /**
       * @description Allows public read access to group members. Write access is denied to clients.
       * @path /group_members/{memberId}
       * @allow get, list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public reads, restricts all client-side writes.
       */
      match /group_members/{memberId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

    /**
     * @description Allows public read access to polls. Write access is denied to clients.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, restricts all client-side writes.
     */
      match /polls/{pollId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

    /**
     * @description Allows public read access to poll responses. Write access is denied to clients.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, restricts all client-side writes.
     */
      match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }


    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of an existing document.
      * @param {string} userId The user ID to check.
      * @return True if the user ID matches the authenticated user's ID and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}