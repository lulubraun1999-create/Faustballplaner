/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content and restricts write access to global data to prevent unauthorized modifications. Read access to global data is generally open to allow broad access to application content.
 *
 * Data Structure:
 * - User-specific data (e.g., forum posts, user profiles, chat statuses) is nested under `/users/{userId}`.
 * - Global data (e.g., news articles, matches, players, highlight reels, teams, event titles, locations, team categories, members, group_members) is stored in top-level collections.
 * - Subcollections are used to manage relationships between entities (e.g., `/polls/{pollId}/responses/{responseId}`, `/events/{eventId}/responses/{responseId}`, `/events/{eventId}/overrides/{overrideId}`, `/chat_rooms/{roomId}/messages/{messageId}`).
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the absence of a top-level `/users` collection. Access to user profiles is restricted to the profile owner via path-based ownership.
 * - Global data collections are designed to be read-only for most users; write access is not explicitly granted in the rules and should be handled via backend processes.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - Forum posts are stored under `/users/{userId}/forum_posts/{postId}` to avoid needing to query user data for authorization.
 * - Highlight reels include a denormalized `matchId` to allow querying for reels related to a specific match without complex rule logic.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is denied to clients and must be handled server-side.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to news articles but restricts write access to server-side only.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is denied to clients and must be handled server-side.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to match data but restricts write access to server-side only.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is denied to clients and must be handled server-side.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to player data but restricts write access to server-side only.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reel data. Write access is denied to clients and must be handled server-side.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to highlight reel data but restricts write access to server-side only.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to forum posts via path-based ownership.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get, list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get, list: if !isSignedIn() && userId != request.auth.uid;
     * @deny update: if !isSignedIn() || userId != request.auth.uid;
     * @deny delete: if !isSignedIn() || userId != request.auth.uid;
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to user documents.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get: if !isSignedIn() && userId != request.auth.uid;
     * @deny update: if !isSignedIn() || userId != request.auth.uid;
     * @deny delete: if !isSignedIn() || userId != request.auth.uid;
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team category data. Write access is denied to clients and must be handled server-side.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to team category data but restricts write access to server-side only.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data. Write access is denied to clients and must be handled server-side.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to team data but restricts write access to server-side only.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to member data. Write access is denied to clients and must be handled server-side.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to member data but restricts write access to server-side only.
     */
     match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group member data. Write access is denied to clients and must be handled server-side.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to group member data but restricts write access to server-side only.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to poll data. Write access is denied to clients and must be handled server-side.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to poll data but restricts write access to server-side only.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create, read, update and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
     * @allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
     * @allow list: if isSignedIn();
     * @allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
     * @allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
     * @deny create: if !isSignedIn() || request.auth.uid != request.resource.data.userId;
     * @deny get: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @deny update: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @principle Enforces that only the user who created the response can read, update, or delete it.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
        allow update: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Allows public read access to event data. Write access is denied to clients and must be handled server-side.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event data but restricts write access to server-side only.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event override data. Write access is denied to clients and must be handled server-side.
     * @path /events/{eventId}/overrides/{overrideId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event override data but restricts write access to server-side only.
     */
    match /events/{eventId}/overrides/{overrideId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create, read, update and delete their own event responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
     * @allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
     * @allow list: if isSignedIn();
     * @allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
     * @allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
     * @deny create: if !isSignedIn() || request.auth.uid != request.resource.data.userId;
     * @deny get: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @deny update: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @principle Enforces that only the user who created the response can read, update, or delete it.
     */
    match /events/{eventId}/responses/{responseId} {
        allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
        allow update: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Allows public read access to chat messages. Write access is restricted to authenticated users.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @deny update, delete: if false;
     * @principle Allows any user to read chat messages, but only authenticated users can post new messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to user chat status documents.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get: if !isSignedIn() && userId != request.auth.uid;
     * @deny update: if !isSignedIn() || userId != request.auth.uid;
     * @deny delete: if !isSignedIn() || userId != request.auth.uid;
     * @principle Enforces document ownership for writes and restricts access to a user's own chat status data.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to location data. Write access is denied to clients and must be handled server-side.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to location data but restricts write access to server-side only.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event title data. Write access is denied to clients and must be handled server-side.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event title data but restricts write access to server-side only.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Helper function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to check if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Helper function to check if the authenticated user is the owner of an existing resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}