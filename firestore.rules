/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence, avoiding `get()` calls to other documents for rule evaluation.
 * It enforces strict user-ownership for user-generated content and assumes read-only access to public data for most users.
 *
 * Data Structure:
 * - Public data (news, matches, players, highlight reels, teams, team categories, events, polls) is stored in top-level collections.
 * - User-specific data (forum posts, user data, chat status) is nested under `/users/{userId}`.
 * - Chat messages are stored in the /chat_rooms/{roomId}/messages/{messageId} subcollection
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed due to the lack of a top-level `/users` collection listing rule.
 * - Global data is assumed to be read-only for most users, with administrative access controlled at the application level.
 * - Path-based ownership is heavily utilized for user-generated content.
 *
 * Denormalization for Authorization:
 * - `highlight_reels` denormalizes `matchId` to enable efficient queries without needing to `get()` the corresponding `match` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Only allows creating, updating, and deleting.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data.  Denies all writes.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Denies all writes.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Only allows creating, updating, and deleting.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories.  Denies all writes.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data.  Denies all writes.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Allows anyone to read member data.  Denies all writes.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
     match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data. Denies all writes.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read polls. Denies all writes.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll responses. Denies all writes.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read events. Denies all writes.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access and restricts write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Allows anyone to read messages, but restricts writing to signed-in users.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, signed-in users can create messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    
   /**
     * @description Allows a user to read, create, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
     match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}