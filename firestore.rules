/**
 * @fileOverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content (forum posts) and user profiles.
 * Global data (news articles, matches, players, highlight reels) is publicly readable. Write access to global data is implicitly restricted, requiring backend-side validation to avoid open writes.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels, denormalized with matchId.
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Global data collections (/news_articles, /matches, /players, /highlight_reels) are publicly readable (`allow get, list: if true;`). Write access is implicitly restricted through the absence of write rules, requiring backend admin privileges.
 * - User data under /users/{userId} is strictly controlled by ownership.
 * - Forum posts are owned by the user who created them, enforced via path-based ownership.
 * - Listing of user documents is allowed only for the owner.
 *
 * Denormalization for Authorization:
 * - HighlightReels include a `matchId` field to allow filtering highlight reels by match without needing to query across collections.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored in a user subcollection (/users/{userId}/forum_posts/{postId}) to simplify ownership checks and avoid the need for document-level access control flags.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is implicitly denied, requiring backend validation.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No direct client-side writes allowed.
     * @principle Public read access for global data; backend-controlled writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is implicitly denied, requiring backend validation.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No direct client-side writes allowed.
     * @principle Public read access for global data; backend-controlled writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information. Write access is implicitly denied, requiring backend validation.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player information.
     * @deny (create, update, delete): No direct client-side writes allowed.
     * @principle Public read access for global data; backend-controlled writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is implicitly denied, requiring backend validation.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No direct client-side writes allowed.
     * @principle Public read access for global data; backend-controlled writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user-specific data and forum posts.  Users can only read/write their own data.
     * @path /users/{userId}
     * @allow (create): User can create their own user document if the userId matches their auth.
     * @allow (get, list): User can read their own user document.
     * @allow (update, delete): User can update/delete their own user document.
     * @deny Any other user attempting to access this data.
     * @principle Path-based ownership; enforces strict user data isolation.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);

      /**
       * @description Allows a user to manage their own forum posts.
       * @path /users/{userId}/forum_posts/{postId}
       * @allow (create): User can create a forum post under their own user ID if request data is valid
       * @allow (get, list): User can read their own forum posts.
       * @allow (update, delete): User can update/delete their own forum posts.
       * @deny Any other user attempting to access this data.
       * @principle Path-based ownership; enforces strict user data isolation.
       */
      match /forum_posts/{postId} {
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}