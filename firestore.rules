/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and segregation of data.
 * User-generated content is secured using path-based ownership, while global data is publicly readable but restricted to owner-only writes (with the assumption that admin privileges are handled at the application level).
 * To achieve high performance and scalability, the ruleset avoids costly `get()` calls by denormalizing data required for authorization directly onto the documents.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels, with denormalized matchId.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All global data collections are publicly readable.
 * - Write access to global data collections is restricted to owners (to be implemented).
 * - Forum posts are owned by the user who created them, enforced via path-based ownership.
 *
 * Denormalization for Authorization:
 * - HighlightReel documents denormalize the `matchId` to avoid needing to `get()` the Match document for authorization.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under the `/users/{userId}` collection to ensure only the owning user can access them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletions.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access, owner-only writes (TODO: Implement owner check).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletions.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access, owner-only writes (TODO: Implement owner check).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletions.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access, owner-only writes (TODO: Implement owner check).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletions.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access, owner-only writes (TODO: Implement owner check).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces user-specific access control for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny list: if false;
     * @deny create: if !isSignedIn() || request.resource.data.userId != request.auth.uid;
     * @deny update: if !isSignedIn() || request.resource.data.userId != resource.data.userId;
     * @deny delete: if !isSignedIn();
     * @principle Path-based ownership for user-generated content.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific access control for user profiles.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny list: if false;
     * @deny create: if !isSignedIn() || request.resource.data.id != request.auth.uid;
     * @deny update: if !isSignedIn() || request.resource.data.id != resource.data.id;
     * @deny delete: if !isSignedIn();
     * @principle Path-based ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}