/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and efficient data retrieval
 * by avoiding `get()` calls and enforcing path-based ownership where applicable.
 * Access is generally restricted to authenticated users, with some collections
 * intended for public read access.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels.
 * - `/users/{userId}`: Private user data, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user.
 * - `/team_categories/{categoryId}`: Public team categories.
 * - `/teams/{teamId}`: Public team data.
 * - `/members/{memberId}`: Public member information.
 * - `/group_members/{memberId}`: Public group member information.
 *
 * Key Security Decisions:
 * - Global data (news, matches, players, highlight reels, team categories, teams, members, and group members) is publicly readable.
 * - User data and forum posts are strictly owned by the user.
 * - No user listing is allowed (to prevent data scraping).
 *
 * Denormalization for Authorization:
 * - Highlight reels include `matchId` to allow efficient queries without requiring `get()` calls to the `matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Writes are denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Writes are denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information. Writes are denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Writes are denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get, list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own user document.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to team categories. Writes are denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data. Writes are denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows public read access to member data. Writes are denied.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows public read access to group member data. Writes are denied.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}