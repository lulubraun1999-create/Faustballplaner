/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, combining public read access for general content (news, matches, players) with strict user-ownership for personal data and content creation (forum posts, user profiles).
 *
 * Data Structure:
 * - Public Content: Stored in top-level collections like `/news_articles`, `/matches`, `/players`, `/highlight_reels`, `/team_categories`, `/teams`, `/members`, `/group_members`, and `/polls`.
 * - User-Specific Data: Stored under `/users/{userId}` (e.g., `/users/{userId}/forum_posts/{postId}`).
 *
 * Key Security Decisions:
 * - Public Read Access: News articles, match data, and player information are publicly readable to facilitate broad access.
 * - User Ownership: Users have full control over their own profiles and forum posts.
 * - No User Listing: Listing all user documents is explicitly denied to protect user privacy.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized in `/highlight_reels` documents to allow efficient queries without needing to fetch `Match` documents for authorization.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public content resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles and restricts writes.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to match data and restricts writes.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to player information and restricts writes.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to highlight reels and restricts writes.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get, list: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn();
     * @deny get, list: if !isSignedIn();
     * @deny update: if !isSignedIn() || request.auth.uid != userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId;
     * @principle Enforces user ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny list: if true;
     * @principle Enforces user ownership for user profiles and prevents listing all users.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false; // Prevent listing of all user documents
    }

    /**
     * @description Grants public read access to team categories and restricts writes.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to teams and restricts writes.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to members and restricts writes.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to group members and restricts writes.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
      /**
     * @description Grants public read access to polls and restricts writes.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
      match /polls/{pollId} {
        allow get, list: if true;
        allow create, update, delete: if false;
        
        /**
         * @description Allows any authenticated user to create poll responses, with ownership maintained through the document path.
         * @path /polls/{pollId}/responses/{responseId}
         * @allow create: if isSignedIn();
         * @allow get, list: if true;
         * @allow update: if isSignedIn() && isExistingOwner(responseId);
         * @allow delete: if isSignedIn() && isExistingOwner(responseId);
         * @principle Allows authenticated users to respond to polls.
         */
        match /responses/{responseId} {
          allow create: if isSignedIn();
          allow get, list: if true;
          allow update: if isSignedIn() && isExistingOwner(responseId);
          allow delete: if isSignedIn() && isExistingOwner(responseId);
        }
      }

  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the existing document
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}