/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-only access model for user-generated content
 * and public read access for global data. It avoids complex `get()` calls by denormalizing
 * authorization-relevant data directly onto documents.
 *
 * Data Structure:
 * - News articles, matches, and players are stored in top-level collections
 *   (`/news_articles`, `/matches`, `/players`) and are publicly readable. Writes to these
 *   collections are not secured via security rules.
 * - User-specific forum posts are nested under `/users/{userId}/forum_posts/{postId}`,
 *   enforcing ownership.
 * - User profiles are stored in `/users/{userId}` and are only accessible to the
 *   corresponding user.
 * - Highlight reels are stored in `/highlight_reels/{highlightReelId}`, with `matchId` denormalized.
 * - Team categories and teams are stored in top-level collections (`/team_categories`, `/teams`) and are publicly readable. Writes to these collections are not secured via security rules.
 * - Members and group members are stored in top-level collections (`/members`, `/group_members`) and are publicly readable. Writes to these collections are not secured via security rules.
 * - Polls are stored in `/polls/{pollId}` and are publicly readable.
 * - Poll responses are stored in `/polls/{pollId}/responses/{responseId}`.
 *
 * Key Security Decisions:
 * - Public read access for news articles, matches, players, team categories and teams.
 * - Strict user-ownership model for forum posts and user profiles.
 * - Data consistency enforced between document IDs and path parameters for user-owned data.
 * - No user listing is allowed.
 * - Highlight reels have `matchId` denormalized to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces resource ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource, and that the resource exists.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces resource ownership and existence.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Any user can read news articles.
     * @deny (create, update, delete) No user can create, update, or delete news articles through the rules.
     * @principle Allows public read access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /matches collection.
     * @path /matches/{matchId}
     * @allow (get, list) Any user can read match data.
     * @deny (create, update, delete) No user can create, update, or delete match data through the rules.
     * @principle Allows public read access to match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /players collection.
     * @path /players/{playerId}
     * @allow (get, list) Any user can read player data.
     * @deny (create, update, delete) No user can create, update, or delete player data through the rules.
     * @principle Allows public read access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /highlight_reels collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) Any user can read highlight reel data.
     * @deny (create, update, delete) No user can create, update, or delete highlight reel data through the rules.
     * @principle Allows public read access to highlight reel data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/forum_posts collection.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) A user can create a forum post under their own user ID, validating the user ID in the path and the document.
     * @allow (get, list, update, delete) Only the owner of the forum post can read, update, or delete it.
     * @deny (create) A user cannot create a forum post under another user's ID.
     * @deny (get, list, update, delete) A user cannot read, update, or delete another user's forum post.
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile.
     * @allow (get, update, delete) Only the owner can read, update, or delete their profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (get, update, delete) A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Rules for the /team_categories collection.
     * @path /team_categories/{categoryId}
     * @allow (get, list) Any user can read team categories.
     * @deny (create, update, delete) No user can create, update, or delete team categories through the rules.
     * @principle Allows public read access to team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (get, list) Any user can read teams.
     * @deny (create, update, delete) No user can create, update, or delete teams through the rules.
     * @principle Allows public read access to teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /members collection.
     * @path /members/{memberId}
     * @allow (get, list) Any user can read members.
     * @deny (create, update, delete) No user can create, update, or delete members through the rules.
     * @principle Allows public read access to members.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /group_members collection.
     * @path /group_members/{memberId}
     * @allow (get, list) Any user can read group members.
     * @deny (create, update, delete) No user can create, update, or delete group members through the rules.
     * @principle Allows public read access to group members.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /polls collection.
     * @path /polls/{pollId}
     * @allow (get, list) Any user can read polls.
     * @deny (create, update, delete) No user can create, update, or delete polls through the rules.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /polls/{pollId}/responses collection.
     * @path /polls/{pollId}/responses/{responseId}
     * NOTE:  In a full production application, the read rules for poll responses should be carefully reviewed to ensure anonymity and prevent leaking data.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}