rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Allows public read access to news articles, but restricts writes to be defined at the application level.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Anyone can read the news articles.
     * @deny create, update, delete: No one can create, update, or delete news articles via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data, but restricts writes to be defined at the application level.
     * @path /matches/{matchId}
     * @allow get, list: Anyone can read the match data.
     * @deny create, update, delete: No one can create, update, or delete match data via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data, but restricts writes to be defined at the application level.
     * @path /players/{playerId}
     * @allow get, list: Anyone can read the player data.
     * @deny create, update, delete: No one can create, update, or delete player data via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels, but restricts writes to be defined at the application level.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Anyone can read the highlight reels.
     * @deny create, update, delete: No one can create, update, or delete highlight reels via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts. Only the owner (the user whose ID matches the path) can create, read, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: If the user ID in the path matches the authenticated user's ID.
     * @allow get, list: If the user ID in the path matches the authenticated user's ID.
     * @allow update, delete: If the user ID in the path matches the authenticated user's ID and the resource exists.
     * @deny create: If the user ID in the path does not match the authenticated user's ID.
     * @deny get, list: If the user ID in the path does not match the authenticated user's ID.
     * @deny update, delete: If the user ID in the path does not match the authenticated user's ID or if the resource does not exist.
     * @principle Path-based ownership.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && exists(resource);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces user-ownership for user documents. Only the owner (the user whose ID matches the path) can create, read, update, or delete their own document. Allows self-creation of the user document.
     * @path /users/{userId}
     * @allow create: If the user ID in the path matches the authenticated user's ID.
     * @allow get: If the user ID in the path matches the authenticated user's ID.
     * @allow update, delete: If the user ID in the path matches the authenticated user's ID and the resource exists.
     * @deny create: If the user ID in the path does not match the authenticated user's ID.
     * @deny get: If the user ID in the path does not match the authenticated user's ID.
     * @deny update, delete: If the user ID in the path does not match the authenticated user's ID or if the resource does not exist.
     * @principle Path-based ownership.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && exists(resource);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
      allow list: if false;
    }

    /**
     * @description Allows public read access to team categories, but restricts writes to be defined at the application level.
     * @path /team_categories/{categoryId}
     * @allow get, list: Anyone can read the team categories.
     * @deny create, update, delete: No one can create, update, or delete team categories via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams, but restricts writes to be defined at the application level.
     * @path /teams/{teamId}
     * @allow get, list: Anyone can read the teams.
     * @deny create, update, delete: No one can create, update, or delete teams via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to members, but restricts writes to be defined at the application level.
     * @path /members/{memberId}
     * @allow get, list: Anyone can read the members.
     * @deny create, update, delete: No one can create, update, or delete members via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group members, but restricts writes to be defined at the application level.
     * @path /group_members/{memberId}
     * @allow get, list: Anyone can read the group members.
     * @deny create, update, delete: No one can create, update, or delete group members via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to polls, but restricts writes to be defined at the application level.
     * @path /polls/{pollId}
     * @allow get, list: Anyone can read the polls.
     * @deny create, update, delete: No one can create, update, or delete polls via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to poll responses, but restricts writes to be defined at the application level.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: Anyone can read the poll responses.
     * @deny create, update, delete: No one can create, update, or delete poll responses via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to events, but restricts writes to be defined at the application level.
     * @path /events/{eventId}
     * @allow get, list: Anyone can read the events.
     * @deny create, update, delete: No one can create, update, or delete events via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event responses, but restricts writes to be defined at the application level.
     * @path /events/{eventId}/responses/{responseId}
     * @allow get, list: Anyone can read the event responses.
     * @deny create, update, delete: No one can create, update, or delete event responses via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /events/{eventId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to chat messages, but restricts writes to be defined at the application level.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: Anyone can read the chat messages.
     * @deny create, update, delete: No one can create, update, or delete chat messages via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for chat status. Only the owner (the user whose ID matches the path) can create, read, update, or delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow create: if isOwner(userId);
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
      * @allow list: if isOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny get: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Path-based ownership.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && exists(resource);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to locations, but restricts writes to be defined at the application level.
     * @path /locations/{locationId}
     * @allow get, list: Anyone can read the locations.
     * @deny create, update, delete: No one can create, update, or delete locations via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event titles, but restricts writes to be defined at the application level.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: Anyone can read the event titles.
     * @deny create, update, delete: No one can create, update, or delete event titles via the client. These operations should be handled by trusted application code.
     * @principle Public read, admin-only write.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}