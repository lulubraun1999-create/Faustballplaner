/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership. It enforces a strict
 * path-based ownership model for user-generated content and assumes global
 * data (news, matches, players) is publicly readable with restricted write access.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public news articles.
 * - /matches/{matchId}: Public match data.
 * - /players/{playerId}: Public player information.
 * - /highlight_reels/{highlightReelId}: Public highlight reels with denormalized matchId.
 * - /users/{userId}: Private user data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user.
 *
 * Key Security Decisions:
 * - Public data (news, matches, players, highlight reels) is readable by all.
 * - User data and forum posts are strictly owned by the respective user.
 * - Data consistency between paths and document IDs is enforced on creation and updates.
 * - Listing of user documents is allowed only for the owner.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Rules for news articles.
     * @principle Allows public read access and restricts writes to the owner.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for matches.
     * @principle Allows public read access and restricts writes to the owner.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for players.
     * @principle Allows public read access and restricts writes to the owner.
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for highlight reels.
     * @principle Allows public read access and restricts writes to the owner.
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for forum posts under a specific user.
     * @principle Enforces user-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user documents.
     * @principle Enforces user-based ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}