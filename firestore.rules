/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on path-based ownership and role-based access,
 * with an emphasis on avoiding `get()` calls for efficiency and security. It assumes a strict
 * separation between public and private data.
 *
 * Data Structure:
 * - Top-level collections: /news_articles, /matches, /players, /highlight_reels, /team_categories,
 *   /teams, /members, /group_members, /polls, /events, /locations, /event_titles.
 * - User-scoped subcollections: /users/{userId}/forum_posts, /users/{userId}/chat_status.
 * - Subcollections: /events/{eventId}/responses/{responseId}, /chat_rooms/{roomId}/messages/{messageId}, /polls/{pollId}/responses/{responseId}.
 *
 * Key Security Decisions:
 * - User data is secured via path-based ownership under /users/{userId}.
 * - Forum posts are secured via path-based ownership under /users/{userId}/forum_posts.
 * - Top-level collections are generally readable by all authenticated users, with write access
 *   restricted (presumably to admins, though this is not yet implemented via custom claims or other means).
 * - Listing of user documents is allowed only for the owner.
 * - Admin privileges are granted by the presence of a document in the /admins/{userId} collection.
 * - The ruleset relies on the application to enforce more granular access control and data validation.
 * - Denormalization is used to avoid `get()` calls, with `matchId` copied into `HighlightReel` documents,
 *   and `userId` copied into `ForumPost` documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reel data, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get, list: if request.auth.uid == userId;
     * @allow update: if request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth.uid == userId && resource != null;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if request.auth.uid == userId;
     * @allow list: if request.auth.uid == userId;
     * @allow update: if request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth.uid == userId && resource != null;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows an admin to read, update, and delete their own admin document. Allows anyone to create an admin document if their uid matches the document id.
     * @path /admins/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if request.auth.uid == userId;
     * @allow list: if false;
     * @allow update: if request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth.uid == userId && resource != null;
     * @principle Enforces document ownership for writes.
     */
    match /admins/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read member data, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read group member data, but restricts creation, updates, and deletion.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Allows anyone to read poll data, but restricts creation, updates, and deletion.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /polls/{pollId} {
          allow get, list: if true;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
    }

    /**
     * @description Restricts access to poll responses to authenticated users who own the response.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @allow get: if request.auth.uid == resource.data.userId;
     * @allow list: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Enforces ownership for creating and reading poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
        allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }
     /**
      * @description Allows anyone to read event data, but restricts creation, updates, and deletion.
      * @path /events/{eventId}
      * @allow get, list: if true;
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public reads, but restricts writes to authorized users.
      */
    match /events/{eventId} {
          allow get, list: if true;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
    }
    /**
     * @description Restricts access to event responses to authenticated users who own the response.
     * @path /events/{eventId}/responses/{responseId}
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @allow get: if request.auth.uid == resource.data.userId;
     * @allow list: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Enforces ownership for creating and reading event responses.
     */
    match /events/{eventId}/responses/{responseId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Allows anyone to read chat messages, but restricts creation, updates, and deletion.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Allows a user to create, read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if request.auth.uid == userId;
     * @allow list: if request.auth.uid == userId;
     * @allow update: if request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth.uid == userId && resource != null;
     * @principle Enforces document ownership for writes.
     */
     match /users/{userId}/chat_status/{roomId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }
    /**
     * @description Allows anyone to read location data, but restricts creation, updates, and deletion.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /locations/{locationId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
    /**
     * @description Allows anyone to read event title data, but restricts creation, updates, and deletion.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /event_titles/{eventTitleId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows anyone to list all the documents of all collections.
     * @path /
     * @allow list: if true;
     * @principle Allows public reads, but restricts writes to authorized users.
     */
    match /{path=**} {
      allow list: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}