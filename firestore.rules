/**
 * @file Firestore Security Rules for Werkself Hub
 * @version Prototyping Mode - Authorization Focused
 *
 * @description This ruleset prioritizes authorization and access control, while relaxing data validation to facilitate rapid prototyping.
 * It enforces a strict user-ownership model for user-generated content and provides public read access to global data collections.
 *
 * Data Structure:
 * - Global data (news, matches, players, highlight reels, team categories, teams) is stored in top-level collections.
 * - User-specific data (user profiles, forum posts) is nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is denied.
 * - Global data collections are publicly readable, with the assumption that write operations are managed via backend or administrative clients (not directly by end-users).
 * - All write operations are protected by authorization checks; `if true;` is never used for write permissions.
 * - Timestamp fields are not validated in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - HighlightReels denormalize `matchId` to allow efficient filtering without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Ensures that only authenticated users can perform certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces ownership for data access.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces ownership and resource existence for destructive operations.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rules for the /news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Anyone can read news articles.
     * @allow (create) Backend service with appropriate credentials can create.
     * @allow (update, delete) Backend service with appropriate credentials can update or delete.
     * @deny (create, update, delete) Regular users cannot create, update, or delete news articles.
     * @principle Allows public read access while restricting write access to authorized sources.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /matches collection.
     * @path /matches/{matchId}
     * @allow (get, list) Anyone can read match data.
     * @allow (create) Backend service with appropriate credentials can create.
     * @allow (update, delete) Backend service with appropriate credentials can update or delete.
     * @deny (create, update, delete) Regular users cannot create, update, or delete match data.
     * @principle Allows public read access while restricting write access to authorized sources.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /players collection.
     * @path /players/{playerId}
     * @allow (get, list) Anyone can read player data.
     * @allow (create) Backend service with appropriate credentials can create.
     * @allow (update, delete) Backend service with appropriate credentials can update or delete.
     * @deny (create, update, delete) Regular users cannot create, update, or delete player data.
     * @principle Allows public read access while restricting write access to authorized sources.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /highlight_reels collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) Anyone can read highlight reel data.
     * @allow (create) Backend service with appropriate credentials can create.
     * @allow (update, delete) Backend service with appropriate credentials can update or delete.
     * @deny (create, update, delete) Regular users cannot create, update, or delete highlight reel data.
     * @principle Allows public read access while restricting write access to authorized sources.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /users/{userId}/forum_posts collection.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get) Owner can get their own forum post.
     * @allow (list) Owner can list their own forum posts.
     * @allow (create) Owner can create a forum post in their own user document.
     * @allow (update) Owner can update their own forum post if it exists.
     * @allow (delete) Owner can delete their own forum post if it exists.
     * @deny (get, list, create, update, delete) Any other user cannot access these forum posts.
     * @principle Enforces path-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/forum_posts/$(postId));
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/forum_posts/$(postId));
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get) Owner can get their own user document.
     * @allow (list) Listing all users is not allowed.
     * @allow (create) A user can create their own user document if the userId matches their auth UID.
     * @allow (update) Owner can update their own user document if it exists.
     * @allow (delete) Owner can delete their own user document if it exists.
     * @deny (get, create, update, delete) Any other user cannot access these user documents.
     * @principle Enforces path-based ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      allow delete: if isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

     /**
      * @description Rules for the /team_categories collection.
      * @path /team_categories/{categoryId}
      * @allow (get, list) Anyone can read team categories.
      * @allow (create) Backend service with appropriate credentials can create.
      * @allow (update, delete) Backend service with appropriate credentials can update or delete.
      * @deny (create, update, delete) Regular users cannot create, update, or delete team categories.
      * @principle Allows public read access while restricting write access to authorized sources.
      */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (get, list) Anyone can read team data.
     * @allow (create) Backend service with appropriate credentials can create.
     * @allow (update, delete) Backend service with appropriate credentials can update or delete.
     * @deny (create, update, delete) Regular users cannot create, update, or delete team data.
     * @principle Allows public read access while restricting write access to authorized sources.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add validation once the schema is updated with an ownership field.
    }
  }
}