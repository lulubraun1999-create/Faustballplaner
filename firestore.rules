/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and provides public read access to global data collections.  It avoids complex
 * `get()` calls by denormalizing data necessary for authorization directly onto
 * the documents being secured.  Administrative privileges are assumed to be handled
 * at the application level and are not enforced in these rules.
 *
 * Data Structure:
 * - User-specific data (e.g., forum posts, user profiles, chat status) is nested
 *   under the `/users/{userId}` path, enforcing path-based ownership.
 * - Global data (e.g., news articles, matches, players, highlight reels) resides in
 *   top-level collections, allowing for public read access.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied.  There are no rules that would allow listing
 *   all user documents.
 * - Global data collections are publicly readable but require an ownership field
 *   for write operations (create, update, delete) to be secured. If an ownership
 *   field is missing in the schema, a placeholder rule is added with a critical
 *   comment, indicating the need for schema updates.
 * - Chat messages are secured within chat rooms; only authenticated users can create
 *   or delete messages.
 *
 * Denormalization for Authorization:
 * - HighlightReels denormalize the `matchId` to enable querying reels by match
 *   without needing to access the `Match` document for authorization.
 *
 * Structural Segregation:
 * - Forum posts are stored in a user subcollection (`/users/{userId}/forum_posts`)
 *   to provide clear ownership and avoid mixing private and public content.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Only allows authorized users to create, update, or delete news articles with a valid author.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource.data.author != request.auth.uid || resource == null;
     * @deny delete: if request.auth == null || resource.data.author != request.auth.uid || resource == null;
     * @principle Allows public reads, and owner-only writes using the 'author' field.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read match data. Only allows authorized users to create, update, or delete matches.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read player data. Only allows authorized users to create, update, or delete players.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read highlight reels. Only allows authorized users to create, update, or delete highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth != null && request.auth.uid == userId;
     * @allow get: if request.auth != null && request.auth.uid == userId;
     * @allow list: if request.auth != null && request.auth.uid == userId;
     * @allow update: if request.auth != null && request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth != null && request.auth.uid == userId && resource != null;
     * @deny create: if request.auth == null || request.auth.uid != userId;
     * @deny get: if request.auth == null || request.auth.uid != userId;
     * @deny list: if request.auth == null || request.auth.uid != userId;
     * @deny update: if request.auth == null || request.auth.uid != userId || resource == null;
     * @deny delete: if request.auth == null || request.auth.uid != userId || resource == null;
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.id == userId;
     * @allow get: if request.auth != null && request.auth.uid == userId;
     * @allow update: if request.auth != null && request.auth.uid == userId && resource.data.id == userId && resource != null;
     * @allow delete: if request.auth != null && request.auth.uid == userId && resource != null;
     * @deny create: if request.auth == null || request.auth.uid != userId;
     * @deny get: if request.auth == null || request.auth.uid != userId;
     * @deny update: if request.auth == null || request.auth.uid != userId || resource == null;
     * @deny delete: if request.auth == null || request.auth.uid != userId || resource == null;
     * @principle Enforces document ownership for all operations and validates the `id` field on create/update.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
      * @description Allows anyone to read team categories. Only allows authorized users to create, update, or delete team categories.
      * @path /team_categories/{categoryId}
      * @allow get, list: if true;
      * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
      */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read teams. Only allows authorized users to create, update, or delete teams.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read members. Only allows authorized users to create, update, or delete members.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read group members. Only allows authorized users to create, update, or delete group members.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read polls. Only allows authorized users to create, update, or delete polls.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read poll responses. Only allows the user who created the response to read, update, or delete it.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
     * @allow get: if request.auth != null && resource.data.userId == request.auth.uid;
     * @allow list: if request.auth != null; // Anyone can list responses
     * @allow update: if request.auth != null && resource.data.userId == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.userId == request.auth.uid && resource != null;
     * @deny create: if request.auth == null || request.resource.data.userId != request.auth.uid;
     * @deny get: if request.auth == null || resource.data.userId != request.auth.uid;
     * @deny update: if request.auth == null || resource.data.userId != request.auth.uid || resource == null;
     * @deny delete: if request.auth == null || resource.data.userId != request.auth.uid || resource == null;
     * @principle Enforces ownership for all operations based on the `userId` field in the document.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows anyone to read events. Only allows authorized users to create, update, or delete events.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, but requires a schema update with an ownership field ('authorId', 'ownerId') to secure writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows any authenticated user to create messages. Allows only the message owner to delete a chat message.
      * @path /chat_rooms/{roomId}/messages/{messageId}
      * @allow create: if request.auth != null;
      * @allow get: if request.auth != null;
      * @allow list: if request.auth != null;
      * @allow update: if false;
      * @allow delete: if request.auth.uid == resource.data.userId && resource != null;
      * @deny create: if request.auth == null;
      * @deny get: if false;
      * @deny list: if false;
      * @deny update: if true;
      * @deny delete: if request.auth == null || request.auth.uid != resource.data.userId || resource == null;
      * @principle Only the owner can delete. Updates are not allowed.
      */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if false;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own chat status for a room.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow create: if request.auth != null && request.auth.uid == userId;
     * @allow get: if request.auth != null && request.auth.uid == userId;
     * @allow list: if request.auth != null && request.auth.uid == userId;
     * @allow update: if request.auth != null && request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth != null && request.auth.uid == userId && resource != null;
     * @deny create: if request.auth == null || request.auth.uid != userId;
     * @deny get: if request.auth == null || request.auth.uid != userId;
     * @deny list: if request.auth == null || request.auth.uid != userId;
     * @deny update: if request.auth == null || request.auth.uid != userId || resource == null;
     * @deny delete: if request.auth == null || request.auth.uid != userId || resource == null;
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the provided userId.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}