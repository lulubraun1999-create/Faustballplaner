/**
 * @file Firestore Security Rules for Werkself Hub
 * @core_philosophy This ruleset prioritizes security by enforcing strict path-based ownership for user-generated content and assuming read-only access for global data. It avoids complex `get()` calls by denormalizing data where necessary for authorization.
 * @data_structure The Firestore data is organized into top-level collections for global data (news, matches, players, polls, events) and user subcollections under `/users/{userId}` for private data (forum posts, chat status).
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - Global data collections are world readable.
 *   - All writes must be authenticated and authorized.
 *   - Write operations on all documents enforce existence check to prevent modification of missing documents.
 * @denormalization Authorization decisions rely on denormalized data (e.g., `userId` in `/users/{userId}/forum_posts/{postId}`) to avoid costly `get()` calls.
 * @structural_segregation Private user data and public global data are stored in separate collections to simplify access control and improve query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts. Only the owner can create, read, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isExistingOwner(userId);
     * @deny delete: if !isSignedIn() || !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user documents. Only the owner can create, read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isExistingOwner(userId);
     * @deny delete: if !isSignedIn() || !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read member data, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data, but restricts creation, updates, and deletion.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll data, but restricts creation, updates, and deletion.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with restricted writes.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll responses, but restricts creation, updates, and deletion to authenticated users.
     *  It should be secured to only allow authenticated users, but data shape validation will be loose.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn() || resource == null;
     * @deny delete: if !isSignedIn() || resource == null;
     * @principle Requires authentication for all operations.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

   /**
     * @description Allows anyone to read event data, but restricts creation, updates, and deletion to authenticated users.
     * It should be secured to only allow authenticated users, but data shape validation will be loose.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn() || resource == null;
     * @deny delete: if !isSignedIn() || resource == null;
     * @principle Requires authentication for write operations.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read chat messages, but restricts creation to authenticated users.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access with authenticated writes.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for chat status. Only the owner can create, read, update, or delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isExistingOwner(userId);
     * @deny delete: if !isSignedIn() || !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}