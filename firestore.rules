/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing path-based ownership for user-generated content and allowing public read access to global data collections.
 * It avoids complex `get()` calls by denormalizing data where necessary to make authorization decisions directly on the documents being secured.
 * The rules are designed to be auditable and maintainable, with clear helper functions and comprehensive comments.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 * - /team_categories/{categoryId}: Publicly readable team categories.
 * - /teams/{teamId}: Publicly readable teams.
 * - /members/{memberId}: Publicly readable member data.
 * - /group_members/{memberId}: Publicly readable group member data.
 *
 * Key Security Decisions:
 * - Public Read Access: The collections 'news_articles', 'matches', 'players', 'highlight_reels', 'team_categories', 'teams', 'members', and 'group_members' are publicly readable.
 * - User Ownership: The /users/{userId} collection and the /users/{userId}/forum_posts/{postId} subcollection are secured with path-based ownership, allowing only the authenticated user to access their own data.
 * - Denormalization: The `matchId` field is denormalized in the /highlight_reels collection to avoid costly `get()` calls.
 * - No User Listing: Listing all users is not supported to protect user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Write operations are denied.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write operations are denied.
     * @path /matches/{matchId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Write operations are denied.
     * @path /players/{playerId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write operations are denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-based ownership for forum posts. Only the authenticated user can read, create, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) Allow the user to create a forum post if the userId matches their auth.uid.
     * @allow (get, list) Allow the user to read their own forum posts.
     * @allow (update, delete) Allow the user to update or delete their own existing forum posts.
     * @deny (create) Deny creation if the userId in the path does not match the authenticated user's ID.
     * @deny (update, delete) Deny updates or deletes if the user is not the owner of the post or if the post doesn't exist.
     * @principle Enforces path-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Enforces user-based ownership for user profiles. Only the authenticated user can read, create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) Allow the user to create their profile if the userId matches their auth.uid.
     * @allow (get) Allow the user to read their own profile.
     * @allow (update, delete) Allow the user to update or delete their own existing profile.
     * @deny (create) Deny creation if the userId in the path does not match the authenticated user's ID.
     * @deny (update, delete) Deny updates or deletes if the user is not the owner of the profile or if the profile doesn't exist.
     *
     * @principle Enforces path-based ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows anyone to read team categories. Write operations are denied.
     * @path /team_categories/{categoryId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data. Write operations are denied.
     * @path /teams/{teamId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read member data. Write operations are denied.
     * @path /members/{memberId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data. Write operations are denied.
     * @path /group_members/{memberId}
     * @allow (get, list) Allow anyone to read
     * @deny (create, update, delete) Always deny writes.
     * @principle Allows public read access to group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}