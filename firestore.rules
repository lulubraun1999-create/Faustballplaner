/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content (e.g., forum posts, user data).
 * Global data (e.g., news articles, matches, players) is publicly readable.
 *
 * Data Structure:
 * - News articles, matches, players, highlight reels, team categories, teams, members, group members, polls, and events are stored in top-level collections.
 * - Forum posts are stored in user-specific subcollections under `/users/{userId}/forum_posts/{postId}`.
 * - User documents are stored in the `/users/{userId}` collection.
 * - Poll responses are stored as subcollections of polls at `/polls/{pollId}/responses/{responseId}`.
 * - Chat messages are stored in `/chat_rooms/{roomId}/messages/{messageId}`
 * - User chat statuses are stored in `/users/{userId}/chat_status/{roomId}`
 *
 * Key Security Decisions:
 * - Global data collections are publicly readable. Write access is implicitly restricted and would require application-level checks.
 * - User listing is disabled.
 * - Path-based ownership is enforced for user-generated content.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` documents to avoid costly `get()` calls for authorization.
 * - User documents are stored in `/users/{userId}` to avoid get() calls for user info.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is implicitly denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is implicitly denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is implicitly denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is implicitly denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get, list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get, list: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user documents.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny list: if true;
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to team categories. Write access is implicitly denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams. Write access is implicitly denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows public read access to members. Write access is implicitly denied.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group members. Write access is implicitly denied.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to polls. Write access is implicitly denied.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow get, list: if isSignedIn();
     * @allow update: if isExistingOwner(request.resource.data.userId);
     * @allow delete: if isExistingOwner(request.resource.data.userId);
     * @principle Enforces document ownership for writes.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow get, list: if isSignedIn();
        allow update: if isExistingOwner(request.resource.data.userId);
        allow delete: if isExistingOwner(request.resource.data.userId);
    }

      /**
       * @description Allows public read access to events. Write access is implicitly denied.
       * @path /events/{eventId}
       * @allow get, list: if true;
       * @deny create, update, delete: if false;
       * @principle Allows public read access.
       */
      match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }

      /**
       * @description Allows read access to chat messages, restricts write access.
       * @path /chat_rooms/{roomId}/messages/{messageId}
       * @allow get, list: if true;
       * @deny create, update, delete: if false;
       * @principle Allows anyone to read messages but restricts modification.
       */
      match /chat_rooms/{roomId}/messages/{messageId} {
          allow get, list: if true;
          allow create, update, delete: if false;
      }

      /**
       * @description Enforces user-ownership for chat statuses.
       * @path /users/{userId}/chat_status/{roomId}
       * @allow create: if isSignedIn() && request.auth.uid == userId;
       * @allow get: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
       */
      match /users/{userId}/chat_status/{roomId} {
          allow create: if isSignedIn() && request.auth.uid == userId;
          allow get: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}