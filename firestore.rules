/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset implements a combination of ownership-based and role-based access control.
 * User-generated content is secured using path-based ownership.
 * Other data, such as news articles, matches, and players, are publicly readable,
 * but write access is restricted based on team membership.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels.
 * - /users/{userId}: Private user profiles, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 * - /team_categories/{categoryId}: Publicly readable team categories.
 * - /teams/{teamId}: Publicly readable team data.
 * - /members/{memberId}: Publicly readable team member data
 * - /group_members/{memberId}: Publicly readable group member data
 * - /polls/{pollId}: Polls created by users
 * - /polls/{pollId}/responses/{responseId}: Poll responses by users
 * - /events/{eventId}: Events. Trainer or Admin can create them.
 * - /chat_rooms/{roomId}/messages/{messageId}: Messages in chat rooms
 * - /users/{userId}/chat_status/{roomId}: Tracks the last time a user viewed a chat room
 *
 * Key Security Decisions:
 * - Users can only manage their own user data and forum posts.
 * - Listing of users is disallowed to prevent data leakage.
 * - Public data (news, matches, players, highlight reels) is readable by everyone.
 * - Events can only be created by users with Trainer or Admin roles.
 *
 * Denormalization for Authorization:
 * No denormalization is explicitly required as path-based ownership is used for user data,
 * and global data is assumed to be managed through application-level access control.
 * To support Trainer/Admin roles in the future, consider adding a `members` map to the `/teams/{teamId}`
 * documents or a top-level `/roles/{userId}` collection.
 *
 * Structural Segregation:
 * User-specific data (forum posts) is stored in subcollections under `/users/{userId}`.
 * Public data (news, matches, players) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param userId The user's ID.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param userId The user's ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param userId The user's ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

      /**
       * @description Checks if the user has the 'Trainer' or 'Admin' role in any of the target teams.
       * @returns {bool} True if the user has the role; otherwise, false.
       */
      function hasTrainerOrAdminRole() {
          return get(/databases/$(database)/documents/group_members/$(request.auth.uid)).data.adminRechte == true;
      }

    /**
     * @description Rules for news articles.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for players.
     * @path /players/{playerId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId) (Only the owner can read).
     * @allow create: if isOwner(userId) (Only the owner can create).
     * @allow update: if isExistingOwner(userId) (Only the owner can update).
     * @allow delete: if isExistingOwner(userId) (Only the owner can delete).
     * @principle Owner-only access.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow get: if isOwner(userId) (Only the owner can read).
     * @allow list: if false (Listing users is not allowed).
     * @allow create: if isOwner(userId) (Self-creation allowed).
     * @allow update: if isExistingOwner(userId) (Only the owner can update).
     * @allow delete: if isExistingOwner(userId) (Only the owner can delete).
     * @principle Owner-only access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for team categories.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Rules for members.
     * @path /members/{memberId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for group members.
     * @path /group_members/{memberId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if false (Only admins can create).
     * @allow update: if false (Only admins can update).
     * @allow delete: if false (Only admins can delete).
     * @principle Public read, admin-only write.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Rules for polls.
     * @path /polls/{pollId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if isSignedIn() (Only signed in users can create).
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, signed-in-user-only write.
     */
    match /polls/{pollId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if isSignedIn() (Only signed in users can create).
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, signed-in-user-only write.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

     /**
     * @description Rules for events.
     * @path /events/{eventId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if hasTrainerOrAdminRole();
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, Trainer/Admin-only write.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if hasTrainerOrAdminRole();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for chat messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true (Publicly readable).
     * @allow create: if isSignedIn() (Only signed in users can create).
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, signed-in-user-only write.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for user chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId) (Only the owner can read).
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) (Self-creation allowed).
     * @allow update: if isExistingOwner(userId) (Only the owner can update).
     * @allow delete: if isExistingOwner(userId) (Only the owner can delete).
     * @principle Owner-only access.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}