/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-only access model for user-specific data and public read access for global data.
 * It enforces that only the authenticated user can create, read, update, and delete data under their own user ID.
 * Global collections (e.g., news articles, matches, players) are publicly readable but only modifiable through backend processes or with future role-based access.
 *
 * Data Structure:
 * The Firestore database is organized with a mix of top-level collections for global data and user-scoped subcollections.
 *  - `/news_articles/{newsArticleId}`: Publicly readable news articles.
 *  - `/matches/{matchId}`: Publicly readable match data.
 *  - `/players/{playerId}`: Publicly readable player information.
 *  - `/highlight_reels/{highlightReelId}`: Publicly readable match highlight reels.
 *  - `/users/{userId}`: User profile data, accessible only to the user.
 *  - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user.
 *  - `/team_categories/{categoryId}`: Publicly readable team categories.
 *  - `/teams/{teamId}`: Publicly readable team data.
 *  - `/members/{memberId}`: Publicly readable data of members.
 *  - `/group_members/{memberId}`: Publicly readable data of group members.
 *  - `/polls/{pollId}`: Publicly readable polls.
 *  - `/polls/{pollId}/responses/{responseId}`: Poll responses, accessible only by the user who created them.
 *  - `/events/{eventId}`: Publicly readable events.
 *  - `/events/{eventId}/responses/{responseId}`: Event responses, accessible only by the user who created them.
 *  - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within a specific chat room.
 *  - `/users/{userId}/chat_status/{roomId}`: User's chat status for a specific chat room, only accessible by the user.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Public read access is granted to top-level collections containing global data.
 * - Strict owner-only access is enforced for user-scoped data.
 * - Data validation is limited to fields that are critical for authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * The `matchId` field is denormalized in the `HighlightReel` entity to allow for efficient querying and authorization without requiring expensive `get()` calls to the `matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updating, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to news articles. Write operations are disallowed in this prototype.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updating, and deletion.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to match data. Write operations are disallowed in this prototype.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updating, and deletion.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to player data. Write operations are disallowed in this prototype.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updating, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to highlight reels. Write operations are disallowed in this prototype.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to forum posts to the owner (creator) of the post.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user documents to the owner (the user themselves).
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updating, and deletion.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to team categories. Write operations are disallowed in this prototype.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updating, and deletion.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to team data. Write operations are disallowed in this prototype.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows anyone to read team data, but restricts creation, updating, and deletion.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to member data. Write operations are disallowed in this prototype.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read group member data, but restricts creation, updating, and deletion.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to group member data. Write operations are disallowed in this prototype.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read poll data, but restricts creation, updating, and deletion.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to poll data. Write operations are disallowed in this prototype.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to poll responses to the owner (creator) of the response.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @principle Enforces document ownership for poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if isSignedIn() && request.auth.uid == userIdFromPollId(pollId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Allows anyone to read event data, but restricts creation, updating, and deletion.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to event data. Write operations are disallowed in this prototype.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to event responses to the owner (creator) of the response.
     * @path /events/{eventId}/responses/{responseId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @principle Enforces document ownership for event responses.
     */
    match /events/{eventId}/responses/{responseId} {
      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if isSignedIn() && request.auth.uid == userIdFromEventId(eventId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Allows anyone to read chat messages, but restricts creation, updating, and deletion.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to chat messages. Write operations are disallowed in this prototype.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.roomId == roomId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to user chat status to the owner (the user themselves).
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces document ownership for user chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function userIdFromPollId(pollId) {
        return get(/databases/$(database)/documents/polls/$(pollId)).data.createdBy;
    }

    function userIdFromEventId(eventId) {
        return get(/databases/$(database)/documents/events/$(eventId)).data.createdBy;
    }
  }
}