rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the request is made by the owner.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the request is made by the existing owner.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to news articles. Write access is denied.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is denied.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is denied.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can create a post under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts/post1.
     * @allow (get, list) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can read and list posts under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts.
     * @allow (update, delete) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can update and delete their post.
     * @deny (create) User abc cannot create a post under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts/post1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to create their own user document. Allows a user to read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can create their user document at /users/ktsIeHZuenhgIdwo0jWzumfHHNm1.
     * @allow (get) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can get their user document.
     * @allow (update) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can update their user document.
     * @allow (delete) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can delete their user document.
     * @deny (create) User abc cannot create a user document at /users/ktsIeHZuenhgIdwo0jWzumfHHNm1.
     *
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to team categories. Write access is denied.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data. Write access is denied.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to members data. Write access is denied.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group members data. Write access is denied.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to polls. Write access is denied.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to poll responses. Write access is denied.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to events. Write access is denied.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event responses. Write access is denied.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /events/{eventId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to chat messages. Write access is denied.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
       allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can create chat status.
     * @allow (get) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can get their chat status.
     * @allow (update) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can update their chat status.
     * @allow (delete) User ktsIeHZuenhgIdwo0jWzumfHHNm1 can delete their chat status.
     * @deny (create) User abc cannot create a chat status for user ktsIeHZuenhgIdwo0jWzumfHHNm1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to locations. Write access is denied.
     * @path /locations/{locationId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, restricts write access.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}