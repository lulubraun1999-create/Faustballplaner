/**
 * @file Firestore Security Rules for Werkself Hub Application
 * @core_philosophy This ruleset prioritizes secure access based on user identity and data ownership.
 * All write operations are strictly controlled via authentication and ownership checks. Data validation is relaxed for prototyping.
 * @data_structure The database uses a hierarchical structure. User-specific data is nested under `/users/{userId}`.
 * Global data (news, matches, players, highlight reels) is stored in top-level collections.
 * @key_security_decisions
 * - User data is secured via path-based ownership.
 * - Global data is publicly readable, with write access implicitly managed by the application.
 * - List operations are generally allowed for user-owned data.
 * - The ruleset avoids `get()` calls for authorization by denormalizing data where necessary.
 * @denormalization Authorization relies on the `userId` found in `request.auth` to grant or deny permissions.
 * This set of rules expects a `userId` field on relevant documents to match the authenticated user's `uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to news articles for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - Any user can read news articles.
     * @deny (create, update, delete) - No users can create, update, or delete news articles via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to match data for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - No users can create, update, or delete match data via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to player data for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /players/{playerId}
     * @allow (get, list) - Any user can read player data.
     * @deny (create, update, delete) - No users can create, update, or delete player data via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to highlight reels for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) - Any user can read highlight reels.
     * @deny (create, update, delete) - No users can create, update, or delete highlight reels via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces ownership for forum posts. Only the owner (the user whose ID matches {userId}) can create, read, update, or delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) - User "ktsIeHZuenhgIdwo0jWzumfHHNm1" can create a post under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts/post1.
     * @allow (get, list, update, delete) - User "ktsIeHZuenhgIdwo0jWzumfHHNm1" can get, list, update, and delete their own post under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts/post1.
     * @deny (create, get, list, update, delete) - User "attackerId" cannot create, read, update, or delete posts under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts/post1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user documents. Only the owner (the user whose ID matches {userId}) can create, read, update, or delete their own user document.  Allows self-creation.
     * @path /users/{userId}
     * @allow (create) - User "ktsIeHZuenhgIdwo0jWzumfHHNm1" can create their own document under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1.
     * @allow (get, list, update, delete) - User "ktsIeHZuenhgIdwo0jWzumfHHNm1" can get, list, update, and delete their own document under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1.
     * @deny (create, get, list, update, delete) - User "attackerId" cannot create, read, update, or delete the document under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1.
     * @principle Enforces document ownership for writes.  Allows self-creation of user documents.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows read-only access to team categories for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /team_categories/{categoryId}
     * @allow (get, list) - Any user can read team categories.
     * @deny (create, update, delete) - No users can create, update, or delete team categories via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to team data for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @deny (create, update, delete) - No users can create, update, or delete team data via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
   /**
     * @description Allows read-only access to member data for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /members/{memberId}
     * @allow (get, list) - Any user can read member data.
     * @deny (create, update, delete) - No users can create, update, or delete member data via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
   /**
     * @description Allows read-only access to group member data for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /group_members/{memberId}
     * @allow (get, list) - Any user can read group member data.
     * @deny (create, update, delete) - No users can create, update, or delete group member data via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
   /**
     * @description Allows read-only access to poll data for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /polls/{pollId}
     * @allow (get, list) - Any user can read poll data.
     * @deny (create, update, delete) - No users can create, update, or delete poll data via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
   /**
     * @description Allows an authenticated user to create, read, update and delete their own poll response. Poll responses are secured by userId.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: User can create a poll response if authenticated
     * @allow get, list, update, delete: User can read, list, update and delete their own poll response if authenticated.
     *  @principle Enforces document ownership for writes.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow read, list: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
        allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }
   /**
     * @description Allows read-only access to event data for all users. Write access is not explicitly granted, implying administrative control at the application layer.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read event data.
     * @deny (create, update, delete) - No users can create, update, or delete event data via the client.
     * @principle Public read access with implicit administrative write control.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows an authenticated user to create, read, update and delete their own event response. Event responses are secured by userId.
     * @path /events/{eventId}/responses/{responseId}
     * @allow create: User can create an event response if authenticated
     * @allow get, list, update, delete: User can read, list, update and delete their own event response if authenticated.
     * @principle Enforces document ownership for writes.
     */
    match /events/{eventId}/responses/{responseId} {
        allow read, list: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
        allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }
    /**
     * @description Allows any authenticated user to read and create chat messages in a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow create: Any authenticated user can create a chat message.
     * @allow get, list: Any authenticated user can read chat messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
    /**
     * @description Enforces ownership for user chat status documents. Only the owner (the user whose ID matches {userId}) can create, read, update, or delete their own user chat status document.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return true if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource based on user ID.
     * @param userId The user ID to compare against the authenticated user's ID.
     * @return true if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource based on user ID, and that the resource exists.
     * @param userId The user ID to compare against the authenticated user's ID.
     * @return true if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}