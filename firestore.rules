/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and provides public read access to global data collections.  It avoids `get()`
 * calls for authorization by denormalizing ownership data and leveraging path-based
 * authorization. All writes must be performed by an authenticated user.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels with denormalized matchId.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user, accessible only to that user.
 * - /team_categories/{categoryId}: Publicly readable team categories.
 * - /teams/{teamId}: Publicly readable team data.
 * - /members/{memberId}: Publicly readable member (user) data, denormalized for quick lookups.
 * - /group_members/{memberId}: Publicly readable, lightweight user objects.
 * - /polls/{pollId}: Publicly readable polls.
 * - /polls/{pollId}/responses/{responseId}: Poll responses, accessible only with poll access.
 * - /events/{eventId}: Publicly readable events and appointments.
 * - /events/{eventId}/responses/{responseId}: Event responses, accessible only with event access.
 * - /chat_rooms/{roomId}/messages/{messageId}: Chat room messages, access not yet specified, defaulting to public read.
 * - /users/{userId}/chat_status/{roomId}: Chat statuses for users, only accessible to the owning user.
 * - /locations/{locationId}: Publicly readable locations data.
 *
 * Key Security Decisions:
 * - Public read access for global data collections (news_articles, matches, players, highlight_reels, team_categories, teams, members, group_members, polls, events, locations).
 * - Strict owner-only access for user-specific data trees (/users/{userId} and subcollections).
 * - Data validation is relaxed during prototyping to allow for flexible schema changes.
 * - No support for listing all users (no `allow list` on /users).
 *
 * Denormalization for Authorization:
 * - HighlightReel documents include the `matchId` to avoid needing to `get()` the associated Match document for authorization.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under /users/{userId}/forum_posts/{postId} to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to news articles. Allows public read access and restricts writes.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to match data. Allows public read access and restricts writes.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to player data. Allows public read access and restricts writes.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to highlight reels. Allows public read access and restricts writes.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to forum posts. Only the owner can read and write.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create, get, list, update, delete)
     * @deny (none)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user documents. Only the owner can read and write.
     * @path /users/{userId}
     * @allow (create, get, update, delete)
     * @deny (none)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is disallowed.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to team categories. Allows public read access and restricts writes.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to team data. Allows public read access and restricts writes.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Controls access to denormalized member data.  Allows public read access and restricts writes.
      * @path /members/{memberId}
      * @allow (get, list)
      * @deny (create, update, delete)
      * @principle Public read access for denormalized data.
      */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
      * @description Controls access to lightweight, denormalized user data. Allows public read access and restricts writes.
      * @path /group_members/{memberId}
      * @allow (get, list)
      * @deny (create, update, delete)
      * @principle Public read access for lightweight user data.
      */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to polls. Allows public read access and restricts writes.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create, get, list, update, delete)
     * @deny (none)
     */
    match /polls/{pollId}/responses/{responseId} {
         allow create: if isSignedIn();
         allow get: if isSignedIn();
         allow list: if isSignedIn();
         allow update: if false; // Disallowing updates to existing poll responses.
         allow delete: if false; // Disallowing deleting poll responses.
    }

    /**
     * @description Controls access to events. Allows public read access and restricts writes.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for events.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

     /**
      * @description Controls access to event responses.
      * @path /events/{eventId}/responses/{responseId}
      */
    match /events/{eventId}/responses/{responseId} {
         allow create: if isSignedIn();
         allow get: if isSignedIn();
         allow list: if isSignedIn();
         allow update: if false; // Disallowing updates to existing event responses.
         allow delete: if false; // Disallowing deleting event responses.
    }

    /**
     * @description Controls access to chat messages within a room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow create: if isSignedIn();
        allow get, list: if true; // Allowing public read access for now.
        allow update: if false; // Disallowing updates to existing chat messages.
        allow delete: if false; // Disallowing deleting chat messages.
    }

    /**
     * @description Controls access to user chat status. Only the owner can read and write.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
         allow create: if isOwner(userId);
         allow get: if isOwner(userId);
         allow list: if isOwner(userId);
         allow update: if isExistingOwner(userId);
         allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to locations. Allows public read access and restricts writes.
     * @path /locations/{locationId}
     */
    match /locations/{locationId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}