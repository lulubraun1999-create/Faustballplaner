/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence, avoiding `get()` calls to enforce access controls.
 * It uses path-based ownership for user-generated content and assumes global data is read-only for most users.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles. Write access is not defined in this prototype.
 * - `/matches/{matchId}`: Publicly readable match data. Write access is not defined in this prototype.
 * - `/players/{playerId}`: Publicly readable player data. Write access is not defined in this prototype.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels. Write access is not defined in this prototype.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user.
 * - `/users/{userId}`: User-specific data.
 * - `/admins/{userId}`: Documents indicating admin status. The existence of a document grants admin privileges.
 * - `/team_categories/{categoryId}`: Publicly readable team categories. Write access is not defined in this prototype.
 * - `/teams/{teamId}`: Publicly readable team data. Write access is not defined in this prototype.
 * - `/members/{memberId}`: Publicly readable, denormalized user data. Write access is not defined in this prototype.
 * - `/group_members/{memberId}`: Publicly readable, lightweight user data. Write access is not defined in this prototype.
 * - `/polls/{pollId}`: Publicly readable polls. Write access is not defined in this prototype.
 * - `/polls/{pollId}/responses/{responseId}`: Responses to a specific poll.
 * - `/events/{eventId}`: Publicly readable events and appointments. Write access is not defined in this prototype.
 * - `/events/{eventId}/responses/{responseId}`: RSVP responses to a specific event.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within a specific chat room.
 * - `/users/{userId}/chat_status/{roomId}`: Tracks the last time a user viewed a chat room.
 * - `/locations/{locationId}`: Publicly readable event locations. Write access is not defined in this prototype.
 * - `/event_titles/{eventTitleId}`: Publicly readable event titles. Write access is not defined in this prototype.
 *
 * Key Security Decisions:
 * - Public read access for news articles, matches, players, highlight reels, team categories, teams, members, group members, polls, events, locations, and event titles.
 * - User-owned forum posts under `/users/{userId}/forum_posts/{postId}`.
 * - User documents under `/users/{userId}` accessible only to the user.
 * - Admin privileges granted by the presence of a document in `/admins/{userId}`.
 * - No user listing is allowed (except implicitly for admins).
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into `HighlightReel` documents to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is not defined in this prototype.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to news articles, but restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is not defined in this prototype.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to match data, but restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is not defined in this prototype.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to player data, but restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is not defined in this prototype.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to highlight reels, but restricts write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages forum posts for a specific user. Allows the user to create, read, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces path-based ownership for forum posts, ensuring only the owner can modify their posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific data. Allows a user to read, create, update, and delete their own document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces strict user-ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /admins/{userId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Grants full access to admin documents only to admins.
     */
    match /admins/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to team categories. Write access is not defined in this prototype.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to team categories, but restricts write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to team data. Write access is not defined in this prototype.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to team data, but restricts write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to member data. Write access is not defined in this prototype.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to member data, but restricts write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to group member data. Write access is not defined in this prototype.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to group member data, but restricts write access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to polls. Write access is not defined in this prototype.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to polls, but restricts write access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages responses to a specific poll.  Allows authenticated users to create responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.pollId == pollId;
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /polls/{pollId}/responses/{responseId} {
       allow get, list: if true;
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.pollId == pollId;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Allows public read access to events. Write access is not defined in this prototype.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to events, but restricts write access.
     */
    match /events/{eventId} {
       allow get, list: if true;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

     /**
     * @description Manages responses to a specific event.  Allows authenticated users to create responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.eventId == eventId;
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /events/{eventId}/responses/{responseId} {
       allow get, list: if true;
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.eventId == eventId;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Manages chat messages within a specific chat room.  Allows authenticated users to create messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.roomId == roomId && request.resource.data.userId == request.auth.uid;
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.roomId == roomId && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Tracks the last time a user viewed a chat room.
     * @path /users/{userId}/chat_status/{roomId}
     *  @allow get: if isOwner(userId);
     *  @allow list: if isOwner(userId);
     *  @allow create: if isOwner(userId) && request.auth.uid == userId;
     *  @allow update: if isExistingOwner(userId);
     *  @allow delete: if isExistingOwner(userId);
     * @principle Enforces path-based ownership for user chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to locations. Write access is not defined in this prototype.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to locations, but restricts write access.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to event titles. Write access is not defined in this prototype.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event titles, but restricts write access.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of the existing document based on the userId, and that the document exists.
      * @param {string} userId - The user ID to compare against the authenticated user's ID.
      * @return {boolean} True if the user is the owner and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an administrator.  This is determined by the existence of a document in the 'admins' collection with the user's UID as the document ID.
     * @return {boolean} True if the user is an administrator, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}