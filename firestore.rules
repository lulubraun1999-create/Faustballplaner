/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User-generated content (forum posts, poll responses) is secured using strict path-based ownership.
 * Global data (news articles, matches, player data) is publicly readable, with the expectation that administrative writes will be handled via a backend trusted environment.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles.
 * - `/matches/{matchId}`: Publicly readable match data.
 * - `/players/{playerId}`: Publicly readable player information.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels with denormalized `matchId`.
 * - `/users/{userId}`: User profile information, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 * - `/team_categories/{categoryId}`: Publicly readable team categories.
 * - `/teams/{teamId}`: Publicly readable teams.
 * - `/members/{memberId}`: Publicly readable member data.
 * - `/group_members/{memberId}`: Publicly readable group member data.
 * - `/polls/{pollId}`: Polls created by users.
 * - `/polls/{pollId}/responses/{responseId}`: Responses to a specific poll.
 *
 * Key Security Decisions:
 * - Public Read Access: News articles, matches, player data, highlight reels, team categories, teams, members and group_members are publicly readable to enable wide consumption of content.
 * - User-Owned Data: User profiles and forum posts are strictly limited to the owning user.
 * - Administrative Writes: Write access to global data is assumed to be handled by a trusted backend environment and is not explicitly secured in these rules.
 * - Poll Creation and Responses: Polls can be created by any authenticated user, with responses linked to the user.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` document. This avoids needing to perform a `get()` operation on the `/matches/{matchId}` document to authorize access to the highlight reel.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public read access to news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No user can create, update, or delete news articles via client SDK.
     * @principle Public read access for global data.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to match data.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No user can create, update, or delete match data via client SDK.
     * @principle Public read access for global data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to player information.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player information.
     * @deny (create, update, delete): No user can create, update, or delete player information via client SDK.
     * @principle Public read access for global data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No user can create, update, or delete highlight reels via client SDK.
     * @principle Public read access for global data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to forum posts to the owning user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list): The user can read their own forum posts.
     * @allow (create): The user can create forum posts under their own user ID.
     * @allow (update, delete): The user can update or delete their own existing forum posts.
     * @deny (get, list): Other users cannot read this user's forum posts.
     * @deny (create, update, delete): Other users cannot create, update, or delete forum posts under this user ID.
     * @principle Enforces path-based ownership for user-generated content.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user documents to the owning user.
     * @path /users/{userId}
     * @allow (get): The user can read their own user document.
     * @allow (create): The user can create their own user document if the user ID matches.
     * @allow (update, delete): The user can update or delete their own user document.
     * @deny (get): Other users cannot read this user's document.
     * @deny (create, update, delete): Other users cannot create, update, or delete this user's document.
     * @principle Enforces path-based ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team categories.
     * @deny (create, update, delete): No user can create, update, or delete team categories via client SDK.
     * @principle Public read access for global data.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to teams.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read teams.
     * @deny (create, update, delete): No user can create, update, or delete teams via client SDK.
     * @principle Public read access for global data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to member data.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @deny (create, update, delete): No user can create, update, or delete member data via client SDK.
     * @principle Public read access for global data.
     */
    match /members/{memberId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to group member data.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @deny (create, update, delete): No user can create, update, or delete group member data via client SDK.
     * @principle Public read access for global data.
     */
    match /group_members/{memberId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

   /**
    * @description Allows any authenticated user to create polls.
    * @path /polls/{pollId}
    * @allow (create): Any signed-in user can create a poll.
    * @deny (create): A user that is not signed in.
    * @allow (get, list): Any user can view polls.
    * @deny (update, delete): No user can update or delete polls.
    * @principle Allows any authenticated user to create polls.
    */
    match /polls/{pollId} {
        allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
        allow get, list: if true;
        allow update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): Any signed-in user can create a poll response if the user ID matches.
     * @deny (create): A user that is not signed in or the user ID does not match.
     * @allow (get, list): Any user can view the poll responses.
     * @deny (update, delete): No user can update or delete poll responses.
     * @principle Allows any authenticated user to create poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get, list: if true;
      allow update, delete: if false;
    }
  }
}