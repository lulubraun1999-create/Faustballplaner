/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-only access model for user-specific data and allows public read access to general content.
 * Administrative privileges are assumed to be managed at the application layer, with these rules focusing on basic data protection.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels, denormalized with `matchId`.
 * - `/users/{userId}`: Private user data, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Public read access is granted to news articles, matches, players, and highlight reels.
 * - User listing is implicitly disallowed by the absence of a top-level `/users` collection `list` rule.
 * - All write operations are restricted to authenticated users.
 * - Strict owner-only access is enforced for all data under `/users/{userId}`.
 * - Authorization decisions are based solely on `request.auth.uid` and data within the documents being accessed, avoiding costly `get()` calls.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` document to avoid needing to `get()` the parent `Match` document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts write access.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public reads, restricts writes.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to match data, but restricts write access.
     * @path /matches/{matchId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public reads, restricts writes.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to player data, but restricts write access.
     * @path /players/{playerId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public reads, restricts writes.
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels, but restricts write access.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Allows public reads, restricts writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces owner-only access to forum posts within a user's subcollection.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create, get, list, update, delete): if isOwner(userId);
     * @deny (create): if request.auth.uid != request.resource.data.userId;
     * @deny (update, delete): if resource == null;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to user documents.
     * @path /users/{userId}
     * @allow (create, get, update, delete): if isOwner(userId);
     * @deny (create): if request.auth.uid != userId;
     * @deny (update, delete): if resource == null;
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}