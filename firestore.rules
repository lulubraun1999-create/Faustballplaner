/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user-generated content (forum posts)
 * and assumes public read access for global data collections (news, matches, players, highlights).
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public collection of news articles.
 * - /matches/{matchId}: Public collection of match data.
 * - /players/{playerId}: Public collection of player information.
 * - /highlight_reels/{highlightReelId}: Public collection of match highlights.
 * - /users/{userId}: Private user profile documents.
 * - /users/{userId}/forum_posts/{postId}: User-owned forum posts.
 *
 * Key Security Decisions:
 * - Public read access to news articles, matches, players and highlight reels.
 * - User-owned forum posts, accessible only by the creating user.
 * - User profiles accessible only by the corresponding user.
 * - No user listing is allowed for any collection.
 * - Schema validation is relaxed to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `userId` is part of the path for forum posts (`/users/{userId}/forum_posts/{postId}`),
 *   eliminating the need to store it in the document itself for authorization purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Only the application can manage data.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No user can create, update, or delete news articles through the rules.
     * @principle Allows public reads, restricts all writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Only the application can manage data.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No user can create, update, or delete match data through the rules.
     * @principle Allows public reads, restricts all writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Only the application can manage data.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @deny (create, update, delete): No user can create, update, or delete player data through the rules.
     * @principle Allows public reads, restricts all writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Only the application can manage data.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No user can create, update, or delete highlight reels through the rules.
     * @principle Allows public reads, restricts all writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Only the user with matching {userId} can perform these operations.
     * @deny (get, create, update, delete): Any other user is denied access.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list, create, update, delete): Only the user with matching {userId} can perform these operations on their own posts.
     * @deny (get, list, create, update, delete): Any other user is denied access to these posts.
     * @principle Enforces document ownership within a user-specific subcollection.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the authenticated user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}