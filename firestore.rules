/**
 * @file Firestore Security Rules for Werkself Hub
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a security model based on path-based ownership and dedicated collections, with a focus on authorization independence and efficient data retrieval.
 *
 * Data Structure:
 * - Core data (news, matches, players, highlights) is stored in top-level collections.
 * - User-specific data (forum posts, user profiles, chat status) is stored under `/users/{userId}`.
 * - Polls and Events are stored in top-level collections.
 * - Chat messages are stored in a subcollection `/chat_rooms/{roomId}/messages/{messageId}`.
 *
 * Key Security Decisions:
 * - User data is strictly controlled through path-based ownership.
 * - Top-level collections (news, matches, players, highlights) are publicly readable but write-protected.
 * - All writes must be authenticated.
 * - Data validation is minimal to allow for rapid prototyping.
 * - No support for listing all users or forum posts across all users.
 *
 * Denormalization for Authorization:
 * - `highlight_reels` store the `matchId` to avoid needing to read the `matches` document for authorization.
 * - `ForumPost` documents are stored in a user subcollection to avoid `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updating, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updating, and deletion.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updating, and deletion.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updating, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User can create a post with their userId.
     * @allow (get, list, update, delete) User can only access their own posts.
     * @deny (create) User cannot create a post for another user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own user document.
     * @path /users/{userId}
     * @allow (create) A user can create their own document with matching userId.
     * @allow (get, list, update, delete) A user can only access their own user document.
     * @deny (create) A user cannot create a document for another user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updating, and deletion.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read teams, but restricts creation, updating, and deletion.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read members, but restricts creation, updating, and deletion.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read group members, but restricts creation, updating, and deletion.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read polls, but restricts creation, updating, and deletion.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, owner-only writes (if ownership field existed)
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Subcollection for responses to a specific poll.
     * @path /polls/{pollId}/responses/{responseId}
     */
    match /polls/{pollId}/responses/{responseId} {
          allow read, list: if false;
          allow create: if isSignedIn();
          allow update: if false;
          allow delete: if false;
    }

     /**
      * @description Allows anyone to read events, but restricts creation, updating, and deletion.
      * @path /events/{eventId}
      * @allow (get, list)
      * @deny (create, update, delete)
      * @principle Public read, owner-only writes (if ownership field existed)
      */
      match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      }

    /**
     * @description Allows reading and writing chat messages within a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
          allow read, list: if true;
          allow create: if isSignedIn();
          allow update: if false;
          allow delete: if false;
    }

     /**
      * @description Tracks the last time a user viewed a chat room to calculate unread messages.
      * @path /users/{userId}/chat_status/{roomId}
      */
      match /users/{userId}/chat_status/{roomId} {
            allow read, list: if isOwner(userId);
            allow create: if isOwner(userId);
            allow update: if isOwner(userId) && resource != null;
            allow delete: if isOwner(userId) && resource != null;
      }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}