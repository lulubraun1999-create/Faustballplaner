/**
 * @file Firebase Security Rules for Werkself Hub Application
 *
 * @description This ruleset enforces a strict user-ownership model for personal data and allows public read access to general content like news, matches, and player information. Write access to public data is restricted to ensure data integrity.
 *
 * @data_structure
 * - `/news_articles/{newsArticleId}`: Publicly readable collection of news articles. Write access is likely restricted to backend or admin.
 * - `/matches/{matchId}`: Publicly readable collection of match data. Write access is likely restricted to backend or admin.
 * - `/players/{playerId}`: Publicly readable collection of player information. Write access is likely restricted to backend or admin.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable collection of highlight reels. Write access is likely restricted to backend or admin.
 * - `/users/{userId}`: User-specific data. Only the authenticated user can read or write their own data.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user. Only the user can manage their own posts.
 * - `/team_categories/{categoryId}`: Publicly readable collection of team categories. Write access is likely restricted to backend or admin.
 * - `/teams/{teamId}`: Publicly readable collection of teams. Write access is likely restricted to backend or admin.
 * - `/members/{memberId}`: Publicly readable collection of member data. Write access is likely restricted to backend or admin.
 * - `/group_members/{memberId}`: Publicly readable collection of group member data. Write access is likely restricted to backend or admin.
 * - `/polls/{pollId}`: Publicly readable collection of polls.
 * - `/polls/{pollId}/responses/{responseId}`: Subcollection for poll responses.
 * - `/events/{eventId}`: Publicly readable collection of events.
 * - `/events/{eventId}/overrides/{overrideId}`: Subcollection for event overrides.
 * - `/events/{eventId}/responses/{responseId}`: Subcollection for event responses.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Collection of chat messages.
 * - `/users/{userId}/chat_status/{roomId}`: Subcollection for user-specific chat status.
 * - `/locations/{locationId}`: Collection of event locations.
 * - `/event_titles/{eventTitleId}`: Collection of event titles.
 *
 * @key_security_decisions
 * - Public read access for general content (news, matches, players, highlight reels, team categories, teams, members, group members, polls, events, locations, event titles).
 * - Strict user-ownership for user profiles and forum posts.
 * - No user listing is allowed (to protect user privacy).
 * - In the event that ownership fields are missing in public collections, write access is denied until the schema is updated.
 * - All write operations are explicitly authorized; `allow write: if true;` is never used.
 *
 * @denormalization_for_authorization
 * - Forum posts are stored under `/users/{userId}/forum_posts/{postId}` to avoid needing `get()` calls to verify ownership.
 * - HighlightReels denormalize `matchId` to avoid needing `get()` calls to the `/matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is denied without an author field.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) User can read any news article.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to match data. Write access is denied without an author field.
     * @path /matches/{matchId}
     * @allow (get, list) User can read any match data.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to player information. Write access is denied without an author field.
     * @path /players/{playerId}
     * @allow (get, list) User can read any player information.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied without an author field.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) User can read any highlight reel.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User with ID 'user123' can create a forum post under /users/user123/forum_posts/post456 if request.auth.uid == 'user123'.
     * @allow (get, list, update, delete) User with ID 'user123' can read, update, or delete a forum post under /users/user123/forum_posts/post456 if request.auth.uid == 'user123'.
     * @deny (create, update, delete) User with ID 'user456' cannot create, update, or delete a forum post under /users/user123/forum_posts/post456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own user document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create, update, delete) User with ID 'user456' cannot create, update, or delete the profile at /users/user123.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false; // User listing is not permitted.
    }

    /**
     * @description Allows public read access to team categories. Write access is denied without an author field.
     * @path /team_categories/{categoryId}
     * @allow (get, list) User can read any team category.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to teams. Write access is denied without an author field.
     * @path /teams/{teamId}
     * @allow (get, list) User can read any team.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to member data. Write access is denied without an author field.
     * @path /members/{memberId}
     * @allow (get, list) User can read any member data.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to group member data. Write access is denied without an author field.
     * @path /group_members/{memberId}
     * @allow (get, list) User can read any group member data.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to polls.
     * @path /polls/{pollId}
     * @allow (get, list) User can read any poll.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to create a poll response. Write access is denied without an author field.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create) User can create a poll response.
     * @allow (get, list, update, delete) User can read any poll response.
     * @deny (update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to events. Write access is denied without an author field.
     * @path /events/{eventId}
     * @allow (get, list) User can read any event.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to event overrides. Write access is denied without an author field.
     * @path /events/{eventId}/overrides/{overrideId}
     * @allow (get, list) User can read any event override.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /events/{eventId}/overrides/{overrideId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to event responses. Write access is denied without an author field.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (get, list) User can read any event response.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /events/{eventId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to chat messages. Write access is denied without an author field.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list) User can read any chat message.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to locations. Write access is denied without an author field.
     * @path /locations/{locationId}
     * @allow (get, list) User can read any location.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to event titles. Write access is denied without an author field.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list) User can read any event title.
     * @deny (create, update, delete) Any user, because write access requires authentication and potentially admin roles (not implemented here).
     * @principle Public read, owner-only writes (if ownership field existed).
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}