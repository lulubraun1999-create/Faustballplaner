/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy: This ruleset prioritizes authorization independence and efficient data retrieval.
 * It enforces strict user-ownership for personal data and allows public read access for global data.
 *
 * Data Structure:
 * - User-specific data (e.g., forum posts, user profiles, chat statuses) is nested under `/users/{userId}`.
 * - Global data (e.g., news articles, matches, players, highlight reels, teams, locations, event titles, polls) is stored in top-level collections.
 * - Subcollections (e.g., poll responses, event responses, chat messages) inherit the access control of their parent documents.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed.
 * - Public read access is granted for top-level collections containing global data.
 * - Write access to global data is not explicitly defined in the base ruleset and should be managed via application logic.
 * - The absence of custom claims enforces DBAC.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized in `/highlight_reels/{highlightReelId}` to avoid dependency on match data for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Write access is not controlled here.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write access is not controlled here.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Write access is not controlled here.
     * @path /players/{playerId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write access is not controlled here.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, list): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny (create): if request.auth.uid != userId
     * @deny (update, delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny (create): if request.auth.uid != userId
     * @deny (update, delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows an admin to read admin documents. Write access is not controlled here.
     * @path /admins/{userId}
     * @allow get: if true;
     * @deny create, update, delete, list: if false;
     * @principle Grants public read access to admin.
     */
    match /admins/{userId} {
        allow get: if true;
        allow create, update, delete, list: if false;
    }

    /**
     * @description Allows anyone to read team categories. Write access is not controlled here.
     * @path /team_categories/{categoryId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read teams. Write access is not controlled here.
     * @path /teams/{teamId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read members. Write access is not controlled here.
     * @path /members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to members.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group members. Write access is not controlled here.
     * @path /group_members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to group members.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows anyone to read polls. Write access is not controlled here.
     * @path /polls/{pollId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read responses to a poll.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Grants public read access to poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

      /**
     * @description Allows anyone to read events. Write access is not controlled here.
     * @path /events/{eventId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to events.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read responses to an event.
     * @path /events/{eventId}/responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Grants public read access to event responses.
     */
    match /events/{eventId}/responses/{responseId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read messages in a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Grants public read access to chat messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     *  @allow (get): if isOwner(userId)
     *  @allow (update, delete): if isExistingOwner(userId)
     * @deny create, list: if false
     * @principle Enforces document ownership for chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
        allow create, list: if false;
    }

     /**
     * @description Allows anyone to read locations. Write access is not controlled here.
     * @path /locations/{locationId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to locations.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event titles. Write access is not controlled here.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Grants public read access to event titles.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Recursive wildcard to catch any other document
    match /{path=**} {
        allow read, write: if false;
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the document based on the userId.
   * @param {string} userId The user ID to compare against.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    /**
   * @description Checks if the user is the owner of the document and the document exists.
   * @param {string} userId The user ID to compare against.
   * @return {boolean} True if the user is the owner and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}