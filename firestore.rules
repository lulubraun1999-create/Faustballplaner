/**
 * @file Firestore Security Rules for the Werkself Hub application.
 *
 * @corePhilosophy This ruleset prioritizes authorization independence and efficient data retrieval. It enforces strict ownership for user-generated content via path-based rules and assumes global data is primarily read-only. Administrative access is controlled at the application level and not within these rules.
 * @dataStructure The Firestore database is organized into top-level collections for global data (news, matches, players, etc.) and user-specific subcollections under `/users/{userId}` for private data (forum posts, chat status).
 * @keySecurityDecisions
 *  - User listing is not explicitly denied but also not explicitly allowed.
 *  - Global data collections (e.g., `/news_articles`, `/matches`, `/players`) are publicly readable. Writes are not secured by the ruleset; it's assumed that backend logic or an admin panel handles these operations. If write access needs to be secured, appropriate ownership fields will need to be added and write rules configured.
 *  - Path-based ownership is heavily favored to avoid costly `get()` calls.
 * @denormalizationForAuthorization HighlightReels include the `matchId` to avoid needing to query the `matches` collection for authorization.
 * @structuralSegregation User-specific forum posts are stored under the `/users/{userId}/forum_posts/{postId}` path, ensuring data separation and simplified security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Writes are not secured by these rules.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Writes are not secured by these rules.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Writes are not secured by these rules.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reel data. Writes are not secured by these rules.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to highlight reel data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User 'abc' can create a new post if request.auth.uid == 'abc'.
     * @allow (get, list, update, delete) User 'abc' can get, list, update or delete their own post.
     * @deny (create) User 'def' cannot create a new post under /users/abc/forum_posts/{postId}
     * @deny (get, list, update, delete) User 'def' cannot get, list, update, or delete a post under /users/abc/forum_posts/{postId}
     * @principle Enforces path-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create and manage their own user document.
     * @path /users/{userId}
     * @allow (create) User 'abc' can create their own document if request.auth.uid == 'abc'.
     * @allow (get, update, delete) User 'abc' can get, update or delete their own document.
     * @deny (create) User 'def' cannot create a document under /users/abc.
     * @deny (get, update, delete) User 'def' cannot get, update, or delete the document under /users/abc.
     * @principle Enforces path-based ownership for user documents.
     */
    match /users/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false; // Listing all users is not permitted.
    }

    /**
     * @description Grants read access to admin documents. Writes are not secured by these rules. Admin privileges should be managed via backend logic.
     * @path /admins/{userId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to admin documents.
     */
    match /admins/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team categories. Writes are not secured by these rules.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data. Writes are not secured by these rules.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read member data. Writes are not secured by these rules.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data. Writes are not secured by these rules.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

      /**
       * @description Allows anyone to read poll data. Writes are not secured by these rules.
       * @path /polls/{pollId}
       * @allow (get, list)
       * @deny (create, update, delete)
       * @principle Allows public read access to poll data.
       */
      match /polls/{pollId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll responses. A user can create, update, and delete their own responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create) User 'abc' can create their own response.
     * @allow (get, list, update, delete) User 'abc' can get, list, update or delete their own response.
     * @deny (create) User 'def' cannot create a response under /polls/{pollId}/responses/{responseId}
     * @deny (get, list, update, delete) User 'def' cannot get, list, update, or delete a response under /polls/{pollId}/responses/{responseId}
     * @principle Enforces ownership for poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && isExistingOwnerPollResponse(request.resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwnerPollResponse(request.resource.data.userId);
    }

      /**
       * @description Allows anyone to read event data. Writes are not secured by these rules.
       * @path /events/{eventId}
       * @allow (get, list)
       * @deny (create, update, delete)
       * @principle Allows public read access to event data.
       */
    match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event responses. A user can create, update, and delete their own responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (create) User 'abc' can create their own response.
     * @allow (get, list, update, delete) User 'abc' can get, list, update or delete their own response.
     * @deny (create) User 'def' cannot create a response under /events/{eventId}/responses/{responseId}
     * @deny (get, list, update, delete) User 'def' cannot get, list, update, or delete a response under /events/{eventId}/responses/{responseId}
     * @principle Enforces ownership for event responses.
     */
    match /events/{eventId}/responses/{responseId} {
        allow read, list: if isSignedIn();
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
        allow update: if isSignedIn() && isExistingOwnerEventResponse(request.resource.data.userId);
        allow delete: if isSignedIn() && isExistingOwnerEventResponse(request.resource.data.userId);
    }

      /**
       * @description Allows anyone to read chat messages. Writes are not secured by these rules.
       * @path /chat_rooms/{roomId}/messages/{messageId}
       * @allow (get, list)
       * @deny (create, update, delete)
       * @principle Allows public read access to chat messages.
       */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create) User 'abc' can create their own chat status if request.auth.uid == 'abc'.
     * @allow (get, list, update, delete) User 'abc' can get, list, update or delete their own chat status.
     * @deny (create) User 'def' cannot create a chat status under /users/abc/chat_status/{roomId}
     * @deny (get, list, update, delete) User 'def' cannot get, list, update, or delete a chat status under /users/abc/chat_status/{roomId}
     * @principle Enforces path-based ownership for chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read location data. Writes are not secured by these rules.
     * @path /locations/{locationId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to location data.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event title data. Writes are not secured by these rules.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to event title data.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

  }

  // Helper functions

  /**
   * @description Checks if the user is signed in.
   * @return {bool} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user ID matches the authenticated user's ID.
   * @param {string} userId The user ID to check.
   * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    /**
   * @description Checks if the user ID matches the authenticated user's ID and resource exists.
   * @param {string} userId The user ID to check.
   * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  /**
   * @description Checks if the userId in the pollResponse matches the authenticated user's ID and if the resource exists.
   * @param {string} userId The user ID to check.
   * @return {bool} True if the userId matches the authenticated user's ID and the resource exists, false otherwise.
   */
  function isExistingOwnerPollResponse(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }

    /**
   * @description Checks if the userId in the eventResponse matches the authenticated user's ID and if the resource exists.
   * @param {string} userId The user ID to check.
   * @return {bool} True if the userId matches the authenticated user's ID and the resource exists, false otherwise.
   */
  function isExistingOwnerEventResponse(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }
}