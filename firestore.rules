/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and efficient data retrieval through structural segregation and path-based ownership. It enforces strict ownership for user-generated content and assumes read-only access for global data collections by default. All writes require authentication.
 *
 * Data Structure:
 * - Global data (news, matches, players, highlight reels, events, locations, event titles, polls, event responses, event overrides) is stored in top-level collections.
 * - User-specific data (forum posts, user profiles, chat status) is nested under `/users/{userId}`.
 * - Chat messages are stored in the `/chat_rooms/{roomId}/messages/{messageId}` subcollection.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is enabled for global data collections.
 * - All write operations require authentication and appropriate authorization checks.
 *
 * Denormalization for Authorization:
 * The `userId` field is present in `/users/{userId}/forum_posts/{postId}` to allow for path-based authorization, avoiding the need for `get()` calls to the `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Only allows authenticated users to create, update, or delete news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to match data. Only allows authenticated users to create, update, or delete match data.
     * @path /matches/{matchId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to player data. Only allows authenticated users to create, update, or delete player data.
     * @path /players/{playerId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to highlight reels. Only allows authenticated users to create, update, or delete highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
     * @allow (get, list): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow (delete): if isExistingOwner(userId);
     * @deny (create): if !isSignedIn() || request.auth.uid != userId;
     * @deny (get, list): if !isOwner(userId);
     * @deny (update): if !isExistingOwner(userId);
     * @deny (delete): if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create their own user document. Allows a user to read, update, and delete their own user document. User listing is disallowed.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
     * @allow (get): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow (delete): if isExistingOwner(userId);
     * @deny (create): if !isSignedIn() || request.auth.uid != userId;
     * @deny (get): if !isOwner(userId);
     * @deny (list): if true;
     * @deny (update): if !isExistingOwner(userId);
     * @deny (delete): if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data. User listing is denied.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Only allows authenticated users to create, update, or delete team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to teams. Only allows authenticated users to create, update, or delete teams.
     * @path /teams/{teamId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to members. Only allows authenticated users to create, update, or delete members.
     * @path /members/{memberId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to group members. Only allows authenticated users to create, update, or delete group members.
     * @path /group_members/{memberId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
     * @description Allows public read access to polls. Only allows authenticated users to create, update, or delete polls.
     * @path /polls/{pollId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): if isSignedIn();
     * @allow (get, list): if isSignedIn();
     * @allow (update): if isSignedIn() && resource != null;
     * @allow (delete): if isSignedIn() && resource != null;
     * @deny (create): if !isSignedIn();
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows authenticated user to manage their poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to events. Only allows authenticated users to create, update, or delete events.
     * @path /events/{eventId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to event overrides. Only allows authenticated users to create, update, or delete event overrides.
     * @path /event_overrides/{overrideId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /event_overrides/{overrideId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to event responses. Only allows authenticated users to create, update, or delete event responses.
     * @path /event_responses/{responseId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /event_responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete chat messages within a specific chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (create): if isSignedIn();
     * @allow (get, list): if isSignedIn();
     * @allow (update): if isSignedIn() && resource != null;
     * @allow (delete): if isSignedIn() && resource != null;
     * @deny (create): if !isSignedIn();
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows authenticated users to manage chat messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own chat status within a specific chat room.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create): if isSignedIn() && isOwner(userId);
     * @allow (get): if isOwner(userId);
     * @allow (list): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @deny (create): if !isSignedIn() || !isOwner(userId);
     * @deny (get): if !isOwner(userId);
     * @deny (list): if !isOwner(userId);
     * @deny (update): if !isExistingOwner(userId);
     * @deny (delete): if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to locations. Only allows authenticated users to create, update, or delete locations.
     * @path /locations/{locationId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to event titles. Only allows authenticated users to create, update, or delete event titles.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create): if false;
     * @deny (update): if !isSignedIn();
     * @deny (delete): if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}