/**
 * @file Firebase Security Rules for Werkself Hub Application
 *
 * @description This ruleset enforces a strict user-ownership model for personal data and allows public read access to general content like news, matches, and player information.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels.
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 * - /team_categories/{categoryId}: Publicly readable team categories.
 * - /teams/{teamId}: Publicly readable team information.
 * - /members/{memberId}: Publicly readable member information.
 * - /group_members/{memberId}: Publicly readable group member information.
 * - /polls/{pollId}: Publicly readable polls.
 * - /polls/{pollId}/responses/{responseId}: Poll responses, accessible only with poll access.
 * - /events/{eventId}: Publicly readable events.
 * - /event_overrides/{overrideId}: Publicly readable event overrides.
 * - /event_responses/{responseId}: Publicly readable event responses.
 * - /chat_rooms/{roomId}/messages/{messageId}: Chat messages within a room, accessible only with room access.
 * - /users/{userId}/chat_status/{roomId}: User's chat status for a room, accessible only to the user.
 * - /locations/{locationId}: Publicly readable locations.
 * - /event_titles/{eventTitleId}: Publicly readable event titles.
 * - /teams/{teamId}/penalties/{penaltyId}: Penalties for a team, accessible only by team admins.
 * - /teams/{teamId}/transactions/{transactionId}: Transactions for a team, accessible only by team admins.
 * - /teams/{teamId}/user_penalties/{userPenaltyId}: User penalties for a team, accessible only by team admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is minimal, focusing on authorization-critical fields and relational integrity.
 * - Public data (news, matches, players) is readable by all.  Write access to public data is not defined in this ruleset.
 * - All write operations MUST be authenticated.
 *
 * Denormalization for Authorization:
 * - HighlightReel documents contain a denormalized `matchId` field for simpler, more performant queries.
 * - The Team and User entities denormalize the team memberships into a simple array.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles.  Write operations are not secured and must be secured in a later iteration.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write operations are not secured and must be secured in a later iteration.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for match data.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Write operations are not secured and must be secured in a later iteration.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for player data.
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write operations are not secured and must be secured in a later iteration.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get, list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, update, and delete their own user document. Allows self-creation.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories. Write operations are not secured and must be secured in a later iteration.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for team categories.
     */
    match /team_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read team information. Write operations are not secured and must be secured in a later iteration.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for team information.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read member information. Write operations are not secured and must be secured in a later iteration.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for member information.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read group member information. Write operations are not secured and must be secured in a later iteration.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for group member information.
     */
    match /group_members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read polls. Write operations are not secured and must be secured in a later iteration.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for polls.
     */
    match /polls/{pollId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read/write access to poll responses to those with read access to the poll. Requires auth.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all operations on poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read events. Write operations are not secured and must be secured in a later iteration.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for events.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read event overrides. Write operations are not secured and must be secured in a later iteration.
     * @path /event_overrides/{overrideId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for event overrides.
     */
    match /event_overrides/{overrideId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read event responses. Write operations are not secured and must be secured in a later iteration.
     * @path /event_responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for event responses.
     */
    match /event_responses/{responseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to read and write chat messages within a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Requires authentication for all operations on chat messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read locations. Write operations are not secured and must be secured in a later iteration.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for locations.
     */
    match /locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read event titles. Write operations are not secured and must be secured in a later iteration.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for event titles.
     */
    match /event_titles/{eventTitleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

   /**
     * @description Allows team admins to manage penalties for a team.
     *  The specific authorization mechanism is not yet implemented.
     * @path /teams/{teamId}/penalties/{penaltyId}
     */
    match /teams/{teamId}/penalties/{penaltyId} {
        // TODO: Implement authorization mechanism to allow only team admins to manage penalties.
        allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows team admins to manage transactions for a team.
     * The specific authorization mechanism is not yet implemented.
     * @path /teams/{teamId}/transactions/{transactionId}
     */
    match /teams/{teamId}/transactions/{transactionId} {
        // TODO: Implement authorization mechanism to allow only team admins to manage transactions.
        allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows team admins to manage user penalties for a team.
     * The specific authorization mechanism is not yet implemented.
     * @path /teams/{teamId}/user_penalties/{userPenaltyId}
     */
    match /teams/{teamId}/user_penalties/{userPenaltyId} {
        // TODO: Implement authorization mechanism to allow only team admins to manage user penalties.
        allow get, list, create, update, delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}