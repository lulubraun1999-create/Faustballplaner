/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * (e.g., forum posts, user profiles) and assumes public read access for global
 * data collections (e.g., news articles, matches, players). Write access to
 * global data is implicitly restricted and should be managed through backend
 * services.
 *
 * Data Structure:
 * - User-specific data is nested under /users/{userId}/...
 * - Global data resides in top-level collections like /news_articles, /matches, etc.
 * - Subcollections are used to manage relationships.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Global data collections are publicly readable.
 * - Ownership is enforced using path-based rules (e.g., /users/{userId}/...).
 *
 * Denormalization for Authorization:
 * - The ruleset avoids `get()` calls by relying on path-based authorization and
 *   denormalized data where necessary. For example, forum posts are stored
 *   under /users/{userId}/forum_posts/{postId} to directly enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and it exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description News articles are publicly readable, but only writeable through a backend service.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Anyone can read news articles.
     * @allow create, update, delete: No one can write to news articles.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Matches are publicly readable, but only writeable through a backend service.
     * @path /matches/{matchId}
     * @allow get, list: Anyone can read match data.
     * @allow create, update, delete: No one can write to matches.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Players are publicly readable, but only writeable through a backend service.
     * @path /players/{playerId}
     * @allow get, list: Anyone can read player data.
     * @allow create, update, delete: No one can write to players.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Highlight reels are publicly readable, but only writeable through a backend service.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Anyone can read highlight reel data.
     * @allow create, update, delete: No one can write to highlight reels.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Forum posts are owned by a specific user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn();
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User profiles are owned by the user.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Team categories are publicly readable, but only writeable through a backend service.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Teams are publicly readable, but only writeable through a backend service.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Members are publicly readable, but only writeable through a backend service.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Group members are publicly readable, but only writeable through a backend service.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Polls are publicly readable, but only writeable through a backend service.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Poll responses require authentication to write, only admins can read.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if false; // TODO: Add admin-only read access once admin roles are defined.
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if false; // Poll responses are not updatable.
     * @allow delete: if false; // Poll responses are not deletable by the user.
     * @deny create: if !isSignedIn();
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Authentication required for creating responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if false;  // Listing and getting responses is not permitted in this prototype.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Events are publicly readable, but only writeable through a backend service.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Event responses require authentication to write.
     * @path /events/{eventId}/responses/{responseId}
     * @allow get, list: if false; // TODO: Add admin-only read access once admin roles are defined.
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if false; // Event responses are not updatable.
     * @allow delete: if false; // Event responses are not deletable by the user.
     * @deny create: if !isSignedIn();
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Authentication required for creating responses.
     */
    match /events/{eventId}/responses/{responseId} {
      allow get: if false;  // Listing and getting responses is not permitted in this prototype.
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Chat messages are readable and writeable by any authenticated user.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.roomId == roomId && request.resource.data.userId == request.auth.uid;
     * @allow update: if false; // Chat messages are not updatable.
     * @allow delete: if false; // Chat messages are not deletable by the user.
     * @deny create: if !isSignedIn();
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Authentication required for creating messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.roomId == roomId && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

   /**
     * @description Tracks the last time a user viewed a chat room.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if false; // Chat statuses are not deletable.
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if true;
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Locations are publicly readable, but only writeable through a backend service.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, backend-only writes.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}