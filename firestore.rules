/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-generated content (e.g., forum posts, user profiles)
 * and provides public read access to global data (e.g., news articles, matches, players).
 * Write access to global data is restricted based on ownership.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles. Write access is based on ownership, 
 *   though the rules currently allow anyone to create, update or delete. The data model should be updated to
 *   include an ownership field for writes to be properly secured.
 * - /matches/{matchId}: Publicly readable match data. Write access should also be restricted based on an ownership field,
 *   but is currently open for writes.
 * - /players/{playerId}: Publicly readable player data. Write access should be restricted based on an ownership field,
 *   but is currently open for writes.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels. Write access should be restricted based on an ownership field.
 * - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user. Only the owner can create, read, update, or delete.
 * - /users/{userId}: User profile data. Only the user can create, read, update, or delete their own profile.
 * - /team_categories/{categoryId}: Publicly readable team categories. Write access should be restricted based on an ownership field.
 * - /teams/{teamId}: Publicly readable teams. Write access should be restricted based on an ownership field.
 * - /members/{memberId}: Publicly readable members. Write access should be restricted based on an ownership field.
 * - /group_members/{memberId}: Publicly readable group_members. Write access should be restricted based on an ownership field.
 * - /polls/{pollId}: Publicly readable polls. Write access is restricted to the user who created the poll.
 * - /polls/{pollId}/responses/{responseId}: Poll responses for a specific poll.
 *   Only the owner can create, read, update, or delete.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Read-only collections (e.g., news articles, matches, players) are publicly readable.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Lack of custom claims enforces Database-based Access Control (DBAC).
 *
 * Denormalization for Authorization:
 * - Forum posts are stored under /users/{userId}/forum_posts/{postId} to avoid the need for get() calls
 *   to verify ownership.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId} to prevent accidental public exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is open, but should be secured.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read news articles, but write access needs to be secured by an admin user.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Allows public read access to match data. Write access is open, but should be secured.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read match data, but write access needs to be secured by an admin user.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Allows public read access to player data. Write access is open, but should be secured.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read player data, but write access needs to be secured by an admin user.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Allows public read access to highlight reels. Write access is open, but should be secured.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read highlight reels, but write access needs to be secured by an admin user.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Enforces user-ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership for all operations on forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Write access is open, but should be secured.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read team categories, but write access needs to be secured by an admin user.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Allows public read access to teams. Write access is open, but should be secured.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read team data, but write access needs to be secured by an admin user.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Allows public read access to members. Write access is open, but should be secured.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read member data, but write access needs to be secured by an admin user.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Allows public read access to group members. Write access is open, but should be secured.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Secure write access based on ownership
     * @allow update: if false; // TODO: Secure write access based on ownership and existence
     * @allow delete: if false; // TODO: Secure write access based on ownership and existence
     * @principle Allows anyone to read group member data, but write access needs to be secured by an admin user.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure write access based on ownership
      allow update: if false; // TODO: Secure write access based on ownership and existence
      allow delete: if false; // TODO: Secure write access based on ownership and existence
    }

    /**
     * @description Allows anyone to read polls, but only the poll creator to write.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwnerPoll(request.auth.uid);
     * @allow delete: if isSignedIn() && isExistingOwnerPoll(request.auth.uid);
     * @principle Allows anyone to read polls, but write access is restricted to the poll creator.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerPoll(request.auth.uid);
      allow delete: if isSignedIn() && isExistingOwnerPoll(request.auth.uid);
    }

    /**
     * @description Allows creating, reading, updating, and deleting poll responses only by the authenticated user.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwnerPollResponse(request.auth.uid);
     * @allow delete: if isSignedIn() && isExistingOwnerPollResponse(request.auth.uid);
     * @principle Enforces document ownership for all operations on poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerPollResponse(request.auth.uid);
      allow delete: if isSignedIn() && isExistingOwnerPollResponse(request.auth.uid);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
       function isExistingOwnerPoll(userId) {
      return isSignedIn() && resource.data.createdBy == userId && resource != null;
    }

    function isExistingOwnerPollResponse(userId) {
      return isSignedIn() && resource.data.userId == userId && resource != null;
    }
  }
}