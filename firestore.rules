/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and allows public read access to global data collections.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels, denormalized with matchId.
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Public read access to news articles, matches, players, and highlight reels.
 * - Strict user-ownership for forum posts and user data.
 * - No user listing is allowed (to protect privacy).
 * - Data validation is relaxed (prototyping mode), focusing on authorization.
 *
 * Denormalization for Authorization:
 * - HighlightReels denormalize `matchId` to avoid needing to `get()` the Match document for authorization.
 *
 * Structural Segregation:
 * - Forum posts are stored under the user's path (`/users/{userId}/forum_posts/{postId}`) to avoid mixing private and public data in the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles and restricts writes.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Always.
     * @deny create, update, delete: Always.
     * @principle Allows public access to news articles
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data and restricts writes.
     * @path /matches/{matchId}
     * @allow get, list: Always.
     * @deny create, update, delete: Always.
     * @principle Allows public access to match data
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information and restricts writes.
     * @path /players/{playerId}
     * @allow get, list: Always.
     * @deny create, update, delete: Always.
     * @principle Allows public access to player information
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels and restricts writes.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Always.
     * @deny create, update, delete: Always.
     * @principle Allows public access to highlight reels
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to a user's own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: If the user is the owner.
     * @allow create: If the user is the owner.
     * @allow update, delete: If the user is the owner and the document exists.
     * @deny create, update, delete: If the user is not the owner.
     * @principle Enforces document ownership for writes and reads
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's own data.
     * @path /users/{userId}
     * @allow get: If the user is the owner.
     * @allow create: If the user is the owner.
     * @allow update, delete: If the user is the owner and the document exists.
     * @deny create, update, delete: If the user is not the owner.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Protect user privacy by disallowing listing
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}