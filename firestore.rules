/**
 * @file Firestore Security Rules for Werkself Hub
 * @description This ruleset enforces a security model that prioritizes authorization independence
 * and leverages path-based ownership for user-generated content. It assumes a clear separation
 * between public and private data, avoiding complex `get()` calls and expensive queries within
 * security rules.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public news articles.
 * - /matches/{matchId}: Public match data.
 * - /players/{playerId}: Public player information.
 * - /highlight_reels/{highlightReelId}: Public highlight reels, denormalized with matchId.
 * - /users/{userId}: Private user profiles.
 * - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user.
 * - /team_categories/{categoryId}: Public categories for teams.
 * - /teams/{teamId}: Public team data.
 * - /members/{memberId}: Public member data.
 * - /group_members/{memberId}: Public group member data
 * - /polls/{pollId}: Public poll data.
 * - /polls/{pollId}/responses/{responseId}: Responses to a poll.
 * - /events/{eventId}: Public event data
 *
 * Key Security Decisions:
 * - Public data (news, matches, players, highlight reels, team categories, teams, members, group members, polls, events) is readable by anyone.
 * - User data and forum posts are strictly controlled by user ownership via path-based rules.
 * - No user listing is allowed to protect user privacy.
 * - Data validation is minimized in this prototype to allow flexible schema evolution.
 *
 * Denormalization for Authorization:
 * - HighlightReel documents denormalize the matchId to avoid needing to query the /matches collection for authorization.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under /users/{userId}/forum_posts/{postId} to leverage path-based ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Anyone can read news articles.
     * @deny create, update, delete: No one can create, update, or delete news articles through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow get, list: Anyone can read match data.
     * @deny create, update, delete: No one can create, update, or delete match data through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow get, list: Anyone can read player data.
     * @deny create, update, delete: No one can create, update, or delete player data through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Anyone can read highlight reels.
     * @deny create, update, delete: No one can create, update, or delete highlight reels through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: (create) User A can create a forum post under /users/A/forum_posts/{postId} if request.auth.uid == A.
     * @allow get, list: (get, list) User A can read forum posts under /users/A/forum_posts/{postId}.
     * @allow update: (update) User A can update a forum post under /users/A/forum_posts/{postId} if request.auth.uid == A and the document exists.
     * @allow delete: (delete) User A can delete a forum post under /users/A/forum_posts/{postId} if request.auth.uid == A and the document exists.
     * @deny create: (create) User A cannot create a forum post under /users/B/forum_posts/{postId} if request.auth.uid == A (mismatched user ID).
     * @deny update: (update) User A cannot update a forum post under /users/B/forum_posts/{postId} even if request.auth.uid == A (mismatched user ID).
     * @deny delete: (delete) User A cannot delete a forum post under /users/B/forum_posts/{postId} even if request.auth.uid == A (mismatched user ID).
     * @principle Enforces user-ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user documents.
     * @path /users/{userId}
     * @allow create: (create) User A can create their own profile at /users/A if request.auth.uid == A.
     * @allow get: (get) User A can read their own profile at /users/A if request.auth.uid == A.
     * @allow update: (update) User A can update their own profile at /users/A if request.auth.uid == A and the document exists.
     * @allow delete: (delete) User A can delete their own profile at /users/A if request.auth.uid == A and the document exists.
     * @deny create: (create) User A cannot create a profile at /users/B if request.auth.uid == A (mismatched user ID).
     * @deny get: (get) User A cannot read User B's profile.
     * @deny list: Listing all users is denied.
     * @deny update: (update) User A cannot update User B's profile.
     * @deny delete: (delete) User A cannot delete User B's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing explicitly disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow get, list: Anyone can read team categories.
     * @deny create, update, delete: No one can create, update, or delete team categories through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow get, list: Anyone can read team data.
     * @deny create, update, delete: No one can create, update, or delete team data through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Allows anyone to read member data, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow get, list: Anyone can read member data.
     * @deny create, update, delete: No one can create, update, or delete member data through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
     * @description Allows anyone to read group member data, but restricts creation, updates, and deletion.
     * @path /group_members/{memberId}
     * @allow get, list: Anyone can read group member data.
     * @deny create, update, delete: No one can create, update, or delete group member data through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll data, but restricts creation, updates, and deletion.
     * @path /polls/{pollId}
     * @allow get, list: Anyone can read poll data.
     * @deny create, update, delete: No one can create, update, or delete poll data through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /polls/{pollId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to poll responses. Any signed in user can create a response, only they can read/update/delete them
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: Any signed in user can create a response
     * @allow get, list, update, delete: Only the user who created the response can read, update, or delete it
     * @principle:  Signed-in users can create responses; owners can manage their responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows anyone to read event data, but restricts creation, updates, and deletion.
     * @path /events/{eventId}
     * @allow get, list: Anyone can read event data.
     * @deny create, update, delete: No one can create, update, or delete event data through client-side rules.
     * @principle Public read, admin-only write.
     */
    match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
        return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and if the resource exists.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}