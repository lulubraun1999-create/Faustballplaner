/**
 * @fileOverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and leverages structural segregation
 * to enforce security. User-generated content is secured via path-based ownership,
 * while global data collections are configured for public read access.  Data validation
 * is relaxed to enable rapid prototyping, focusing only on authorization and
 * relational integrity checks.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels with denormalized matchId.
 * - /users/{userId}: User profile information, accessible only to the owning user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 * - /group_categories/{categoryId}: Publicly readable group categories.
 * - /groups/{groupId}: Publicly readable groups.
 *
 * Key Security Decisions:
 * - Global data collections (news_articles, matches, players, highlight_reels, group_categories, groups) are publicly readable to allow easy data consumption by the application.
 * - User listing is implicitly denied by the rules structure.
 * - User-specific data (user profiles, forum posts) is secured using path-based ownership.
 * - Data validation is minimal in this prototype, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `highlight_reels` collection denormalizes the `matchId` to avoid requiring `get()` calls to the `matches` collection during authorization.
 * - User-specific forum posts are stored under the `/users/{userId}/forum_posts/{postId}` path to enable path-based ownership checks.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under the `/users/{userId}` collection to separate them from global data and simplify authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles and restricts write access to authenticated users only.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if !isSignedIn();
     * @principle Allows public read access to news articles, but only authenticated users can create, update, or delete them.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to match data and restricts write access to authenticated users only.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if !isSignedIn();
     * @principle Allows public read access to match data, but only authenticated users can create, update, or delete them.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to player information and restricts write access to authenticated users only.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if !isSignedIn();
     * @principle Allows public read access to player information, but only authenticated users can create, update, or delete them.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to highlight reels and restricts write access to authenticated users only.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if !isSignedIn();
     * @principle Allows public read access to highlight reels, but only authenticated users can create, update, or delete them.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for forum posts within a user's data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for user profile within a user's data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to group categories and restricts write access to authenticated users only.
     * @path /group_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if !isSignedIn();
     * @principle Allows public read access to group categories, but only authenticated users can create, update, or delete them.
     */
    match /group_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to groups and restricts write access to authenticated users only.
     * @path /groups/{groupId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if !isSignedIn();
     * @principle Allows public read access to groups, but only authenticated users can create, update, or delete them.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the existing owner of the resource
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}