/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and segregation of data.
 * User-generated content is secured using path-based ownership, while global data is treated as publicly readable with restricted write access.
 * All authorization decisions are based on the authenticated user's UID (`request.auth.uid`).
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles. Write access should be restricted to authorized users (TODO).
 * - /matches/{matchId}: Publicly readable match data. Write access should be restricted to authorized users (TODO).
 * - /players/{playerId}: Publicly readable player information. Write access should be restricted to authorized users (TODO).
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels. Write access should be restricted to authorized users (TODO).
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 * - /group_categories/{categoryId}: Publicly readable group categories. Write access should be restricted to authorized users (TODO).
 * - /groups/{groupId}: Publicly readable groups. Write access should be restricted to authorized users (TODO).
 *
 * Key Security Decisions:
 * - Public Read Access: The ruleset grants public read access to global data collections (/news_articles, /matches, /players, /highlight_reels, /group_categories, /groups).
 * - Owner-Only Write Access: User-specific data and content are strictly controlled by the user's UID, using the `isOwner()` helper function.
 * - No User Listing: The ruleset does not allow listing all users.
 * - Data Validation: The ruleset focuses on authorization and relational integrity checks, omitting detailed schema validation for rapid prototyping.
 * - Denormalization for Authorization: The `matchId` is denormalized within the `HighlightReel` entity to avoid requiring `get()` calls for authorization decisions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts write access to authorized users.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, restricted write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to match data, but restricts write access to authorized users.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, restricted write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to player information, but restricts write access to authorized users.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, restricted write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to highlight reels, but restricts write access to authorized users.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, restricted write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows the user to manage their own forum posts. Enforces path-based ownership.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @principle Path-based ownership.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Owner-only access to user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to group categories, but restricts write access to authorized users.
     * @path /group_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, restricted write.
     */
    match /group_categories/{categoryId} {
        allow get, list: if true;
        allow create, update, delete: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to groups, but restricts write access to authorized users.
     * @path /groups/{groupId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, restricted write.
     */
    match /groups/{groupId} {
        allow get, list: if true;
        allow create, update, delete: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}