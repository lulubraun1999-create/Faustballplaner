/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to general content.
 *
 * Data Structure:
 * - User-specific data is nested under /users/{userId}.
 * - Forum posts are stored as subcollections under /users/{userId}/forum_posts/{postId}.
 * - Public data (news, matches, players, highlight reels, team categories, teams, and group members) resides in top-level collections.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Public data is readable by anyone but writable only with appropriate authorization (not yet implemented in this prototype).
 * - Listing of user documents is denied to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - Forum posts are stored under the user's path (/users/{userId}/forum_posts/{postId}) to avoid needing get() calls to verify ownership.
 * - HighlightReels include the matchId for easy querying without needing to access match documents for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to news articles. Write access is not granted in this prototype.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to match data. Write access is not granted in this prototype.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to player data. Write access is not granted in this prototype.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to highlight reel data. Write access is not granted in this prototype.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to highlight reel data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages forum posts for a specific user. Allows a user to create, read, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces user-ownership for forum posts using path-based authorization.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);

    }

    /**
     * @description Manages user documents. Allows a user to create their own document upon registration and read/update their own information. Listing user documents is denied.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.id == userId;
     * @allow delete: if false;
     * @principle Enforces user-ownership for user documents and prevents listing of all users.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.id == userId;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to team categories. Write access is not granted in this prototype.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to team data. Write access is not granted in this prototype.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

       /**
     * @description Allows read-only access to member data. Write access is not granted in this prototype.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to group member data. Write access is not granted in this prototype.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access to group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows public read access to polls.  Write access is restricted to poll creators and is not currently fully implemented.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update, delete: if false;
     * @principle Public read, owner-only writes (prototype).
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Allows users to create, read, update, and delete their own poll responses under a specific poll. Enforces user-ownership via userId field.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow get: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow list: if isSignedIn();
     * @allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource != null;
     * @allow delete: if isSignedIn() && isExistingPollResponseOwner(responseId);
     * @principle Enforces user-ownership for poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       allow get: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       allow list: if isSignedIn();
       allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource != null;
       allow delete: if isSignedIn() && isExistingPollResponseOwner(responseId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of an existing poll response.
      * @param {string} responseId - The ID of the poll response.
      * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingPollResponseOwner(responseId) {
      return get(/databases/$(database)/documents/polls/$(responseId)).data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Checks if the user is the owner of an existing resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}