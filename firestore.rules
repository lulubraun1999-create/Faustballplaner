/**
 * @file Firebase Security Rules for Werkself Hub
 * @version Prototype
 *
 * @Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric model for user-generated content
 * and open read access for global data. It avoids complex `get()` calls by denormalizing
 * authorization data directly into documents. Data validation is relaxed for prototyping speed.
 *
 * @Data Structure:
 * - User-specific data (profiles, forum posts) is nested under `/users/{userId}`.
 * - Global data (news, matches, players) resides in top-level collections.
 *
 * @Key Security Decisions:
 * - User data is strictly private, accessible only to the owning user.
 * - Global data collections are publicly readable. Writes are not secured in this prototype.
 * - Listing of user documents is allowed.
 * - The rules explicitly deny any potentially unsafe operations.
 * - The system defaults to deny, requiring explicit allow statements.
 *
 * @Denormalization for Authorization:
 * - No denormalization is needed, as the data structures follow path-based ownership.
 *   User-generated content is stored under `/users/{userId}`, enabling easy access checks.
 *
 * @Structural Segregation:
 * - User-specific and global data are stored in separate collection hierarchies, preventing
 *   accidental exposure of private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is not secured in this prototype.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Allows public read access to match data. Write access is not secured in this prototype.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Allows public read access to player data. Write access is not secured in this prototype.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Allows public read access to highlight reels. Write access is not secured in this prototype.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Enforces user-ownership for forum posts. Only the user can create, read, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user documents. Only the user can create, read, update, or delete their own document.
     * @path /users/{userId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Write access is not secured in this prototype.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Allows public read access to teams. Write access is not secured in this prototype.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Allows public read access to members. Write access is not secured in this prototype.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of members.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Allows public read access to group members. Write access is not secured in this prototype.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of group members.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

    /**
     * @description Allows public read access to polls. Write access is not secured in this prototype.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

        /**
     * @description Allows public read access to poll responses. Write access is not secured in this prototype.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of poll responses.
     */
     match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access if needed.
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}