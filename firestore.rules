/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a security model based on path-based ownership for user data and public read access for global data.
 *
 * Data Structure:
 * - News articles, matches, players, and highlight reels are stored in top-level collections.
 * - User profiles are stored under `/users/{userId}`.
 * - Forum posts are stored under `/users/{userId}/forum_posts/{postId}`, enforcing user-ownership.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Global data (news, matches, players) is publicly readable.
 * - Writes to user documents and forum posts are restricted to the owning user.
 * - No schema validation is performed beyond authorization checks.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` documents to allow filtering and listing highlight reels without needing to read the `Match` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Only allows writes.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No one can create, update or delete news articles.
     * @principle Allows public read access to news articles, restricting write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to matches. Only allows writes.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No one can create, update or delete match data.
     * @principle Allows public read access to match data, restricting write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Only allows writes.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @deny (create, update, delete): No one can create, update or delete player data.
     * @principle Allows public read access to player data, restricting write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Only allows writes.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No one can create, update or delete highlight reels.
     * @principle Allows public read access to highlight reels, restricting write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): The user can create a forum post if the userId matches their auth.
     * @allow (get, list): The user can read their own forum posts.
     * @allow (update, delete): The user can update/delete their own forum posts.
     * @deny (create, update, delete): A user cannot create/update/delete forum posts for other users.
     * @principle Enforces user-ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create): The user can create their own user document if the userId matches their auth.
     * @allow (get): The user can read their own user document.
     * @allow (update, delete): The user can update/delete their own user document.
     * @deny (create, update, delete): A user cannot create/update/delete user documents for other users.
     * @principle Enforces user-ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}