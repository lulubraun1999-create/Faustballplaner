/**
 * @file Firestore Security Rules for Werkself Hub application.
 * @core_philosophy This ruleset prioritizes security and ease of maintenance. It uses a combination of
 *  path-based ownership and dedicated collections to control access to data.
 *  It avoids complex `get()` calls in rules by denormalizing data where necessary for authorization.
 * @data_structure The Firestore database is structured with top-level collections for global data
 *  (news articles, matches, players, polls), user-specific subcollections for forum posts, and
 *  user documents.
 * @key_security_decisions
 *  - User listing is disallowed.
 *  - Global data (news, matches, players) is publicly readable but write-protected.
 *  - User-generated content (forum posts, polls) is owned by the user.
 *  - Data required for authorization is denormalized to avoid `get()` calls.
 * @denormalization_for_authorization Forum posts are stored under `/users/{userId}` to
 *  establish clear ownership. Highlight reels contain the `matchId` to avoid needing to fetch match
 *  data during authorization. Polls contain the `createdBy` to avoid needing to fetch user
 *  data during authorization.
 * @structural_segregation User-specific data (forum posts) is stored in user subcollections to
 *  avoid mixing public and private data in the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts writes.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read match data, but restricts writes.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read player data, but restricts writes.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts writes.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages user-specific forum posts. Only the user can create, read, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get, list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership for all operations on forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user documents. Only the user can create, read, update, or delete their own document.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership for all operations on user documents.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows anyone to read team categories, but restricts writes.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read team data, but restricts writes.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

   /**
     * @description Allows anyone to read member data, but restricts writes.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read group member data, but restricts writes.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes (currently no owner, so write is denied).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read polls, but restricts writes to authenticated users who are the creators.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.createdBy);
     * @allow delete: if isExistingOwner(resource.data.createdBy);
     * @deny create: if !isSignedIn() || request.resource.data.createdBy != request.auth.uid;
     * @deny update: if !isExistingOwner(resource.data.createdBy);
     * @deny delete: if !isExistingOwner(resource.data.createdBy);
     * @principle Public read, owner-only writes, with validation that the creator matches the authenticated user on create.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

   /**
     * @description Manages poll responses. Only the user can create, read, update, or delete their own responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @allow get, list: if isOwner(resource.data.userId);
     * @allow update: if isExistingOwner(resource.data.userId);
     * @allow delete: if isExistingOwner(resource.data.userId);
     * @deny create: if request.auth.uid != request.resource.data.userId;
     * @deny update: if !isExistingOwner(resource.data.userId);
     * @deny delete: if !isExistingOwner(resource.data.userId);
     * @principle Enforces user-ownership for all operations on poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow get, list: if isOwner(resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param userId The user ID to compare against the request's authentication UID.
     * @return True if the user ID matches the request's authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing resource.
     * @param userId The user ID to compare against the resource's data and the request's authentication UID.
     * @return True if the user ID matches the request's authentication UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}