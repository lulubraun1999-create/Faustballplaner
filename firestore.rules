/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy: This ruleset uses a strict path-based ownership model for user-generated content
 * and assumes public read access for globally available data (news, matches, players). Write access
 * is generally restricted and should be managed through application logic.
 *
 * Data Structure:
 * - User-specific data (profile, forum posts, chat status) is nested under /users/{userId}.
 * - Global data (news, matches, players, teams, polls, events) resides in top-level collections.
 * - Chat messages are stored in subcollections under /chat_rooms/{roomId}/messages/{messageId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Global data collections are publicly readable.
 * - Write access to global data is generally denied and should be handled by backend processes.
 * - The rules enforce ownership for user-generated content using path-based matching.
 * - Flexible data shapes are allowed for rapid prototyping and iteration, but relational integrity
 *   is validated where necessary for authorization (e.g., user IDs in paths and documents).
 * - Denormalization is employed to avoid costly `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
        /**
     * @description Allows anyone to get, list, or delete an event.
     * @path /events/{eventId}
     * @allow (get, list)
     * @allow (delete)
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if true;
    }

    /**
     * @description Allows public read access to news articles. Write access is denied.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to news articles. Write access is denied.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is denied.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to match data. Write access is denied.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is denied.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to player data. Write access is denied.
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to highlight reels. Write access is denied.
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create, get, list, update, delete) User must be the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create, get, update, delete) User must be the owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Write access is denied.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to team categories. Write access is denied.
     */
    match /team_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to teams. Write access is denied.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to teams. Write access is denied.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

   /**
     * @description Allows public read access to members. Write access is denied.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to members. Write access is denied.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to group members. Write access is denied.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to group members. Write access is denied.
     */
    match /group_members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Allows public read access to polls. Write access is denied.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     */
    match /polls/{pollId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows anyone to read poll responses. Users can create and update their own responses. Deletion is not allowed.
     * @path /polls/{pollId}/responses/{responseId}
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    /**
     * @description Allows read and write access to chat messages within a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}