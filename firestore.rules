/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership. It enforces strict access controls based on user authentication and path-based ownership. The rules avoid complex `get()` calls by relying on data denormalization to simplify authorization logic. Data validation is limited to authorization-critical fields, allowing for flexible prototyping.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles.
 * - `/matches/{matchId}`: Publicly readable match data.
 * - `/players/{playerId}`: Publicly readable player information.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels.
 * - `/users/{userId}`: User profile data, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 * - `/team_categories/{categoryId}`: Publicly readable team categories.
 * - `/teams/{teamId}`: Publicly readable team data.
 * - `/members/{memberId}`: Publicly readable denormalized user data.
 * - `/group_members/{memberId}`: Publicly readable lightweight user data.
 * - `/polls/{pollId}`: Publicly readable polls.
 * - `/polls/{pollId}/responses/{responseId}`: Poll responses.
 *
 * Key Security Decisions:
 * - Public read access for news articles, matches, players, highlight reels, team categories, teams, members, group_members, and polls.
 * - User-owned data (profiles and forum posts) is strictly controlled via path-based authorization.
 * - No user listing is explicitly allowed or denied.
 * - Authorization decisions are pushed to the edge (rules) to avoid backend lookups wherever possible.
 *
 * Denormalization for Authorization:
 * - The `ForumPost` entity includes a `userId` field, which is redundant since the posts are stored under `/users/{userId}`. However, this denormalization simplifies rule creation and improves performance by avoiding the need to fetch the user ID from a separate document during authorization.
 * - HighlightReels denormalize `matchId` for optimized querying.
 *
 * Structural Segregation:
 * - Forum posts are stored under the `/users/{userId}` collection to ensure only the owner can modify their own posts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is signed in and the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     *              This function ensures that the document exists before proceeding with the ownership check.
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for the news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): No one can create, update, or delete news articles through the client.
     * @principle Public read access, no client-side writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for the matches collection.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @allow (create, update, delete): No one can create, update, or delete match data through the client.
     * @principle Public read access, no client-side writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for the players collection.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @allow (create, update, delete): No one can create, update, or delete player data through the client.
     * @principle Public read access, no client-side writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for the highlight_reels collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reel data.
     * @allow (create, update, delete): No one can create, update, or delete highlight reel data through the client.
     * @principle Public read access, no client-side writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for a user's forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list): Only the owner can read their own forum posts.
     * @allow (create): Only the owner can create forum posts under their own user ID. The `userId` field in the data must match the `userId` in the path.
     * @allow (update, delete): Only the owner can update or delete their own existing forum posts.
     * @deny (create): If the `userId` in the data does not match the `userId` in the path.
     * @deny (update, delete): If the forum post does not exist.
     * @principle Enforces document ownership for all writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (get): Only the owner can read their own profile data.
     * @allow (create): Only the owner can create their profile (self-registration). The `id` field in the data must match the `userId` in the path.
     * @allow (update): Only the owner can update their own profile. The `id` field is immutable.
     * @allow (delete): Only the owner can delete their own profile.
     * @deny (create): If the `id` in the data does not match the `userId` in the path.
     * @deny (update): If the `id` field is changed during an update.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the team_categories collection.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team categories.
     * @allow (create, update, delete): No one can create, update, or delete team categories through the client.
     * @principle Public read access, no client-side writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for the teams collection.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @allow (create, update, delete): No one can create, update, or delete team data through the client.
     * @principle Public read access, no client-side writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for the members collection.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @allow (create, update, delete): No one can create, update, or delete member data through the client.
     * @principle Public read access, no client-side writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for the group_members collection.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @allow (create, update, delete): No one can create, update, or delete group member data through the client.
     * @principle Public read access, no client-side writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Security rules for the polls collection.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read poll data.
     * @allow (create, update, delete): No one can create, update, or delete poll data through the client.
     * @principle Public read access, no client-side writes.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list): Any user can read poll responses.
     * @allow (create, update, delete): No one can create, update, or delete poll responses through the client.
     * @principle Public read access, no client-side writes.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}