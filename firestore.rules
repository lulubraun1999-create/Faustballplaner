/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, combining public read access for global data with strict user-ownership for personal data and content.
 *
 * Data Structure:
 * - Global data (news, matches, players, locations, teams, team categories, polls, events, group members) resides in top-level collections and is generally readable by all users.
 * - User-specific data (user profiles, forum posts, event/poll responses, chat statuses) is nested under `/users/{userId}` and secured via path-based ownership.
 * - Chat messages are in `/chat_rooms/{roomId}/messages/{messageId}` without any particular ownership other than being part of a chat.
 *
 * Key Security Decisions:
 * - Public Read Access: The ruleset assumes that data in top-level collections like `/news_articles`, `/matches`, `/players`, `/locations`, `/teams`, `/team_categories`, `/polls`, `/events`, and `/group_members` is safe for public consumption and allows unauthenticated read access.
 * - Strict User Ownership: All data nested under `/users/{userId}` is exclusively accessible to the authenticated user matching the `userId` in the path.
 * - No User Listing: Listing all users (`/users`) is implicitly denied.
 * - Denormalization for Authorization: The rules rely on path-based ownership to avoid `get()` calls and ensure efficient security checks.
 * - No Custom Claims: User authorization is based solely on the authenticated user's UID, without relying on custom claims.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Only authenticated users can create, update, or delete articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Only authenticated users can create, update, or delete matches.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Only authenticated users can create, update, or delete players.
     * @path /players/{playerId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Only authenticated users can create, update, or delete highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces strict user-ownership for forum posts.  Only the user who owns the post can read, create, update, or delete it.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, list, update, delete): if isOwner(userId)
     * @deny (create): if request.auth.uid != userId
     * @deny (get, list, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list, update, delete: if isOwner(userId);
      allow create: if request.auth.uid == userId;
    }

    /**
     * @description Enforces strict user-ownership for user documents. Only the user can read, update, or delete their own document.  Allows self-creation.
     * @path /users/{userId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, update, delete): if isOwner(userId)
     * @deny (create): if request.auth.uid != userId
     * @deny (get, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId);
      allow create: if request.auth.uid == userId;
    }

    /**
     * @description Allows public read access to team categories. Only authenticated users can create, update, or delete team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams. Only authenticated users can create, update, or delete teams.
     * @path /teams/{teamId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to members. Only authenticated users can create, update, or delete members.
     * @path /members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group members. Only authenticated users can create, update, or delete group members.
     * @path /group_members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to polls. Only authenticated users can create, update, or delete polls.
     * @path /polls/{pollId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Enforces user-ownership for poll responses. Only the user who owns the response can read, create, update, or delete it.
     * @path /polls/{pollId}/responses/{responseId}
     *  @allow (create): if request.auth.uid == request.resource.data.userId
     * @allow (get, list, update, delete): if isOwner(request.resource.data.userId);
     * @principle Enforces document ownership for all operations.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list, update, delete: if isOwner(request.resource.data.userId);
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    /**
     * @description Allows public read access to events. Only authenticated users can create, update, or delete events.
     * @path /events/{eventId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for event responses. Only the user who owns the response can read, create, update, or delete it.
     * @path /events/{eventId}/responses/{responseId}
     *  @allow (create): if request.auth.uid == request.resource.data.userId
     * @allow (get, list, update, delete): if isOwner(request.resource.data.userId);
     * @principle Enforces document ownership for all operations.
     */
    match /events/{eventId}/responses/{responseId} {
      allow get, list, update, delete: if isOwner(request.resource.data.userId);
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    /**
     * @description Allows read and write access to chat messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list, create, update, delete): if isSignedIn();
     * @principle Allows chat functionality for authenticated users.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Enforces user-ownership for chat statuses. Only the user who owns the status can read, create, update, or delete it.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (get, create, update, delete): if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get, create, update, delete, list: if isOwner(userId);
    }

     /**
     * @description Allows public read access to locations. Only authenticated users can create, update, or delete locations.
     * @path /locations/{locationId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Helper function to determine if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is signed in and the UID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}