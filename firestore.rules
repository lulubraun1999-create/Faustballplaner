rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is not permitted via security rules.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access for all news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is not permitted via security rules.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access for all match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player profiles. Write access is not permitted via security rules.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access for all player profiles.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is not permitted via security rules.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access for all highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to user profiles. Only the authenticated user can read or write their own profile data.
     * @path /users/{userId}
     * @allow get, create, update, delete, list: if request.auth.uid == userId;
     * @deny get, create, update, delete, list: if request.auth.uid != userId;
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSelfCreate(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to forum posts under a user's profile. Only the authenticated user can create, read, update, or delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     *   @allow create: if request.auth.uid == userId && request.resource.data.userId == userId;
     *   @allow get, list: if request.auth.uid == userId;
     *   @allow update: if request.auth.uid == userId && resource != null;
     *   @allow delete: if request.auth.uid == userId && resource != null;
     * @deny create: if request.auth.uid != userId;
     * @deny get, list: if request.auth.uid != userId;
     * @deny update: if request.auth.uid != userId;
     * @deny delete: if request.auth.uid != userId;
     * @principle Enforces document ownership and validates relational integrity for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        // Allows creating a document if the request.auth.uid matches the document ID.
    function isSelfCreate(userId) {
        return request.auth.uid == userId;
    }

    // Checks if the user is the owner of the document and the document exists.
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }
        function exists(path) {
            return get(path).data != null;
        }
  }
}