/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @core_philosophy This ruleset prioritizes authorization independence and efficient data retrieval. It enforces strict ownership for user-generated content via path-based rules and assumes global data is read-only for most users.
 * @data_structure
 *  - `/news_articles/{newsArticleId}`: Public news articles.
 *  - `/matches/{matchId}`: Public match data.
 *  - `/players/{playerId}`: Public player information.
 *  - `/highlight_reels/{highlightReelId}`: Public highlight reels with denormalized `matchId`.
 *  - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user.
 *  - `/users/{userId}`: User profile data, accessible only to the user.
 *  - `/team_categories/{categoryId}`: Public team categories.
 *  - `/teams/{teamId}`: Public team data.
 *  - `/members/{memberId}`: Public member data.
 *  - `/group_members/{memberId}`: Public group member data.
 *  - `/polls/{pollId}`: Public polls.
 *  - `/polls/{pollId}/responses/{responseId}`: Poll responses.
 *  - `/events/{eventId}`: Public events.
 *  - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages in a room.
 *  - `/users/{userId}/chat_status/{roomId}`: User's chat status for a room.
 * @key_security_decisions
 *  - Public data (news, matches, players, highlight reels, teams, team categories, members, group members, polls, events) is readable by all. Writes are not secured in this prototyping phase.
 *  - User-generated content (forum posts, user profiles, chat status) is strictly owned by the user, enforced via path-based rules.
 *  - User listing is implicitly disallowed via the absence of a general `/users` collection.
 * @denormalization_for_authorization
 *  - HighlightReels denormalize `matchId` to enable efficient queries without requiring `get()` calls on the `matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Write access is not secured in this prototype.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows anyone to read match data. Write access is not secured in this prototype.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows anyone to read player data. Write access is not secured in this prototype.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows anyone to read highlight reels. Write access is not secured in this prototype.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User with matching id creates post.
     * @allow (get, list, update, delete) User with matching id views, lists, updates, or deletes post.
     * @deny (create, update, delete) User without matching id tries to create, update, or delete a post.
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own user profile.
     * @path /users/{userId}
     * @allow (create) User with matching id creates profile.
     * @allow (get, update, delete) User with matching id views, updates, or deletes profile.
     * @deny (create, update, delete) User without matching id tries to create, update, or delete a profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false; // User listing is not permitted
    }

    /**
     * @description Allows anyone to read team categories. Write access is not secured in this prototype.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows anyone to read team data. Write access is not secured in this prototype.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

     /**
     * @description Allows anyone to read member data. Write access is not secured in this prototype.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows anyone to read group member data. Write access is not secured in this prototype.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows anyone to read poll data. Write access is not secured in this prototype.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for poll data.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

     /**
     * @description Allows anyone to read responses data. Write access is not secured in this prototype.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows anyone to read events data. Write access is not secured in this prototype.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for event data.
     */
    match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

     /**
     * @description Allows anyone to read messages in a chat room. Write access is not secured in this prototype.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access for messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an admin field.
    }

    /**
     * @description Allows a user to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create) User with matching id creates chat status.
     * @allow (get, update, delete) User with matching id views, updates, or deletes chat status.
     * @deny (create, update, delete) User without matching id tries to create, update, or delete a chat status.
     * @principle Enforces document ownership for chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    // ********** HELPER FUNCTIONS **********

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the userId.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}