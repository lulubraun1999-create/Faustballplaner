/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data
 *  (e.g., /users/{userId}) and assumes public read access for global data (e.g., news,
 *  matches, players). Write access to global data is not controlled at the rules level
 *  in this prototype.
 *
 * @data_structure
 *  - /news_articles/{newsArticleId}: Public news articles.
 *  - /matches/{matchId}: Public match data.
 *  - /players/{playerId}: Public player data.
 *  - /highlight_reels/{highlightReelId}: Public highlight reels with denormalized matchId.
 *  - /users/{userId}: User profiles, accessible only to the user.
 *  - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user.
 *
 * @key_security_decisions
 *  - Public read access for news, matches, players, and highlight reels.
 *  - Strict user ownership for user profiles and forum posts.
 *  - No user listing is allowed (to protect user privacy).
 *  - Write access to top-level collections is not secured (assumed to be handled externally).
 *  - No custom claims or role-based access control (DBAC is enforced).
 *
 * @denormalization_for_authorization
 *  - HighlightReels denormalize `matchId` to allow filtering without extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Securely checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Securely checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Combines ownership and existence check for update/delete operations.
     * @param {string} userId The user ID to compare against the resource's user ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): No rule is defined, assuming admin-level control is applied externally.
     * @deny (create, update, delete): No one is allowed to create, update, or delete without authentication.
     * @principle Public read access for news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access appropriately (e.g., admin role).
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @allow (create, update, delete): No rule is defined, assuming admin-level control is applied externally.
     * @deny (create, update, delete): No one is allowed to create, update, or delete without authentication.
     * @principle Public read access for match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access appropriately (e.g., admin role).
    }

    /**
     * @description Rules for players.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @allow (create, update, delete): No rule is defined, assuming admin-level control is applied externally.
     * @deny (create, update, delete): No one is allowed to create, update, or delete without authentication.
     * @principle Public read access for player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access appropriately (e.g., admin role).
    }

    /**
     * @description Rules for highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @allow (create, update, delete): No rule is defined, assuming admin-level control is applied externally.
     * @deny (create, update, delete): No one is allowed to create, update, or delete without authentication.
     * @principle Public read access for highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure write access appropriately (e.g., admin role).
    }

    /**
     * @description Rules for forum posts under a specific user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): The user can create a forum post under their own user ID.
     * @allow (get, list): The user can read and list their own forum posts.
     * @allow (update, delete): The user can update and delete their own existing forum posts.
     * @deny (create): A user cannot create a forum post under another user's ID.
     * @deny (get, list, update, delete): A user cannot access, update, or delete another user's forum posts.
     * @principle Enforces path-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create): A user can create their own profile.
     * @allow (get): A user can read their own profile.
     * @allow (update): A user can update their own existing profile.
     * @allow (delete): A user can delete their own existing profile.
     * @deny (create): A user cannot create a profile for another user.
     * @deny (get, update, delete): A user cannot access, update, or delete another user's profile.
     * @principle Enforces path-based ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}