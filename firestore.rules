/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset provides open read access for all collections while enforcing strict
 * ownership-based write access for user-specific data under the `/users/{userId}` path.
 *
 * Data Structure:
 * - Top-level collections (`/news_articles`, `/matches`, `/players`, `/highlight_reels`)
 *   are globally readable.
 * - User-specific data (e.g., `/users/{userId}`, `/users/{userId}/forum_posts/{postId}`)
 *   is secured via path-based ownership.
 *
 * Key Security Decisions:
 * - Global collections are publicly readable.
 * - User listing is implicitly denied as there are no rules granting `list` on `/users`.
 * - Forum posts are stored as subcollections of user documents, enabling path-based authorization.
 * - Denormalization is used to avoid `get()` calls in rules.  For example, HighlightReels contain a `matchId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. All writes are denied, as this collection should be managed via a trusted environment.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Any user can read news articles.
     * @deny create, update, delete: No one can create, update, or delete news articles directly via the client.
     * @principle Grants public read access to news articles while restricting writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to matches. All writes are denied, as this collection should be managed via a trusted environment.
     * @path /matches/{matchId}
     * @allow get, list: Any user can read match data.
     * @deny create, update, delete: No one can create, update, or delete matches directly via the client.
     * @principle Grants public read access to match data while restricting writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player profiles. All writes are denied, as this collection should be managed via a trusted environment.
     * @path /players/{playerId}
     * @allow get, list: Any user can read player profiles.
     * @deny create, update, delete: No one can create, update, or delete players directly via the client.
     * @principle Grants public read access to player profiles while restricting writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. All writes are denied, as this collection should be managed via a trusted environment.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Any user can read highlight reels.
     * @deny create, update, delete: No one can create, update, or delete highlight reels directly via the client.
     * @principle Grants public read access to highlight reels while restricting writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user documents and enforces ownership.
     * @path /users/{userId}
     * @allow get: Any user can read another user's profile.
     * @allow list: if false;
     * @allow create: Any authenticated user can create their own user document.
     * @allow update: Only the owner can update their own user document.
     * @allow delete: Only the owner can delete their own user document.
     * @principle Enforces document ownership for writes and restricts user listing.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages forum posts and enforces ownership via path.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: Only the owner can list forum posts.
     * @allow create: Only the owner can create forum posts. The `userId` must match the `request.auth.uid`.
     * @allow update: Only the owner can update their forum posts.
     * @allow delete: Only the owner can delete their forum posts.
     * @principle Enforces document ownership for writes within the user's data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}