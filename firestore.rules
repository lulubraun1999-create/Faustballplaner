/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content (forum posts)
 * and read-only access to global data (news, matches, players, highlight reels).
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels.
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user,
 *   accessible only to that user.
 *
 * Key Security Decisions:
 * - Public read access to news articles, matches, players, and highlight reels.
 * - Strict ownership for user profiles and forum posts using path-based authorization.
 * - No user listing is allowed.
 * - No schema validation is performed in this prototype, except for relational integrity
 *   and ownership checks.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` documents to enable
 *   efficient querying of highlight reels for a specific match without requiring
 *   complex security rules or additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access, but restricts modification.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access, but restricts modification.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access, but restricts modification.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access, but restricts modification.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create, update, delete) to the owner.
     * @deny (create, update, delete) to other users.
     * @principle Enforces document ownership for writes using path-based authorization.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create, update, delete) to the owner.
     * @deny (create, update, delete) to other users.
     * @principle Enforces document ownership for writes using path-based authorization.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

       /**
     * @description Checks if the user ID matches the authenticated user's ID and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user ID matches the authenticated user's ID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}