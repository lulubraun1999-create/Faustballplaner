/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and public read access for general application data related to Bayer Leverkusen.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public AI-generated highlight reels.
 * - `/users/{userId}`: User profile data, accessible only by the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only by that user.
 * - `/team_categories/{categoryId}`: Public team categories.
 * - `/teams/{teamId}`: Public teams data.
 * - `/members/{memberId}`: Public member information.
 * - `/group_members/{memberId}`: Public group member information.
 * - `/polls/{pollId}`: Public polls.
 * - `/polls/{pollId}/responses/{responseId}`: Public poll responses.
 * - `/events/{eventId}`: Public events.
 * - `/event_overrides/{overrideId}`: Public event overrides.
 * - `/event_responses/{responseId}`: Public event responses.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Public chat messages.
 * - `/users/{userId}/chat_status/{roomId}`: User-specific chat status, accessible only by the user.
 * - `/locations/{locationId}`: Public locations data.
 * - `/event_titles/{eventTitleId}`: Public event titles data.
 *
 * Key Security Decisions:
 * - Public read access for news articles, matches, players, highlight reels, team categories, teams, members, group_members, polls, poll responses, events, event overrides, event responses, chat messages, locations and event titles.
 * - Strict owner-only access for user profiles and their forum posts.
 * - No user listing is allowed.
 * - Absence of custom claims enforces DBAC.
 *
 * Denormalization for Authorization:
 * - User-specific forum posts are stored under the `/users/{userId}/forum_posts/{postId}` path to make ownership explicit.
 * - Highlight reels contain the `matchId` to avoid needing to query the `matches` collection for authorization.
 * - User chat status is stored under the `/users/{userId}` path to make ownership explicit.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles.  Write access is not permitted via rules.  Admin access should be implemented in the backend.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player information. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to forum posts under a user's path.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User 'abc' can create a post with their own ID.
     * @allow (get, list, update, delete) User 'abc' can read, update, or delete their own post.
     * @deny (create) User 'def' cannot create a post under user 'abc''s path.
     * @deny (get, list, update, delete) User 'def' cannot read, update, or delete user 'abc''s post.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (create) User 'abc' can create their profile with their own ID.
     * @allow (get, update, delete) User 'abc' can read, update, or delete their own profile.
     * @deny (create) User 'def' cannot create a profile with user 'abc''s ID.
     * @deny (get, update, delete) User 'def' cannot read, update, or delete user 'abc''s profile.
     *
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories.  Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read teams data. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read member data. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read polls.  Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll responses. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read events. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event overrides. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /event_overrides/{overrideId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /event_overrides/{overrideId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event responses. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /event_responses/{responseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /event_responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read chat messages. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to user chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (get, update, create, delete) User 'abc' can read, update, create, or delete their own chat status.
     * @deny (get, update, create, delete) User 'def' cannot read, update, create, or delete user 'abc''s chat status.
     * @principle Restricts access to a user's own data.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
     * @description Allows anyone to read location data. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /locations/{locationId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event titles data. Write access is not permitted via rules. Admin access should be implemented in the backend.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only writes (via backend).
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document based on the userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the document and the document exists.
     * @param {string} userId - The user ID to compare against the resource's data.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}