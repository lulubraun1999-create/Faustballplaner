/**
 * @file Firestore Security Rules for Werkself Hub
 * @version 2
 *
 * @Core Philosophy:
 * This ruleset implements a strict, path-based ownership model for user-generated content
 * and allows public read access to global data collections. All write operations are
 * protected by authentication checks and, where applicable, ownership validation.
 * Relational integrity checks are performed only on fields crucial for authorization.
 *
 * @Data Structure:
 * - User-specific data is nested under `/users/{userId}`, enabling path-based authorization.
 * - Forum posts are stored under `/users/{userId}/forum_posts/{postId}`.
 * - Other data (news, matches, players) resides in top-level collections.
 * - Chat messages reside in subcollections under `/chat_rooms/{roomId}/messages/{messageId}`.
 * - User chat statuses reside in `/users/{userId}/chat_status/{roomId}`.
 * - Polls reside in `/polls/{pollId}` and `/polls/{pollId}/responses/{responseId}`.
 * - Events reside in `/events/{eventId}` and `/events/{eventId}/responses/{responseId}`.
 * - Locations reside in `/locations/{locationId}`.
 *
 * @Key Security Decisions:
 * - Listing of users is explicitly disallowed.
 * - Global data collections (news, matches, players) are publicly readable.
 * - Write access to global data collections is implicitly denied and should be
 *   handled by backend logic (e.g., Cloud Functions) with appropriate administrative
 *   privileges.
 * - The rules do not enforce strict schema validation to allow for rapid prototyping
 *   and iteration.
 *
 * @Denormalization for Authorization:
 *   - The `ForumPost` entity denormalizes the `userId` onto the document, which is used for
 *     authorization. The `userId` also appears in the path, reinforcing the owner relationship.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny update: if !isSignedIn() || request.auth.uid != userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user documents.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny update: if !isSignedIn() || request.auth.uid != userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Write access is denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /team_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to team data. Write access is denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to member data. Write access is denied.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to group member data. Write access is denied.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /group_members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to poll data. Write access is denied.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /polls/{pollId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to create poll responses and restricts listing/getting to authenticated users only.
     * @path /polls/{pollId}/responses/{responseId}
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows public read access to event data. Write access is denied.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /events/{eventId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows authenticated users to create event responses and restricts listing/getting to authenticated users only.
     * @path /events/{eventId}/responses/{responseId}
     */
    match /events/{eventId}/responses/{responseId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows authenticated users to create chat messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows authenticated users to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
        allow update: if isSignedIn() && isExistingOwner(userId) && request.auth.uid == userId;
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to locations. Write access is denied.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed. Administrative writes must occur via a backend.
     */
    match /locations/{locationId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Helper function to determine if the request is from an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to determine if the request is from the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the request is from the existing owner of the resource, and that the document exists.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}