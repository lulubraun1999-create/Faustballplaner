/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @core_philosophy This ruleset prioritizes authorization independence and efficient data retrieval. It enforces strict ownership for user-generated content via path-based rules and assumes global data is read-only for most users, with administrative writes handled at the application level.
 * @data_structure The Firestore data is organized into top-level collections for global data (news, matches, players) and user subcollections for private data (forum posts, user profiles, chat statuses). Relationships are maintained through denormalization rather than relying on `get()` calls in rules.
 * @key_security_decisions
 *   - User data and forum posts are secured via path-based ownership under `/users/{userId}`.
 *   - Global data collections are publicly readable but require authentication for writes.
 *   - The ruleset avoids `get()` calls for authorization by denormalizing data.
 *   - No user listing is implemented, avoiding potential information disclosure.
 * @denormalization_for_authorization The `matchId` is denormalized in the `/highlight_reels` collection to allow efficient querying and avoid needing to fetch the `Match` document for authorization.
 * @structural_segregation User-specific data (forum posts) is stored in user subcollections, while global data (news articles, matches, players) resides in top-level collections. This segregation simplifies access control and optimizes query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updating, and deletion to authenticated users.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Public read, authenticated writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updating, and deletion to authenticated users.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Public read, authenticated writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updating, and deletion to authenticated users.
     * @path /players/{playerId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Public read, authenticated writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updating, and deletion to authenticated users.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Public read, authenticated writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list, create, update, delete) - The user who owns the forum post.
     * @deny (get, list, create, update, delete) - Any other user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - The user who owns the document.
     * @deny (get, create, update, delete) - Any other user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

      /**
     * @description Allows anyone to read team categories, but restricts creation, updating, and deletion to authenticated users.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Public read, authenticated writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updating, and deletion to authenticated users.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Public read, authenticated writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read member data, but restricts creation, updating, and deletion to authenticated users.
     * @path /members/{memberId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Public read, authenticated writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

     /**
      * @description Allows anyone to read GroupMember data, but restricts creation, updating, and deletion to authenticated users.
      * @path /group_members/{memberId}
      * @allow (get, list)
      * @allow (create, update, delete) - Authenticated user.
      * @deny (create, update, delete) - Unauthenticated user.
      * @principle Public read, authenticated writes.
      */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

     /**
      * @description Allows anyone to read Poll data, but restricts creation, updating, and deletion to authenticated users.
      * @path /polls/{pollId}
      * @allow (get, list)
      * @allow (create, update, delete) - Authenticated user.
      * @deny (create, update, delete) - Unauthenticated user.
      * @principle Public read, authenticated writes.
      */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to create, update and delete a PollResponse.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

       /**
        * @description Allows anyone to read Event data, but restricts creation, updating, and deletion to authenticated users.
        * @path /events/{eventId}
        * @allow (get, list)
        * @allow (create, update, delete) - Authenticated user.
        * @deny (create, update, delete) - Unauthenticated user.
        * @principle Public read, authenticated writes.
        */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to create, update and delete a ChatMessage.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

       /**
        * @description Allows user to read, create, update and delete UserChatStatus.
        * @path /users/{userId}/chat_status/{roomId}
        *  @allow (get, create, update, delete) - The user who owns the document.
        *  @deny (get, create, update, delete) - Any other user.
        * @principle Enforces document ownership for all operations.
        */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
        allow list: if isOwner(userId);
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}