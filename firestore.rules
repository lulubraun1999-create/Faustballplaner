/**
 * @file Firebase Security Rules for Werkself Hub
 *
 * @description This ruleset enforces a flexible security model for the Werkself Hub application, primarily focusing on allowing public read access to most content while restricting write access.
 *
 * @data_structure
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels.
 * - /users/{userId}: User profiles, accessible only to the authenticated user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * @key_security_decisions
 * - Public Read Access: The news articles, matches, players, and highlight reels collections are publicly readable, facilitating easy access to core application data.
 * - Owner-Only Writes: Write access to user-specific data (e.g., user profiles, forum posts) is restricted to the authenticated user.
 * - No User Listing: Listing users is not permitted to prevent information scraping.
 * - Data Denormalization: The `matchId` is denormalized into the `highlight_reels` collection to allow queries for highlight reels for a specific match without needing to perform joins.
 *
 * @denormalization_for_authorization
 * - Match ID in Highlight Reels: The `matchId` is included in the `highlight_reels` documents to avoid needing to query the `matches` collection to determine access.
 *
 * @structural_segregation
 * - Public vs. Private Content: Public content (news, matches, players, highlight reels) is stored in top-level collections with public read access. Private content (user profiles, forum posts) is stored under the `/users/{userId}` path and secured with owner-only rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User with matching userId can create a post.
     * @allow (get, list, update, delete) User with matching userId can get, list, update, or delete their own post.
     * @deny (create) User with mismatched userId cannot create a post.
     * @deny (get, list, update, delete) User with mismatched userId cannot get, list, update, or delete another user's post.
     * @principle Enforces document ownership and restricts write access to the owner only.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own profile.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their profile.
     * @allow (get, update, delete) User with matching userId can get, update, or delete their own profile.
     * @deny (create) User with mismatched userId cannot create a profile.
     * @deny (get, update, delete) User with mismatched userId cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership and restricts access to the owner only.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false; // Listing users is not allowed.
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
       /**
     * @description Allows anyone to read team member data, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to team member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows anyone to read group member data, but restricts creation, updates, and deletion.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Allows public access to group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}