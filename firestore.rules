rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to news articles for all users.  Write access is denied to all clients and must be handled by the backend.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Public read access for global data, backend-only writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to match data for all users.  Write access is denied to all clients and must be handled by the backend.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Public read access for global data, backend-only writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to player data for all users.  Write access is denied to all clients and must be handled by the backend.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to highlight reels for all users. Write access is denied to all clients and must be handled by the backend.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages forum posts for a specific user. Only the owner can create, read, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get, list: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
     * @allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces strict ownership for user documents. Allows a user to create their own document if the user ID matches the authenticated user's ID.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
     * @allow get: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isSignedIn() && request.auth.uid == userId && resource != null && request.resource.data.id == resource.data.id;
     * @allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
     * @deny list: if true;
     * @principle Enforces document ownership for writes and restricts listing of user documents.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows read-only access to team categories for all users. Write access is denied to all clients and must be handled by the backend.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to team data for all users. Write access is denied to all clients and must be handled by the backend.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to member data for all users. Write access is denied to all clients and must be handled by the backend.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to group member data for all users. Write access is denied to all clients and must be handled by the backend.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to poll data for all users. Write access is denied to all clients and must be handled by the backend.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to event data for all users. Write access is denied to all clients and must be handled by the backend.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data, backend-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Responses to a poll, write access is secured by checking if user is signed in
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @allow list: if isSignedIn();
     * @principle Only signed in users can create, get, update, delete, list poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
      allow list: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data.id == userId;
  }
}