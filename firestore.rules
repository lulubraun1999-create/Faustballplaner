/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and segregation of data.
 * It leverages path-based authorization and denormalization to avoid costly `get()` calls.
 * The default posture is restrictive, with explicit rules for granting access.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly readable news articles. Write access is not granted in these rules.
 * - /matches/{matchId}: Publicly readable match data. Write access is not granted in these rules.
 * - /players/{playerId}: Publicly readable player data. Write access is not granted in these rules.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels. Write access is not granted in these rules.
 * - /users/{userId}: User profile information, accessible only to the user themselves.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Global data collections (news_articles, matches, players, highlight_reels) are publicly readable, with the assumption that write access is managed externally (e.g., via a separate admin interface).
 * - User listing is explicitly disallowed for privacy.
 * - All write operations require authentication.
 * - Authorization checks are performed using helper functions for clarity and maintainability.
 *
 * Denormalization for Authorization:
 * - HighlightReel documents contain a denormalized `matchId` field to enable efficient querying of highlight reels for a specific match without requiring a `get()` call to the `matches` collection.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under the `/users/{userId}/forum_posts/{postId}` path, enabling path-based authorization and avoiding the need to mix public and private data within the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to news articles for all users. Write access is not permitted via these rules.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to match data for all users. Write access is not permitted via these rules.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to player data for all users. Write access is not permitted via these rules.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to highlight reels for all users. Write access is not permitted via these rules.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no writes allowed.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false; // User listing is not permitted.
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}