/**
 * @file Firestore Security Rules for Werkself Hub
 * @Core Philosophy: This ruleset prioritizes authorization independence and efficient data retrieval by avoiding get() calls. It enforces a strict user-ownership model for user-generated content and provides public read access to global data.
 * @Data Structure:
 *   - `/news_articles/{newsArticleId}`: Public news articles.
 *   - `/matches/{matchId}`: Public match data.
 *   - `/players/{playerId}`: Public player information.
 *   - `/highlight_reels/{highlightReelId}`: Public highlight reels with denormalized `matchId`.
 *   - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user.
 *   - `/users/{userId}`: User profile data, accessible only to the user.
 *   - `/team_categories/{categoryId}`: Public team categories.
 *   - `/teams/{teamId}`: Public team data.
 *   - `/members/{memberId}`: Public member data.
 *   - `/group_members/{memberId}`: Public group member data.
 * @Key Security Decisions:
 *   - Public read access for news, matches, players, highlight reels, team categories, team data, member data, and group member data.
 *   - Strict ownership model for user profiles and forum posts.
 *   - No user listing is allowed.
 *   - Database-level access control (DBAC) is enforced.
 * @Denormalization for Authorization:  The `matchId` is denormalized into the `highlight_reels` collection to allow queries without needing `get()` calls.
 * @Structural Segregation: User-generated content (forum posts) is stored under `/users/{userId}` to ensure path-based ownership and prevent mixing of public and private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Writes are denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Writes are denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information. Writes are denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Writes are denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts. Only the owner can create, read, update, or delete their posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get: if !isSignedIn() || request.auth.uid != userId;
     * @deny list: if !isSignedIn() || request.auth.uid != userId;
     * @deny update: if !isSignedIn() || request.auth.uid != userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId;
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles. Only the owner can create, read, update, or delete their profile.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get: if !isSignedIn() || request.auth.uid != userId;
     * @deny list: if true;
     * @deny update: if !isSignedIn() || request.auth.uid != userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId;
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Writes are denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data. Writes are denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to member data. Writes are denied.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
     match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group member data. Writes are denied.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}