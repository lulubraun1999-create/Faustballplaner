rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is disallowed.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No user can create, update, or delete news articles through Firestore directly.
     * @principle Grants public read access while restricting write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is disallowed.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No user can create, update, or delete match data through Firestore directly.
     * @principle Grants public read access while restricting write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is disallowed.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @deny (create, update, delete): No user can create, update, or delete player data through Firestore directly.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is disallowed.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No user can create, update, or delete highlight reels through Firestore directly.
     * @principle Grants public read access while restricting write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, list): Any user can read other user docs.
     * @allow (create): A user can create their own document if the userId matches their auth.uid.
     * @allow (update, delete): A user can update/delete their document if the userId matches their auth.uid and the document exists.
     * @deny (create): A user cannot create a document with a userId that doesn't match their auth.uid.
     * @deny (update, delete): A user cannot update/delete a document if the userId doesn't match their auth.uid.
     * @principle Enforces document ownership based on the path.
     */
    match /users/{userId} {
        allow get, list: if true;
        allow create: if request.auth.uid == userId;
        allow update, delete: if request.auth.uid == userId;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list): Any user can read forum posts.
     * @allow (create): A user can create a post under their userId if it matches their auth.uid.
     * @allow (update, delete): A user can update/delete a post under their userId if it matches their auth.uid and the document exists.
     * @deny (create): A user cannot create a post under a userId that doesn't match their auth.uid.
     * @deny (update, delete): A user cannot update/delete a post under a userId that doesn't match their auth.uid.
     * @principle Enforces document ownership based on the path.
     */
    match /users/{userId}/forum_posts/{postId} {
        allow get, list: if true;
        allow create: if request.auth.uid == userId;
        allow update, delete: if request.auth.uid == userId;
    }
  }
}