/**
 * @file Firebase Security Rules for Werkself Hub.
 * @core_philosophy This ruleset prioritizes security and data ownership.
 *   It enforces strict user-based access control where appropriate and
 *   assumes a public-read, owner-write model for certain collections.
 *   It uses path-based authorization and denormalization for efficiency.
 * @data_structure The Firestore database is organized into top-level
 *   collections for global data (news, matches, players) and user-specific
 *   subcollections under `/users/{userId}` for private data.
 * @key_security_decisions
 *   - User data is secured using path-based ownership (/users/{userId}).
 *   - Public read access is granted for collections like news articles, matches,
 *     and players. Administrative access is assumed to be handled at the
 *     application level.
 *   - User listing is implicitly denied by the structure.
 * @denormalization_for_authorization Denormalization is used to avoid complex
 *   `get()` calls in security rules. For example, `highlight_reels` includes
 *   the `matchId` to allow direct querying without fetching match data.
 * @structural_segregation Public and private data are stored in separate collections
 *   to simplify access control. For instance, public news articles are stored in
 *   `/news_articles`, while private user data resides under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts creation, updates, and deletion to authenticated users.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - Any user can read news articles.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete news articles.
     * @principle Allows public read with authenticated user writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to matches, but restricts creation, updates, and deletion to authenticated users.
     * @path /matches/{matchId}
     * @allow (get, list) - Any user can read match data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete match data.
     * @principle Allows public read with authenticated user writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to player information, but restricts creation, updates, and deletion to authenticated users.
     * @path /players/{playerId}
     * @allow (get, list) - Any user can read player data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete player data.
     * @principle Allows public read with authenticated user writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to highlight reels, but restricts creation, updates, and deletion to authenticated users.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) - Any user can read highlight reel data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete highlight reel data.
     * @principle Allows public read with authenticated user writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces ownership for forum posts under a user's path.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) - A user can create a forum post under their own user ID.
     * @allow (get, list, update, delete) - A user can only read, update, or delete their own forum posts.
     * @deny (create) - A user cannot create a forum post under another user's ID.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete forum posts belonging to another user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own user document if the user ID matches the authenticated user's ID.
     * @allow (get, update, delete) - A user can only read, update, or delete their own user document.
     * @deny (create) - A user cannot create a user document for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete user documents belonging to another user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

     /**
      * @description Allows public read access to team categories, but restricts creation, updates, and deletion to authenticated users.
      * @path /team_categories/{categoryId}
      * @allow (get, list) - Any user can read team category data.
      * @deny (create, update, delete) - Only authenticated users can create, update, or delete team category data.
      * @principle Allows public read with authenticated user writes.
      */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to teams, but restricts creation, updates, and deletion to authenticated users.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete team data.
     * @principle Allows public read with authenticated user writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to members, but restricts creation, updates, and deletion to authenticated users.
     * @path /members/{memberId}
     * @allow (get, list) - Any user can read member data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

   /**
     * @description Allows public read access to group members, but restricts creation, updates, and deletion to authenticated users.
     * @path /group_members/{memberId}
     * @allow (get, list) - Any user can read group member data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to polls, but restricts creation, updates, and deletion to authenticated users.
     * @path /polls/{pollId}
     * @allow (get, list) - Any user can read poll data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete poll data.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

   /**
     * @description Allows any authenticated user to create a poll response.
     *   Restricts read/write access to only the user who created the response.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create) - Any authenticated user can create a response.
     * @allow (get, list, update, delete) - Only the user who created the response can read/write.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow get, list, update, delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

     /**
      * @description Allows public read access to events, but restricts creation, updates, and deletion to authenticated users.
      * @path /events/{eventId}
      * @allow (get, list) - Any user can read event data.
      * @deny (create, update, delete) - Only authenticated users can create, update, or delete event data.
      */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows public read access to event overrides, but restricts creation, updates, and deletion to authenticated users.
      * @path /event_overrides/{overrideId}
      * @allow (get, list) - Any user can read event override data.
      * @deny (create, update, delete) - Only authenticated users can create, update, or delete event override data.
      */
    match /event_overrides/{overrideId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
      * @description Allows public read access to event responses, but restricts creation, updates, and deletion to authenticated users.
      * @path /event_responses/{responseId}
      * @allow (get, list) - Any user can read event response data.
      * @deny (create, update, delete) - Only authenticated users can create, update, or delete event response data.
      */
    match /event_responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows any authenticated user to create a chat message.
      *   No restrictions on reading chat messages (publicly readable).
      * @path /chat_rooms/{roomId}/messages/{messageId}
      * @allow (create) - Any authenticated user can create a chat message.
      * @allow (get, list) - Any user can read chat messages.
      * @deny (update, delete) - No one can update or delete chat messages.
      */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get, list: if true;
      allow update, delete: if false;
    }

    /**
     * @description Enforces ownership for user chat status documents.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create, get, update, delete) - A user can only read, update, or delete their own chat status documents.
     * @deny (create, get, update, delete) - A user cannot read, update, or delete chat status documents belonging to another user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Allows public read access to locations, but restricts creation, updates, and deletion to authenticated users.
      * @path /locations/{locationId}
      * @allow (get, list) - Any user can read location data.
      * @deny (create, update, delete) - Only authenticated users can create, update, or delete location data.
      */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows public read access to event titles, but restricts creation, updates, and deletion to authenticated users.
      * @path /event_titles/{eventTitleId}
      * @allow (get, list) - Any user can read event title data.
      * @deny (create, update, delete) - Only authenticated users can create, update, or delete event title data.
      */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Helper function to determine if the request is from an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to determine if the request is from the owner of the resource.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the request is from the owner of the resource and it exists.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}