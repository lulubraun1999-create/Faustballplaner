/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It leverages path-based authorization and denormalization to avoid costly `get()` calls and ensure efficient rule evaluation.
 * Data validation is limited to essential fields for maintaining relational integrity and authorization.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels (with denormalized `matchId`).
 * - `/users/{userId}`: Private user profiles.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user.
 * - `/team_categories/{categoryId}`: Public team categories.
 * - `/teams/{teamId}`: Public teams.
 * - `/members/{memberId}`: Public data for members.
 * - `/group_members/{memberId}`: Public, lightweight member data.
 * - `/polls/{pollId}`: Public polls.
 * - `/polls/{pollId}/responses/{responseId}`: User responses to polls.
 * - `/events/{eventId}`: Public events.
 * - `/events/{eventId}/responses/{responseId}`: User RSVP responses to events.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within a room.
 * - `/users/{userId}/chat_status/{roomId}`: User's chat status for a room.
 * - `/locations/{locationId}`: Public event locations.
 *
 * Key Security Decisions:
 * - Public data collections (`news_articles`, `matches`, `players`, `highlight_reels`, `team_categories`, `teams`, `members`, `group_members`, `polls`, `events`, `locations`) are readable by everyone. Writes are generally disallowed and would require additional role-based checks if needed.
 * - User-owned data under `/users/{userId}` is strictly controlled using the `isOwner()` function.
 * - Data consistency is enforced on `create` operations to ensure that the document's internal `id` field matches the `userId` in the path.
 * - Updates to the ownership field (`id`) are disallowed to prevent unauthorized data modification.
 * - Listing of user documents (`/users`) is disallowed.
 *
 * Denormalization for Authorization:
 * - `highlight_reels` include the `matchId` to allow filtering without requiring `get()` calls to the `matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and it exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No user can create, update, or delete news articles.  Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No user can create, update, or delete match data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for players.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @deny (create, update, delete): No user can create, update, or delete player data.  Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reel data.
     * @deny (create, update, delete): No user can create, update, or delete highlight reel data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for forum posts, nested under a user's profile.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list): Only the owner can read or list their own forum posts.
     * @allow (create): Only the owner can create forum posts under their profile, and the userId in the data must match the path.
     * @allow (update, delete): Only the owner can update or delete their own forum posts, and the document must exist.
     * @deny (create): Cannot create a forum post for another user.
     * @deny (update): Cannot update the userId after creation.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get): Only the owner can read their own profile.
     * @allow (create): Only the user can create their own profile (self-registration), and the userId in the data must match the path.
     * @allow (update): Only the owner can update their own profile, and the id must not change.
     * @allow (delete): Only the owner can delete their own profile, and the document must exist.
     * @deny (list): User listing is disallowed for privacy.
     * @principle Enforces strict document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team category data.
     * @deny (create, update, delete): No user can create, update, or delete team category data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @deny (create, update, delete): No user can create, update, or delete team data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for members.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @deny (create, update, delete): No user can create, update, or delete member data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for group members (lightweight user objects).
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @deny (create, update, delete): No user can create, update, or delete group member data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Rules for polls.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read poll data.
     * @deny (create, update, delete): No user can create, update, or delete poll data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get: if true;
        allow list: if true; // Assuming listing responses is okay for now
        allow create: if isSignedIn(); // Any signed-in user can create a response
        allow update: if false; // No updates allowed on responses
        allow delete: if false; // No deletes allowed on responses
    }

    /**
     * @description Rules for events.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event data.
     * @deny (create, update, delete): No user can create, update, or delete event data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for event responses (RSVPs).
     * @path /events/{eventId}/responses/{responseId}
     */
    match /events/{eventId}/responses/{responseId} {
        allow get: if true;
        allow list: if true; // Assuming listing responses is okay for now
        allow create: if isSignedIn(); // Any signed-in user can create a response
        allow update: if false; // No updates allowed on responses
        allow delete: if false; // No deletes allowed on responses
    }

    /**
     * @description Rules for chat messages within a room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get: if true;
        allow list: if true; // Assuming listing messages is okay for now
        allow create: if isSignedIn(); // Any signed-in user can create a message
        allow update: if false; // No updates allowed on messages
        allow delete: if false; // No deletes allowed on messages
    }

    /**
     * @description Rules for tracking user chat status.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Rules for locations.
     * @path /locations/{locationId}
     * @allow (get, list): Any user can read location data.
     * @deny (create, update, delete): No user can create, update, or delete location data. Administrative access would be handled via backend.
     * @principle Public read, admin-only write (hypothetical, not implemented).
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}