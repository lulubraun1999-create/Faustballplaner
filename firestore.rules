/**
 * @file Firestore Security Rules for Werkself Hub
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset prioritizes authorization independence, avoiding `get()` calls
 * by denormalizing data where necessary. It enforces a strict path-based
 * ownership model for user-generated content and assumes a public-read,
 * admin-write model for global data collections.
 *
 * @Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels with denormalized `matchId`.
 * - `/users/{userId}`: Private user data.
 * - `/users/{userId}/forum_posts/{postId}`: User-owned forum posts.
 * - `/admins/{userId}`: Admin user list. Existence grants admin privileges.
 * - `/team_categories/{categoryId}`: Public team categories.
 * - `/teams/{teamId}`: Public team data.
 * - `/members/{memberId}`: Public member data.
 * - `/group_members/{memberId}`: Public group member data
 * - `/polls/{pollId}`: Public polls.
 * - `/polls/{pollId}/responses/{responseId}`: Public poll responses.
 * - `/events/{eventId}`: Public events.
 * - `/events/{eventId}/responses/{responseId}`: Public event responses
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Public Chat Messages.
 * - `/users/{userId}/chat_status/{roomId}`: Private User Chat Status.
 * - `/locations/{locationId}`: Public location data.
 * - `/event_titles/{eventTitleId}`: Public event title data.
 *
 * @Key Security Decisions:
 * - Public read access to news, matches, players, teams, categories, and highlight reels.
 * - User-owned forum posts under `/users/{userId}`.
 * - Admin privileges granted by presence in the `/admins` collection.
 * - List operations allowed by default for owner-scoped subcollections.
 * - Data shape validation is relaxed to enable rapid prototyping.
 *
 * @Denormalization for Authorization:
 *   - HighlightReel documents include a denormalized `matchId` field to avoid
 *     requiring `get()` calls to the `/matches` collection during authorization.
 *
 * @Structural Segregation:
 *   - User-specific forum posts are stored under the `/users/{userId}/forum_posts`
 *     path to provide path-based authorization and avoid mixing public and
 *     private data in a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all news articles. Write access is denied to regular users.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to news articles while restricting write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to all matches. Write access is denied to regular users.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to match data while restricting write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to all players. Write access is denied to regular users.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to player data while restricting write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to all highlight reels. Write access is denied to regular users.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to highlight reels while restricting write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces path-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces path-based ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      // users/{userId}/chat_status/{roomId}
       allow list: if false;
    }

     /**
      * @description Allows a user to manage their own chat status document.
      * @path /users/{userId}/chat_status/{roomId}
      *   @allow get, list: if isOwner(userId);
      * @allow create: if isOwner(userId);
      * @allow update: if isExistingOwner(userId);
      * @allow delete: if isExistingOwner(userId);
      * @principle Enforces path-based ownership for user documents.
      */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read access to admins. Write access only allowed via backend functions.
     * @path /admins/{userId}
     * @allow get, list: if isAdmin();
     * @deny create, update, delete: if false;
     * @principle Restricts write access to the admin collection.
     */
    match /admins/{userId} {
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to team categories. Write access is denied to regular users.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to team categories while restricting write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to teams. Write access is denied to regular users.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to team data while restricting write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to members. Write access is denied to regular users.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to member data while restricting write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

     /**
      * @description Allows read access to group members. Write access is denied to regular users.
      * @path /group_members/{memberId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Allows public read access to group member data while restricting write access.
      */
    match /group_members/{memberId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to polls. Write access is denied to regular users.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to poll data while restricting write access.
     */
    match /polls/{pollId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

     /**
      * @description Allows read access to poll responses. Write access is denied to regular users.
      * @path /polls/{pollId}/responses/{responseId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Allows public read access to poll response data while restricting write access.
      */
    match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to events. Write access is denied to regular users.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event data while restricting write access.
     */
    match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

     /**
      * @description Allows read access to event responses. Write access is denied to regular users.
      *   @path /events/{eventId}/responses/{responseId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Allows public read access to event response data while restricting write access.
      */
    match /events/{eventId}/responses/{responseId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to chat messages. Write access is denied to regular users.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to chat message data while restricting write access.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

     /**
      * @description Allows read access to locations. Write access is denied to regular users.
      * @path /locations/{locationId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Allows public read access to location data while restricting write access.
      */
    match /locations/{locationId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to event titles. Write access is denied to regular users.
     *  @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to event title data while restricting write access.
     */
    match /event_titles/{eventTitleId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}