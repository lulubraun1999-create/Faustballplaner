/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and segregation of data.
 * Path-based authorization is used extensively to ensure that users can only access their own data.
 * Read access is generally open for global collections (news, matches, players), while write access is restricted.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles.
 * - `/matches/{matchId}`: Publicly readable match data.
 * - `/players/{playerId}`: Publicly readable player information.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels.
 * - `/users/{userId}`: User profile data, accessible only by the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only by that user.
 *
 * Key Security Decisions:
 * - Global collections (news, matches, players, highlight reels) are publicly readable. Write access to these collections is not secured by these rules and should be managed through backend logic or other administrative controls.
 * - User data and forum posts are strictly controlled by path-based ownership.
 * - Listing of user documents (`/users`) is denied to prevent unauthorized access to user data.
 * - No custom claims are used; authorization relies entirely on the authenticated user's UID and path-based ownership.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` documents. This avoids needing to perform a `get()` operation on the `Match` document to authorize access to a highlight reel.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Write access is not controlled by these rules.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read, backend-controlled write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write access is not controlled by these rules.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read, backend-controlled write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Write access is not controlled by these rules.
     * @path /players/{playerId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read, backend-controlled write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write access is not controlled by these rules.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read, backend-controlled write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user profiles to the owning user.
     * @path /users/{userId}
     * @allow (get): if isOwner(userId);
     * @allow (create): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @allow (list): if false;
     * @deny   (create, update, delete): if !isSignedIn();
     * @deny   (get, list): if !isSignedIn();
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to forum posts to the owning user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list, create, update, delete): if isOwner(userId);
     * @deny   (create, update, delete): if !isSignedIn();
     * @deny   (get, list): if !isSignedIn();
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}