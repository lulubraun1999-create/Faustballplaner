/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @Core Philosophy: This ruleset prioritizes security and data ownership,
 * enforcing strict access control based on user authentication and path-based
 * authorization. It avoids complex `get()` calls by denormalizing data where
 * necessary to ensure efficient and secure rule evaluation.
 *
 * @Data Structure:
 * - User-specific data (profile, forum posts, chat status) is nested under
 *   `/users/{userId}`.
 * - Public data (news articles, matches, players, highlight reels, teams,
 *   locations, event titles) is stored in top-level collections.
 * - Subcollections are used to structure one-to-many relationships, such as forum posts of a user.
 *
 * @Key Security Decisions:
 * - User listing is disallowed by default.
 * - Public collections are readable by everyone, but writes are restricted to
 *   authenticated users with proper authorization (if ownership field exists).
 * - Relational integrity is enforced for critical ownership fields on create
 *   and update operations.
 * - Data validation is minimized for rapid prototyping. Focus is on
 *   authorization and relational integrity checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User with matching userId can create a post.
     * @allow (get, list) User with matching userId can read their posts.
     * @allow (update) User with matching userId can update their own post.
     * @allow (delete) User with matching userId can delete their own post.
     * @deny (create) User tries to create a post for another user.
     * @deny (update) User tries to update another user's post.
     * @deny (delete) User tries to delete another user's post.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create) User can create their own user document.
     * @allow (get) User can read their own user document.
     * @allow (update) User can update their own user document.
     * @allow (delete) User can delete their own user document.
     * @deny (create) User tries to create a user document for another user.
     * @deny (update) User tries to update another user's document.
     * @deny (delete) User tries to delete another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read member data, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data, but restricts creation, updates, and deletion.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows anyone to read poll data, but restricts creation, updates, and deletion.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /polls/{pollId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll response data, but restricts creation, updates, and deletion.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create) User can create their own poll response.
     * @allow (get) Anyone can get a poll response.
     * @allow (list) Anyone can list poll responses.
     * @deny (update)
     * @deny (delete)
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

     /**
     * @description Allows anyone to read event data, but restricts creation, updates, and deletion.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /events/{eventId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event response data, but restricts creation, updates, and deletion.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (create) User can create their own event response.
     * @allow (get) Anyone can get an event response.
     * @allow (list) Anyone can list event responses.
     * @deny (update)
     * @deny (delete)
     */
     match /events/{eventId}/responses/{responseId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

     /**
     * @description Allows anyone to read chat messages, but restricts creation, updates, and deletion.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (create) Authenticated users can create chat messages.
     * @allow (get) Anyone can get a chat message.
     * @allow (list) Anyone can list chat messages.
     * @deny (update)
     * @deny (delete)
     */
     match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create) User can create their own chat status.
     * @allow (get) User can read their own chat status.
     * @allow (update) User can update their own chat status.
     * @allow (delete) User can delete their own chat status.
     * @deny (create) User tries to create a chat status for another user.
     * @deny (update) User tries to update another user's chat status.
     * @deny (delete) User tries to delete another user's chat status.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
        allow list: if isOwner(userId);
    }

     /**
     * @description Allows anyone to read location data, but restricts creation, updates, and deletion.
     * @path /locations/{locationId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /locations/{locationId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

     /**
     * @description Allows anyone to read event title data, but restricts creation, updates, and deletion.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list)
     * @deny (create)
     * @deny (update)
     * @deny (delete)
     * @principle Public read, restricted write.
     */
    match /event_titles/{eventTitleId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }


    /**
     * @description Checks if the current user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner, false otherwise.
     * @example isOwner('someUserId') will return true if request.auth.uid == 'someUserId'.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}