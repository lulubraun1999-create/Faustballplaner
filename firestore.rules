/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user identity and role.
 * It uses path-based authorization where possible and avoids complex queries in rules.
 * Admin privileges are granted by the existence of a document in the `/admins` collection.
 * Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - `/news_articles`: Public news articles.
 * - `/matches`: Public match data.
 * - `/players`: Public player information.
 * - `/highlight_reels`: Public highlight reels with denormalized `matchId`.
 * - `/users/{userId}`: Private user data, accessible only to the user.
 * - `/users/{userId}/forum_posts`: Forum posts created by the user, accessible only to the user.
 * - `/admins`: Admin user list. Presence of a document grants admin privileges.
 * - `/team_categories`: Public team categories.
 * - `/teams`: Public team data.
 * - `/members`: Public member data.
 * - `/group_members`: Public group member data.
 * - `/polls`: Public poll data.
 * - `/polls/{pollId}/responses`: Poll responses for a specific poll.
 * - `/events`: Public events data.
 * - `/events/{eventId}/responses`: Event responses for a specific event.
 * - `/chat_rooms/{roomId}/messages`: Chat messages within a specific chat room.
 * - `/users/{userId}/chat_status`: User-specific chat status.
 * - `/locations`: Public locations data.
 * - `/event_titles`: Public event titles data.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Data validation is minimal to facilitate rapid iteration.
 * - Ownership is enforced using path-based rules where possible.
 * - Admin rights are determined by the existence of a document in the `/admins` collection.
 *
 * Denormalization for Authorization:
 * - HighlightReels denormalize the `matchId` to allow for simple queries without requiring `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to news articles and restricts write access.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to match data and restricts write access.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to player data and restricts write access.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to highlight reels and restricts write access.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to a user's forum posts to the owner.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get, list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId) || isTrainer() || isAdmin();
     * @principle Enforces user-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId) || isTrainer() || isAdmin();
    }

    /**
     * @description Restricts access to a user's document to the owner.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces user-based ownership for user documents.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin rights based on the existence of a document in this collection.
     * @path /admins/{userId}
     * @allow get: if isAdmin();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Admin rights are granted by document presence in this collection.
     */
    match /admins/{userId} {
      allow get: if isAdmin();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read access to team categories and restricts write access.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to team data and restricts write access.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to member data and restricts write access.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to group member data and restricts write access.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to polls and restricts write access.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

     /**
      * @description Allows authenticated users to create poll responses and restricts other operations.
      * @path /polls/{pollId}/responses/{responseId}
      * @allow create: if isSignedIn();
      * @allow get: if true;
      * @allow list: if true;
      * @deny update, delete: if !isAdmin();
      * @principle Allows authenticated users to create responses, restricts writes to admins only.
      */
    match /polls/{pollId}/responses/{responseId} {
        allow create: if isSignedIn();
        allow get, list: if true;
        allow update, delete: if isAdmin();
    }

   /**
     * @description Grants read access to events and restricts write access.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create event responses and restricts other operations.
     * @path /events/{eventId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get: if true;
     * @allow list: if true;
     * @deny update, delete: if !isAdmin();
     * @principle Allows authenticated users to create responses, restricts writes to admins only.
     */
    match /events/{eventId}/responses/{responseId} {
        allow create: if isSignedIn();
        allow get, list: if true;
        allow update, delete: if isAdmin();
    }

     /**
      * @description Grants read and create access to chat messages, restricts update and delete operations.
      * @path /chat_rooms/{roomId}/messages/{messageId}
      * @allow get, list: if true;
      * @allow create: if isSignedIn();
      * @deny update, delete: if !isAdmin();
      * @principle Allows any signed in user to post messages and admins can do anything
      */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to a user's chat status to the owner.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get, create, update: if isOwner(userId);
     * @deny delete: if !isAdmin();
     * @principle Enforces user-based ownership for chat status.
     */
     match /users/{userId}/chat_status/{roomId} {
        allow get, create, update: if isOwner(userId);
        allow delete: if isAdmin();
    }

    /**
     * @description Grants read access to locations and restricts write access.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins only.
     */
    match /locations/{locationId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read access to event titles and restricts write access.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @allow delete: if isAdmin() || isTrainer();
     * @deny create, update: if !isAdmin();
     * @principle Allows public read access, restricts writes to admins or trainers only.
     */
     match /event_titles/{eventTitleId} {
        allow get, list: if true;
        allow create, update: if isAdmin();
        allow delete: if isAdmin() || isTrainer();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

      function isTrainer() {
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == "trainer";
    }
  }
}