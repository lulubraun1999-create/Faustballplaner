/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and allows public read access to global data collections.  Write access to
 * global data is implicitly restricted and must be managed via backend processes.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Global data (news, matches, players) resides in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Global data collections are publicly readable.
 * - Write access to global data is not directly controlled by rules and should be handled via backend.
 * - Polls and Events can be created for specific Teams, and this is validated using the targetTeamIds field.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced through path-based rules (e.g., `/users/{userId}/forum_posts/{postId}`).
 * - HighlightReel documents denormalize the `matchId` to avoid `get()` calls to the `/matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to match data.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to player data.
     * @path /players/{playerId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages forum posts for a specific user. Only the owner can create, read, update, or delete.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow (get, list): if isOwner(userId);
     * @allow (update): if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow (delete): if isSignedIn() && isExistingOwner(userId);
     * @deny (create): if !isSignedIn() || !isOwner(userId) || request.resource.data.userId != userId;
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(userId);
     * @deny (get, list): if !isOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user documents. Only the user themselves can create, read, update, or delete their own document.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
     * @allow (get): if isOwner(userId);
     * @allow (update): if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow (delete): if isSignedIn() && isExistingOwner(userId);
     * @allow list: if false;
     * @deny (create): if !isSignedIn() || !isOwner(userId) || request.resource.data.id != userId;
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(userId);
     * @deny (get): if !isOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows read-only access to team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to teams.
     * @path /teams/{teamId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to members.
     * @path /members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for members.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to group members.
     * @path /group_members/{memberId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for group members.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to polls.  Write operations are open and must be implemented in Backend.
     * @path /polls/{pollId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false; // TODO: Implement backend validation
     * @principle Allows global read access to polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement backend validation
    }

    /**
     * @description Allows a user to create a response to a poll, and only read their own responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow (get): if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow (list): if false;
     * @deny (update, delete): if true;
     * @principle Enforces that only the authenticated user can create/read their own responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow list: if false;
      allow update, delete: if false;
    }

   /**
     * @description Allows read access to Events.  Write operations are open and must be implemented in Backend.
     * @path /events/{eventId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false; // TODO: Implement backend validation
     * @principle Allows global read access to events.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement backend validation
    }

    /**
     * @description Allows any authenticated user to create chat messages in a room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (create): if isSignedIn() && request.resource.data.roomId == roomId && request.resource.data.userId == request.auth.uid;
     * @allow (get, list): if true;
     * @deny (update, delete): if true;
     * @principle Allows creation of chat messages, but no modification or deletion.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn() && request.resource.data.roomId == roomId && request.resource.data.userId == request.auth.uid;
      allow get, list: if true;
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own chat status for a room.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (get, create, update): if isSignedIn() && isOwner(userId);
     * @allow (delete): if false;
     * @allow list: if false;
     * @principle Only the user can manage their own chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get, create, update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
      allow list: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the resource's user ID.
     * @return {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}