/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * Data is structured to minimize dependencies and avoid complex `get()` calls in rules.
 *
 * Data Structure:
 * - User-specific data (e.g., forum posts, user profiles) is nested under `/users/{userId}`.
 * - Public data (e.g., news articles, matches, players) resides in top-level collections.
 * - Polls and poll responses are stored in `/polls/{pollId}/responses/{responseId}`
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - All write operations require authentication.
 * - Data validation is limited to authorization-critical fields in this prototype.
 *
 * Denormalization for Authorization:
 * - The `matchId` field is denormalized in the `/highlight_reels` collection to avoid costly `get()` calls when querying highlight reels for a specific match.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for managing news articles.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Anyone can read news articles.
     * @allow create: Only authenticated users can create news articles, the author field has to match their user ID
     * @allow update, delete: Only the author of the news article can modify or delete it.
     * @deny create: if request.resource.data.author != request.auth.uid;
     * @deny update, delete: if resource.data.author != request.auth.uid;
     * @principle Public read, owner-only writes; ensures only authors can modify their articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing match data.
     * @path /matches/{matchId}
     * @allow get, list: Anyone can read match data.
     * @allow create: Only authenticated users can create matches.
     * @allow update, delete: Only the creator of the match can modify or delete it.
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes; ensures only authorized users can modify match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing player data.
     * @path /players/{playerId}
     * @allow get, list: Anyone can read player data.
     * @allow create: Only authenticated users can create players.
     * @allow update, delete: Only the creator of the player can modify or delete it.
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes; ensures only authorized users can modify player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Anyone can read highlight reels.
     * @allow create: Only authenticated users can create highlight reels.
     * @allow update, delete: Only the creator of the highlight reel can modify or delete it.
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only writes; ensures only authorized users can modify highlight reel data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing forum posts created by a user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: Only the owner can read/list the forum posts.
     * @allow create: Only the owner can create forum posts. The userId must match the authenticated user.
     * @allow update, delete: Only the owner can modify or delete their forum posts.
     * @deny create: if request.resource.data.userId != request.auth.uid;
     * @deny update, delete: if resource.data.userId != request.auth.uid;
     * @principle Owner-only access; restricts access to a user's own forum posts using path-based ownership.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for managing user profiles.
     * @path /users/{userId}
     * @allow get: Only the owner can read their own profile.
     * @allow create: Only the user themselves can create their profile.  The userId must match the authenticated user.
     * @allow update, delete: Only the owner can modify or delete their profile.
     * @deny create: if request.resource.data.id != request.auth.uid;
     * @deny update: if resource.data.id != request.resource.data.id; // Ensures immutability of the user ID
     * @principle Owner-only access; restricts access to a user's own profile using path-based ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Rules for managing team categories.
     * @path /team_categories/{categoryId}
     * @allow get, list: Anyone can read team categories.
     * @allow create: Only authenticated users can create team categories.
     * @allow update, delete: Only the creator of the team category can modify or delete it.
     * @principle Public read, owner-only writes; ensures only authorized users can modify team category data.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing teams.
     * @path /teams/{teamId}
     * @allow get, list: Anyone can read team data.
     * @allow create: Only authenticated users can create teams.
     * @allow update, delete: Only the creator of the team can modify or delete it.
     * @principle Public read, owner-only writes; ensures only authorized users can modify team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing members.
     * @path /members/{memberId}
     * @allow get, list: Anyone can read member data.
     * @allow create: Only authenticated users can create members.
     * @allow update, delete: Only the creator of the member can modify or delete it.
     * @principle Public read, owner-only writes; ensures only authorized users can modify member data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing group members.
     * @path /group_members/{memberId}
     * @allow get, list: Anyone can read group member data.
     * @allow create: Only authenticated users can create group members.
     * @allow update, delete: Only the creator of the group member can modify or delete it.
     * @principle Public read, owner-only writes; ensures only authorized users can modify group member data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing polls.
     * @path /polls/{pollId}
     * @allow get, list: Anyone can read poll data.
     * @allow create: Only authenticated users can create polls, the createdBy field has to match their user ID
     * @allow update, delete: Only the creator of the poll can modify or delete it.
     * @deny create: if request.resource.data.createdBy != request.auth.uid;
     * @deny update, delete: if resource.data.createdBy != request.auth.uid;
     * @principle Public read, owner-only writes; ensures only authors can modify their polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() ;
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for managing poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: Only the owner can read/list the poll responses.
     * @allow create: Only the owner can create poll responses. The userId must match the authenticated user.
     * @allow update: Not allowed, as poll responses should be immutable.
     * @allow delete: Only the owner can delete their poll response.
     * @deny create: if request.resource.data.userId != request.auth.uid;
     * @deny update: if true;
     * @deny delete: if resource.data.userId != request.auth.uid;
     * @principle Owner-only access; restricts access to a user's own poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.auth.uid);
      allow update: if false;
      allow delete: if isExistingOwner(request.auth.uid);
    }
  }
}