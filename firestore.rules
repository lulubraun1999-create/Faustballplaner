/**
 * @file Firestore Security Rules for Werkself Hub
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset prioritizes authorization independence, leveraging path-based ownership and denormalization to avoid costly `get()` calls.  It assumes administrative privileges are handled at the application level.  Data validation is minimized for rapid prototyping.
 *
 * @Data Structure:
 * - Top-level collections: `/news_articles`, `/matches`, `/players`, `/highlight_reels`, `/team_categories`, `/teams`, `/members`, `/group_members`, `/polls`, `/events`, `/locations`, `/event_titles` (General application data, potentially publicly readable)
 * - User-scoped subcollections: `/users/{userId}/forum_posts/{postId}`, `/users/{userId}`, `/users/{userId}/chat_status/{roomId}` (Private user data)
 * - Poll subcollections: `/polls/{pollId}/responses/{responseId}`
 * - Event subcollections: `/events/{eventId}/responses/{responseId}`
 * - Chat subcollections: `/chat_rooms/{roomId}/messages/{messageId}`
 *
 * @Key Security Decisions:
 * - Public read access is granted to top-level collections for general application data.
 * - User-specific data is strictly controlled using path-based ownership (`isOwner(userId)`).
 * - Listing of user documents is allowed by default, unless explicitly denied in the data model.
 * - No schema validation is performed except for critical authorization fields.
 *
 * @Denormalization for Authorization:
 * - `HighlightReel` documents include a denormalized `matchId` field to enable efficient filtering without requiring `get()` calls to the `matches` collection.
 *
 * @Structural Segregation:
 * - User-generated content (forum posts) is stored under `/users/{userId}/forum_posts/{postId}` to segregate private user data from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to matches. Write access is denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to players. Write access is denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get, list: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
     * @allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
     * @deny create: if !isSignedIn();
     * @deny get, list: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces path-based ownership for user-generated content.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow get: if isSignedIn() && request.auth.uid == userId;
     * @allow list: if false;
     * @allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
     * @allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
     * @deny create: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces path-based ownership for user data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Allows read, create, update, and delete access to admins if they are authenticated.
     * @path /admins/{userId}
     * @allow create: if isSignedIn();
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     */
    match /admins/{userId} {
       allow create: if isSignedIn();
       allow get: if isSignedIn();
       allow list: if isSignedIn();
       allow update: if isSignedIn() && resource != null;
       allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to team categories. Write access is denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams. Write access is denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows public read access to members. Write access is denied.
      * @path /members/{memberId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Public read, no write access.
      */
     match /members/{memberId} {
       allow get, list: if true;
       allow create, update, delete: if false;
     }

     /**
      * @description Allows public read access to group members. Write access is denied.
      * @path /group_members/{memberId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Public read, no write access.
      */
     match /group_members/{memberId} {
       allow get, list: if true;
       allow create, update, delete: if false;
     }

    /**
     * @description Allows public read access to polls. Write access is denied.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create, read, update, and delete poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get, list: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Authenticated users can manage poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to events. Write access is denied.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create, read, update, and delete event responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get, list: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Authenticated users can manage event responses.
     */
    match /events/{eventId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows any authenticated user to create, read, update, and delete chat messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow create: if isSignedIn();
     * @allow get, list: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create: if !isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Authenticated users can manage chat messages.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
      * @description Allows a user to create, read, update, and delete their own chat status.
      * @path /users/{userId}/chat_status/{roomId}
      * @allow create: if isSignedIn() && request.auth.uid == userId;
      * @allow get, list: if isSignedIn() && request.auth.uid == userId;
      * @allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
      * @allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
      * @deny create: if !isSignedIn();
      * @deny get: if !isSignedIn();
      * @deny update: if !isSignedIn();
      * @deny delete: if !isSignedIn();
      * @principle Enforces path-based ownership for user chat status.
      */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Allows public read access to locations. Write access is denied.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event titles. Write access is denied.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, no write access.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}