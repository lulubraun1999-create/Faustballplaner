/**
 * @file Firestore Security Rules for Werkself Hub
 * @version Prototyping
 *
 * @description
 * This ruleset prioritizes secure authorization based on verified user identity and path-based ownership.
 * Data validation is relaxed to enable rapid prototyping.
 *
 * Core Philosophy:
 * Strict user-ownership model where applicable, with public read access for certain global collections.
 * All write operations are protected by authorization checks. No write operation uses `if true;`.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Forum posts are stored within user subcollections at `/users/{userId}/forum_posts/{postId}` to simplify ownership checks.
 * - Global data (news, matches, players, highlight reels, polls, and events) is stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the absence of a top-level `/users` collection listing rule.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Public read access is granted to top-level collections (`/news_articles`, `/matches`, `/players`, `/highlight_reels`, `/team_categories`, `/teams`, `/polls`, `/events`) but writes are not secured, in order to flag the need for an authorId field.
 * - Members and GroupMembers collections are readable by all, but writable by none.
 *
 * Denormalization for Authorization:
 * - The `matchId` field is denormalized into the `HighlightReel` documents to avoid costly `get()` calls when checking permissions.
 *
 * Structural Segregation:
 * - Private user data and public content are stored in separate collections to optimize list operations and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read match data. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read player data. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read highlight reels. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User 'userId' can create a post.
     * @allow (get, list, update, delete) User 'userId' can access their own posts.
     * @deny (create) User 'anotherUserId' cannot create a post for 'userId'.
     * @deny (get, list, update, delete) User 'anotherUserId' cannot access 'userId's posts.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, list, update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own user document.
     * @path /users/{userId}
     * @allow (create) User 'userId' can create their own document.
     * @allow (get, list, update, delete) User 'userId' can access their own document.
     * @deny (create) User 'anotherUserId' cannot create a document for 'userId'.
     * @deny (get, list, update, delete) User 'anotherUserId' cannot access 'userId's document.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree; allows self-creation.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows anyone to read team categories. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read team data. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read team member data.  Writes are not permitted.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for denormalized data; no writes allowed.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group member data.  Writes are not permitted.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for denormalized data; no writes allowed.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read poll data. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Responses to a poll. Poll responses are not protected.
     * @path /polls/{pollId}/responses/{responseId}
     */
    match /polls/{pollId}/responses/{responseId} {
          allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read event data. Write permissions are not secured, in order to flag the need for an authorId field.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for global data; owner-only writes (enforced by `isOwner()` on `author` field, which should exist, but is not checked).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    
   /**
     * @description Allows anyone to read messages within a chat room. Write permissions are open for prototyping purposes.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
          allow get, list, create, update, delete: if true;
    }

    /**
     * @description Tracks the last time a user viewed a chat room.  User can only write to their own record.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
        allow get, list, create, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}