/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and segregation of data.
 * It assumes a model where global data (news, matches, players) is primarily read-only,
 * while user-generated content and private data are secured through path-based ownership.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels (with denormalized matchId).
 * - `/users/{userId}`: Private user profiles.
 * - `/users/{userId}/forum_posts/{postId}`: User-owned forum posts.
 *
 * Key Security Decisions:
 * - Global data (news, matches, players, highlight reels) is publicly readable. Write
 *   access is not explicitly governed by rules, implying administrative control at the
 *   application level.
 * - User data and forum posts are strictly controlled by path-based ownership. Only the
 *   authenticated user can access their own data.
 * - Listing of user documents (`/users`) is disallowed to prevent enumeration.
 *
 * Denormalization for Authorization:
 * - HighlightReels denormalize the `matchId` to avoid requiring `get()` calls to the
 *   `/matches` collection for authorization.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under `/users/{userId}/forum_posts/{postId}` to
 *   segregate private user data from potentially public data and to easily enforce
 *   ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is not governed by rules and assumes administrative control at the application level.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to news articles, but restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is not governed by rules and assumes administrative control at the application level.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to match data, but restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information. Write access is not governed by rules and assumes administrative control at the application level.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to player information, but restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is not governed by rules and assumes administrative control at the application level.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to highlight reels, but restricts write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces strict ownership for forum posts. Only the authenticated user can create, read, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
     * @allow get, list: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.userId == userId;
     * @allow delete: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.userId == userId;
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get, list: if !isSignedIn() || request.auth.uid != userId;
     * @deny update: if !isSignedIn() || request.auth.uid != userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId;
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.userId == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.userId == userId;
    }

    /**
     * @description Enforces strict ownership for user documents. Only the authenticated user can create, read, update, or delete their own document.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
     * @allow get: if isSignedIn() && request.auth.uid == userId;
     * @allow list: if false;
     * @allow update: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.id == userId;
     * @allow delete: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.id == userId;
     * @deny create: if !isSignedIn() || request.auth.uid != userId;
     * @deny get: if !isSignedIn() || request.auth.uid != userId;
     * @deny list: if true;
     * @deny update: if !isSignedIn() || request.auth.uid != userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId;
     * @principle Enforces document ownership for all operations.  Disallows listing of user documents.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow update: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.id == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId && resource != null && resource.data.id == userId;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}