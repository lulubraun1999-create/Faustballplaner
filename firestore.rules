/**
 * @fileOverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on path-based ownership and clear separation of public and private data.
 * It avoids complex `get()` calls in rules to optimize performance and prevent potential security holes.  All authorization relies on the `request.auth` object, and does not require custom claims.
 *
 * Data Structure:
 * - Global data (news, matches, players, highlight reels, locations, and event titles) resides in top-level collections.
 * - User-specific data (forum posts, user profiles, chat status) is nested under `/users/{userId}`.
 * - Team-related data (categories, teams, members) resides in top-level collections.
 * - Polls are stored in a top-level collection `/polls/{pollId}`, with responses in a subcollection.
 * - Events are stored in a top-level collection `/events/{eventId}`, with responses in a subcollection.
 * - Chat messages are stored in a subcollection under `/chat_rooms/{roomId}`.
 *
 * Key Security Decisions:
 * - Global data (news, matches, players, highlight reels, teams, team categories, locations, event titles, polls, and events) is readable by all authenticated users, but write access is not granted in these rules (assumed to be handled by backend).
 * - Forum posts are owned by the user and stored under their profile.
 * - User profiles are only accessible to the respective user.
 * - The `list` operation is generally allowed for user-owned subcollections, but not for top-level collections containing potentially sensitive data.
 * - Schema validation is relaxed in prototyping mode to facilitate rapid iteration, focusing only on authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - The `forum_posts` subcollection is located under `/users/{userId}` to enable path-based ownership checks, eliminating the need for `get()` calls to determine ownership.
 * - Highlight Reels denormalize `matchId` into the document to avoid needing to query based on parent match document data.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}` for clear access control separation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return (isOwner(userId) && resource != null);
    }

    /**
     * @description Rules for the /news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Authenticated user can read any news article.
     * @deny (create, update, delete) No user can create, update, or delete news articles through the client.
     * @principle Public read, owner-only writes (backend).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /matches collection.
     * @path /matches/{matchId}
     * @allow (get, list) Authenticated user can read any match.
     * @deny (create, update, delete) No user can create, update, or delete matches through the client.
     * @principle Public read, owner-only writes (backend).
     */
    match /matches/{matchId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /players collection.
     * @path /players/{playerId}
     * @allow (get, list) Authenticated user can read any player.
     * @deny (create, update, delete) No user can create, update, or delete players through the client.
     * @principle Public read, owner-only writes (backend).
     */
    match /players/{playerId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /highlight_reels collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) Authenticated user can read any highlight reel.
     * @deny (create, update, delete) No user can create, update, or delete highlight reels through the client.
     * @principle Public read, owner-only writes (backend).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/forum_posts/{postId} collection.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User can create a forum post under their own user ID.
     * @allow (get, list, update, delete) User can only access, update, or delete their own forum posts.
     * @deny (create, update, delete) User cannot create, update, or delete forum posts under another user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User can create their own user document.
     * @allow (get, update, delete) User can only access, update, or delete their own user document.
     * @deny (list) Listing users is not allowed.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /team_categories collection.
     * @path /team_categories/{categoryId}
     * @allow (get, list) Any signed-in user can read the team categories.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read, owner-only writes (backend).
     */
    match /team_categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (get, list) Any signed-in user can read the teams.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read, owner-only writes (backend).
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /members collection.
     * @path /members/{memberId}
     * @allow (get, list) Any signed-in user can read the members.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read, owner-only writes (backend).
     */
     match /members/{memberId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /group_members collection.
     * @path /group_members/{memberId}
     * @allow (get, list) Any signed-in user can read the group members.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read, owner-only writes (backend).
     */
    match /group_members/{memberId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /polls collection.
     * @path /polls/{pollId}
     * @allow (get, list) Any signed-in user can read any poll.
     * @deny (create, update, delete) No user can create, update, or delete polls through the client.
     * @principle Public read, owner-only writes (backend).
     */
    match /polls/{pollId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /polls/{pollId}/responses/{responseId} collection.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create) User can create a poll response.
     * @allow (get) User can get a poll response.
     * @deny (list) Prevent listing all responses to a poll for privacy reasons.
     * @allow (update, delete) No user can update or delete poll responses through the client.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

     /**
     * @description Rules for the /events collection.
     * @path /events/{eventId}
     * @allow (get, list) Any signed-in user can read any event.
     * @deny (create, update, delete) No user can create, update, or delete events through the client.
     * @principle Public read, owner-only writes (backend).
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /events/{eventId}/responses/{responseId} collection.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (create) User can create a event response.
     * @allow (get) User can get a event response.
     * @deny (list) Prevent listing all responses to a event for privacy reasons.
     * @allow (update, delete) No user can update or delete event responses through the client.
     */
     match /events/{eventId}/responses/{responseId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /chat_rooms/{roomId}/messages/{messageId} collection.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list, create) Any signed-in user can read messages and create new messages.
     * @deny (update, delete) No user can update or delete messages through the client.
     * @principle Public read and create, owner-only update and delete (backend).
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list, create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/chat_status/{roomId} collection.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (get, create, update) User can access, create, and update their own chat status.
     * @deny (list, delete) User cannot list or delete chat statuses.
     * @principle Restricts access to a user's own chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /locations collection.
     * @path /locations/{locationId}
     * @allow (get, list) Any signed-in user can read the locations.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read, owner-only writes (backend).
     */
    match /locations/{locationId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /event_titles collection.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list) Any signed-in user can read the event titles.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read, owner-only writes (backend).
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}