/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on path-based ownership and explicit authorization. It avoids complex `get()` calls by denormalizing authorization-relevant data directly into the documents. This approach ensures both strong security and efficient rule execution.
 *
 * Data Structure:
 * - User-specific data (profile, forum posts) is nested under `/users/{userId}`.
 * - Global data (news articles, matches, players) resides in top-level collections like `/news_articles`, `/matches`, and `/players`.
 *
 * Key Security Decisions:
 * - Listing the `/users` collection is denied to prevent user enumeration.
 * - Global collections are publicly readable, but write access is implicitly denied (can be configured at the application level with appropriate ownership checks).
 * - Path-based ownership is used for user-generated content to simplify security rules.
 *
 * Denormalization for Authorization:
 * - HighlightReel documents include a denormalized `matchId` to avoid needing to fetch the related Match document for authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): No one can directly create/modify news articles through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /matches collection.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @allow (create, update, delete): No one can directly create/modify matches through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /players collection.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @allow (create, update, delete): No one can directly create/modify players through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /highlight_reels collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reel data.
     * @allow (create, update, delete): No one can directly create/modify highlight reels through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /users/{userId}/forum_posts collection.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): An authenticated user can create a forum post under their own user ID.
     * @allow (get, list, update, delete): Only the owner of the forum post can read, update, or delete it.
     * @deny (create): An authenticated user cannot create a forum post under another user's ID.
     * @deny (get, list, update, delete): A non-owner cannot read, update, or delete another user's forum post.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create): An authenticated user can create their own user document (self-registration).
     * @allow (get, update, delete): Only the owner of the user document can read, update, or delete it.
     * @deny (list): No one can list all user documents.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false; // Prevent user enumeration
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /team_categories collection.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team category data.
     * @allow (create, update, delete): No one can directly create/modify team categories through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @allow (create, update, delete): No one can directly create/modify teams through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /members collection.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @allow (create, update, delete): No one can directly create/modify members through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /group_members collection.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @allow (create, update, delete): No one can directly create/modify group members through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     * @principle Public read, owner-only writes (enforced externally).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /polls collection.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read poll data.
     * @allow (create, update, delete): No one can directly create/modify polls through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }

    /**
     * @description Rules for the /polls/{pollId}/responses collection.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): An authenticated user can create a response to a poll.
     * @allow (get, list): Any authenticated user can see PollResponses.
     * @allow (update, delete): PollResponses can not be updated or deleted via client.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.pollId == pollId;
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }
       /**
     * @description Rules for the /events collection.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event data.
     * @allow (create, update, delete): No one can directly create/modify events through client-side rules, writes need to be controlled via trusted execution environments like Firebase Functions.
     * @deny (create, update, delete): Any authenticated user or unauthenticated user cannot write to this collection.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes need to be controlled via trusted execution environments like Firebase Functions.
    }
  }
}