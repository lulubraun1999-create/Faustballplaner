/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @core_philosophy This ruleset employs a strict user-ownership model for personal data and a public-read, restricted-write model for global data.  It avoids complex `get()` calls by denormalizing data where necessary to make authorization decisions.
 * @data_structure The Firestore database is organized with user-specific data nested under `/users/{userId}` and global data in top-level collections like `/news_articles`, `/matches`, and `/players`. Forum posts are stored in `/users/{userId}/forum_posts/{postId}` to leverage path-based authorization.
 * @key_security_decisions
 *   - User data under `/users/{userId}` is strictly accessible only to the authenticated user.
 *   - Listing of user documents is disallowed to protect privacy.
 *   - Global data collections (`/news_articles`, `/matches`, `/players`) are publicly readable. Writes to these collections are not secured, implying that administrative access will be handled via a backend.
 *   - The rules do NOT validate the specific schema of the data being written, focusing instead on authorization.
 * @denormalization_for_authorization Forum posts denormalize the user ID into the path (`/users/{userId}/forum_posts/{postId}`) to avoid needing a `get()` call to verify ownership. Highlight reels denormalize `matchId` to allow direct queries.
 * @structural_segregation User-specific data (e.g., forum posts) is stored in private subcollections under `/users/{userId}`, while global data (e.g., news articles) is stored in public top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document based on the userId.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing document.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Rules for the /news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /matches collection.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /players collection.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /highlight_reels collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reel data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/forum_posts collection.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): An authenticated user can create a forum post under their own user ID.
     * @allow (get, list): An authenticated user can read/list their own forum posts.
     * @allow (update, delete): An authenticated user can update/delete their own forum posts.
     * @deny (create): If the userId does not match the authenticated user's ID.
     * @deny (update, delete): If the user is not the owner of the post.
     * @principle Owner-only access to forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create): An authenticated user can create their own user document (self-registration).
     * @allow (get): An authenticated user can read their own user document.
     * @deny (list): Listing all users is not allowed for privacy reasons.
     * @allow (update, delete): An authenticated user can update/delete their own user document.
     * @deny (create): If the userId does not match the authenticated user's ID.
     * @deny (update, delete): If the user is not the owner of the document.
     * @principle Owner-only access to user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /team_categories collection.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team category data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /members collection.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /group_members collection.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Rules for the /polls collection.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read poll data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /polls/{pollId}/responses collection.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list): Any user can read poll response data.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Rules for the /events collection.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event data.
     * @allow (create, update, delete): Trainers or admins can delete events.
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false; // Trainer/Admin can update, but we aren't managing roles so not allowing at this time.
      allow delete: if false; // Trainer/Admin can delete, but we aren't managing roles so not allowing at this time.
    }

     /**
     * @description Rules for the /chat_rooms/{roomId}/messages collection.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list): Any user can read chat messages in a room.
     * @allow (create, update, delete): No client-side writes are allowed (admin only).
     * @deny (create): Always denied since this is admin only write and should be handled via other means.
     * @principle Public read, restricted write (assumed admin-only).
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Rules for the /users/{userId}/chat_status/{roomId} collection.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (get, list): Any user can read their own chat statuses.
     * @allow (create, update, delete): An authenticated user can create/update/delete their own chat status.
     * @deny (create): If the userId does not match the authenticated user's ID.
     * @deny (update, delete): If the user is not the owner of the document.
     * @principle Owner-only access to chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}