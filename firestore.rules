/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit data ownership. It uses path-based authorization where possible and
 * denormalizes data to avoid costly and complex `get()` operations within the
 * rules. The ruleset is designed to prevent unauthorized data access and
 * modification.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles. Write
 *   access is not granted at the rules level.
 * - `/matches/{matchId}`: Publicly readable match data. Write access is not
 *   granted at the rules level.
 * - `/players/{playerId}`: Publicly readable player information. Write access
 *   is not granted at the rules level.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels.
 *   Write access is not granted at the rules level.
 * - `/users/{userId}`: User profile data, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific
 *   user, accessible only to that user.
 * - `/team_categories/{categoryId}`: Publicly readable team categories. Write
 *   access is not granted at the rules level.
 * - `/teams/{teamId}`: Publicly readable team data. Write access is not
 *   granted at the rules level.
 * - `/members/{memberId}`: Publicly readable member data. Write access is not
 *   granted at the rules level.
 * - `/group_members/{memberId}`: Publicly readable group member data. Write access is not
 *   granted at the rules level.
 * - `/polls/{pollId}`: Polls that can be created by authenticated users.
 * - `/polls/{pollId}/responses/{responseId}`: Responses to a specific poll,
 *   accessible to authenticated users.
 *
 * Key Security Decisions:
 * - Public Read-Only Collections: Collections like `/news_articles`,
 *   `/matches`, `/players`, and `/highlight_reels` are publicly readable.
 *   Write access is implicitly denied.
 * - User Ownership: The `/users/{userId}` and
 *   `/users/{userId}/forum_posts/{postId}` paths enforce strict user
 *   ownership.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - Forum posts are stored under the user's ID to avoid `get()` calls to check
 *   ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Write access is not granted.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     *  - A request to read any news article.
     * @deny (create, update, delete)
     *  - Any request to modify or delete a news article.
     * @principle Public read, no writes allowed.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write access is not granted.
     * @path /matches/{matchId}
     * @allow (get, list)
     *  - A request to read any match data.
     * @deny (create, update, delete)
     *  - Any request to modify or delete match data.
     * @principle Public read, no writes allowed.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player information. Write access is not granted.
     * @path /players/{playerId}
     * @allow (get, list)
     *  - A request to read any player information.
     * @deny (create, update, delete)
     *  - Any request to modify or delete player information.
     * @principle Public read, no writes allowed.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write access is not granted.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     *  - A request to read any highlight reel.
     * @deny (create, update, delete)
     *  - Any request to modify or delete highlight reels.
     * @principle Public read, no writes allowed.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own profile.
     * @path /users/{userId}
     * @allow (get, list)
     *  - A request by the user 'user_abc' to read their own profile.
     * @allow (create)
     *  - A request by the user 'user_abc' to create their profile if the document ID matches their user ID.
     * @allow (update)
     *  - A request by the user 'user_abc' to update their profile.
     * @allow (delete)
     *  - A request by the user 'user_abc' to delete their profile.
     * @deny (get, list)
     *  - A request by 'user_xyz' to read the profile of 'user_abc'.
     * @deny (create)
     *  - A request by the user 'user_xyz' to create a profile with document ID 'user_abc'.
     * @deny (update)
     *  - A request by the user 'user_xyz' to update the profile of 'user_abc'.
     * @deny (delete)
     *  - A request by the user 'user_xyz' to delete the profile of 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list)
     *  - A request by the user 'user_abc' to read their own forum post.
     * @allow (create)
     *  - A request by the user 'user_abc' to create a forum post under their user ID.
     * @allow (update)
     *  - A request by the user 'user_abc' to update their own forum post.
     * @allow (delete)
     *  - A request by the user 'user_abc' to delete their own forum post.
     * @deny (get, list)
     *  - A request by 'user_xyz' to read a forum post of 'user_abc'.
     * @deny (create)
     *  - A request by the user 'user_xyz' to create a forum post under user ID 'user_abc'.
     * @deny (update)
     *  - A request by the user 'user_xyz' to update a forum post of 'user_abc'.
     * @deny (delete)
     *  - A request by the user 'user_xyz' to delete a forum post of 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories. Write access is not granted.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     *  - A request to read any team category.
     * @deny (create, update, delete)
     *  - Any request to modify or delete team categories.
     * @principle Public read, no writes allowed.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data. Write access is not granted.
     * @path /teams/{teamId}
     * @allow (get, list)
     *  - A request to read any team data.
     * @deny (create, update, delete)
     *  - Any request to modify or delete team data.
     * @principle Public read, no writes allowed.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Allows anyone to read team members. Write access is not granted.
     * @path /members/{memberId}
     * @allow (get, list)
     *  - A request to read any team member.
     * @deny (create, update, delete)
     *  - Any request to modify or delete team members.
     * @principle Public read, no writes allowed.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

      /**
       * @description Allows anyone to read team members. Write access is not granted.
       * @path /group_members/{memberId}
       * @allow (get, list)
       *  - A request to read any group member.
       * @deny (create, update, delete)
       *  - Any request to modify or delete group members.
       * @principle Public read, no writes allowed.
       */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
         * @description Allows authenticated users to create, read, update, and delete polls.
         * @path /polls/{pollId}
         * @allow (get, list)
         *  - A request to read any poll.
         * @allow (create)
         *  - A request to create a poll if the createdBy field matches the user's ID.
         * @allow (update)
         *  - A request to update a poll if the user is the owner.
         * @allow (delete)
         *  - A request to delete a poll if the user is the owner.
         * @deny (create)
         *  - A request to create a poll if the createdBy field does not match the user's ID.
         * @deny (update)
         *  - A request to update a poll if the user is not the owner.
         * @deny (delete)
         *  - A request to delete a poll if the user is not the owner.
         * @principle Enforces document ownership for writes and requires authentication.
         */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

            /**
             * @description Allows authenticated users to create, read, update, and delete poll responses.
             * @path /polls/{pollId}/responses/{responseId}
             * @allow (get, list)
             *  - A request to read any poll response.
             * @allow (create)
             *  - A request to create a poll response.
             * @allow (update)
             *  - A request to update a poll response.
             * @allow (delete)
             *  - A request to delete a poll response.
             * @principle Requires authentication for all operations.
             */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    // Define helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}