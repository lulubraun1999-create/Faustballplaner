rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles and restricts writes.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to match data and restricts writes.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to player data and restricts writes.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to highlight reels and restricts writes.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Enforces user-ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to team categories and restricts writes.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to team data and restricts writes.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to member data and restricts writes.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

   /**
     * @description Allows public read access to group member data and restricts writes.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to polls and restricts writes.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

     /**
      * @description Allows a user to create, read, update, and delete their own poll responses.
      * @path /polls/{pollId}/responses/{responseId}
      * @allow get: if isOwnerResponse(responseId);
      * @allow list: if false; // Listing responses is not allowed
      * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      * @allow update: if isOwnerResponse(responseId) && request.resource.data.userId == resource.data.userId;
      * @allow delete: if isOwnerResponse(responseId);
      * @principle Enforces document ownership for responses
      */
     match /polls/{pollId}/responses/{responseId} {
        allow get: if isOwnerResponse();
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isOwnerResponse() && request.resource.data.userId == resource.data.userId;
        allow delete: if isOwnerResponse();
    }

   /**
     * @description Allows public read access to events and restricts writes.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
      * @description Allows a user to create, read, update, and delete their own event responses.
      * @path /events/{eventId}/responses/{responseId}
      * @allow get: if isOwnerEventResponse(responseId);
      * @allow list: if false; // Listing responses is not allowed
      * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      * @allow update: if isOwnerEventResponse(responseId) && request.resource.data.userId == resource.data.userId;
      * @allow delete: if isOwnerEventResponse(responseId);
      * @principle Enforces document ownership for responses
      */
    match /events/{eventId}/responses/{responseId} {
        allow get: if isOwnerEventResponse();
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isOwnerEventResponse() && request.resource.data.userId == resource.data.userId;
        allow delete: if isOwnerEventResponse();
    }
    /**
     * @description Allows public read access to chat messages and restricts writes.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Enforces user-ownership for user chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid; // Assuming you want to enforce userId
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to locations and restricts writes.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Helper function to determine if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to determine if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Helper function to determine if the user is the owner of the response document.
     * @param {string} responseId The response ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwnerResponse() {
        return isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Helper function to determine if the user is the owner of the response document and the document exists.
     * @param {string} responseId The response ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingResponseOwner() {
        return isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Helper function to determine if the user is the owner of the event response document.
     * @param {string} responseId The response ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwnerEventResponse() {
        return isSignedIn() && request.auth.uid == resource.data.userId;
    }

     /**
     * @description Helper function to determine if the user is the owner of the event response document and the document exists.
     * @param {string} responseId The response ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingEventResponseOwner() {
        return isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
  }
}