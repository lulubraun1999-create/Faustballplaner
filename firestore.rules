/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and segregation of data.
 * It leverages path-based authorization and data denormalization to avoid costly `get()` calls and ensure efficient rule execution.
 * The rules are designed to be highly secure and maintainable.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles. Write access is not governed by rules.
 * - `/matches/{matchId}`: Publicly readable match data. Write access is not governed by rules.
 * - `/players/{playerId}`: Publicly readable player data. Write access is not governed by rules.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels. Write access is not governed by rules.
 * - `/users/{userId}`: User profile data, accessible only to the user themselves.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Public Read Access: Collections like `news_articles`, `matches`, `players`, and `highlight_reels` are publicly readable, assuming the data within is intended for all users.
 * - Strict Ownership: User data and forum posts are strictly controlled by user ownership, enforced through path-based rules.
 * - No User Listing: Listing all users is not permitted.
 * - Write Access Control: Write operations are generally denied unless explicitly permitted by ownership or other authorization checks.
 *
 * Denormalization for Authorization:
 * - The `HighlightReel` entity includes a denormalized `matchId` field to enable efficient querying of highlight reels for specific matches without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * - User-specific forum posts are stored under the `/users/{userId}/forum_posts/{postId}` path to simplify authorization and avoid the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access not governed by rules.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) User can read any news article.
     * @deny (create, update, delete) No write access.
     * @principle Publicly readable data.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access not governed by rules.
     * @path /matches/{matchId}
     * @allow (get, list) User can read any match data.
     * @deny (create, update, delete) No write access.
     * @principle Publicly readable data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access not governed by rules.
     * @path /players/{playerId}
     * @allow (get, list) User can read any player data.
     * @deny (create, update, delete) No write access.
     * @principle Publicly readable data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access not governed by rules.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) User can read any highlight reel.
     * @deny (create, update, delete) No write access.
     * @principle Publicly readable data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, list) User can read their own user document.
     * @allow (create) User can create their own user document if the userId matches their auth UID.
     * @allow (update) User can update their own user document.
     * @allow (delete) User can delete their own user document if it exists.
     * @deny (get, list) User cannot read another user's profile.
     * @deny (create) User cannot create a user document with a userId that does not match their auth UID.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list) User can read and list their own forum posts.
     * @allow (create) User can create their own forum posts.
     * @allow (update) User can update their own forum posts if the post exists.
     * @allow (delete) User can delete their own forum posts if the post exists.
     * @deny (get, list) User cannot read or list another user's forum posts.
     * @deny (create) User cannot create a forum post under another user's ID.
     * @deny (update) User cannot update another user's forum posts.
     * @deny (delete) User cannot delete another user's forum posts.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}