/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset provides open access to most data, including news articles, matches, and player information,
 * while restricting user-specific data (user profiles and forum posts) to the owning user. This is based
 * on the user request "an was liegt es denn. alle k√∂nnen alles sehen" which implies data should be broadly visible.
 *
 * Data Structure:
 * - News articles: Stored in `/news_articles/{newsArticleId}`.
 * - Matches: Stored in `/matches/{matchId}`.
 * - Players: Stored in `/players/{playerId}`.
 * - Highlight Reels: Stored in `/highlight_reels/{highlightReelId}`.
 * - Forum posts: Stored in `/users/{userId}/forum_posts/{postId}`, nested under user documents.
 * - User profiles: Stored in `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Global data (news, matches, players, highlight reels) is publicly readable.
 * - User profiles and forum posts are strictly owner-only for all operations.
 * - Listing user documents is disallowed to prevent information disclosure.
 * - No data validation is performed in this prototyping phase, except for ownership on create and update
 *   operations in user-owned subcollections.
 *
 * Denormalization for Authorization:
 * - HighlightReels denormalize `matchId` to allow for efficient querying without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles and restricts write access.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No user can create, update, or delete news articles through direct write access.
     * @principle Allows public read access for broad visibility and restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data and restricts write access.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No user can create, update, or delete match data through direct write access.
     * @principle Allows public read access for broad visibility and restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data and restricts write access.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @deny (create, update, delete): No user can create, update, or delete player data through direct write access.
     * @principle Allows public read access for broad visibility and restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels and restricts write access.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No user can create, update, or delete highlight reels through direct write access.
     * @principle Allows public read access for broad visibility and restricts write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user-specific data (forum posts) with path-based ownership.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): Allows a user to create a forum post under their own user ID.
     * @allow (get, list, update, delete): Allows a user to read, list, update, and delete their own forum posts.
     * @deny (create, update, delete): Denies create, update or delete if the user ID does not match the authenticated user.
     * @principle Enforces document ownership for all operations in user-owned subcollections.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user profiles with path-based ownership.
     * @path /users/{userId}
     * @allow (create): Allows a user to create their own user document.
     * @allow (get, update, delete): Allows a user to read, update, and delete their own user document.
     * @deny (list): Listing all users is disallowed to protect user privacy.
     * @deny (create, update, delete): Denies create, update, or delete if the user ID does not match the authenticated user.
     * @principle Enforces strict document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}