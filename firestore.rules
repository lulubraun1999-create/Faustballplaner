/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @core_philosophy This ruleset prioritizes authorization independence and efficient data retrieval. It enforces strict ownership for user-generated content via path-based rules and assumes global data is read-only for most users.
 * @data_structure
 *  - `/news_articles/{newsArticleId}`: Public news articles.
 *  - `/matches/{matchId}`: Public match data.
 *  - `/players/{playerId}`: Public player information.
 *  - `/highlight_reels/{highlightReelId}`: Public highlight reels with denormalized `matchId`.
 *  - `/users/{userId}/forum_posts/{postId}`: Forum posts owned by a specific user.
 *  - `/users/{userId}`: User profile data, accessible only to the user.
 *  - `/team_categories/{categoryId}`: Public team categories.
 *  - `/teams/{teamId}`: Public team data.
 *  - `/members/{memberId}`: Public member data.
 *  - `/group_members/{memberId}`: Public group member data.
 *  - `/polls/{pollId}`: Public polls.
 *  - `/polls/{pollId}/responses/{responseId}`: Poll responses.
 *  - `/events/{eventId}`: Public events.
 *  - `/chat_rooms/{roomId}/messages/{messageId}`: Public chat messages.
 *  - `/users/{userId}/chat_status/{roomId}`: User's last seen status in a chat room.
 * @key_security_decisions
 *  - User listing is implicitly denied.
 *  - Global data (news, matches, players, highlight reels, teams) is publicly readable.
 *  - User-generated content (forum posts) is owned by the user.
 *  - Administrative access for global data is assumed to be controlled at the application level.
 * @denormalization_for_authorization
 *  - Highlight reels denormalize the `matchId` to allow filtering without needing to access the `matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts writing to authenticated users only.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented in full due to missing owner field).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read match data, but restricts writing.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented in full due to missing owner field).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read player data, but restricts writing.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented in full due to missing owner field).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts writing.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented in full due to missing owner field).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User 'userId' can create a post with their ID.
     * @allow (get, list, update, delete) User 'userId' can access or modify their own post.
     * @deny (create) User 'anotherUserId' cannot create a post under 'userId'.
     * @deny (get, list, update, delete) User 'anotherUserId' cannot access or modify 'userId' post.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow read, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create) User 'userId' can create their own document.
     * @allow (get, update, delete) User 'userId' can access or modify their own document.
     * @deny (create) User 'anotherUserId' cannot create a document under 'userId'.
     * @deny (get, update, delete) User 'anotherUserId' cannot access or modify 'userId' document.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts writing.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented due to missing owner field).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

    /**
     * @description Allows anyone to read team data, but restricts writing.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented due to missing owner field).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

    /**
     * @description Allows anyone to read member data, but restricts writing.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented due to missing owner field).
     */
    match /members/{memberId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

   /**
     * @description Allows anyone to read group member data, but restricts writing.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     * @principle Public read, owner-only writes (not implemented due to missing owner field).
     */
    match /group_members/{memberId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

    /**
     * @description Allows anyone to read polls, but restricts writing.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

    /**
     * @description Allows anyone to read poll responses, but restricts writing.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

    /**
     * @description Allows anyone to read events, but restricts writing.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

    /**
     * @description Allows anyone to read chat messages, but restricts writing.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list)
     * @deny (create, update, delete) - No write permissions granted in this prototype.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if necessary.
    }

     /**
     * @description Allows a user to read, create, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Checks if the current user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the document, and the document exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}