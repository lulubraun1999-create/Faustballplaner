/**
 * @file Firestore Security Rules for Werkself Hub
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and open access to public data,
 *  such as news, matches, and player information. It leverages path-based authorization and data denormalization
 *  to avoid costly `get()` calls in rules.  It assumes there are no global admin roles.
 * @data_structure Data is organized into top-level collections for global data (news, matches, players, highlight reels)
 *  and user-scoped subcollections for personal data (forum posts under /users/{userId}). User profiles are stored
 *  under /users/{userId}.
 * @key_security_decisions
 *  - Listing of user documents is disallowed for security.
 *  - Public read access is granted for global data collections.
 *  - Write access to global data collections is not secured in the generated rules and marked as TODO, assuming
 *    administrative access will be handled at the application level.
 *  - The absence of custom claims in the data model promotes a DBAC (Database-driven Access Control) approach, where
 *    authorization is primarily managed through database structure and rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to news articles for anyone. Write access is not secured and must be implemented with appropriate ownership checks.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     *
     *
     * @principle Public read access with owner-only writes (TODO: Implement owner validation once the schema is updated with an ownership field).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to match data for anyone. Write access is not secured and must be implemented with appropriate ownership checks.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     *
     *
     * @principle Public read access with owner-only writes (TODO: Implement owner validation once the schema is updated with an ownership field).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to player data for anyone. Write access is not secured and must be implemented with appropriate ownership checks.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     *
     *
     * @principle Public read access with owner-only writes (TODO: Implement owner validation once the schema is updated with an ownership field).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to highlight reels for anyone. Write access is not secured and must be implemented with appropriate ownership checks.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     *
     *
     * @principle Public read access with owner-only writes (TODO: Implement owner validation once the schema is updated with an ownership field).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces ownership for forum posts. Only the user who owns the post can create, update, or delete it.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isSignedIn() || request.auth.uid != userId || resource == null;
     * @deny delete: if !isSignedIn() || request.auth.uid != userId || resource == null;
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user documents. Only the authenticated user can create their own document. Listing all users is denied.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @deny list: if true;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isSignedIn() || request.auth.uid != userId || resource == null;
     *
     * @principle Restricts access to a user's own data tree and enforces document ownership.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}