/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls,
 * leveraging path-based authorization to minimize `get()` calls and maximize performance.
 * Data is segregated to ensure that private user data and public content are handled separately.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public news articles.
 * - /matches/{matchId}: Public match data.
 * - /players/{playerId}: Public player information.
 * - /highlight_reels/{highlightReelId}: Public highlight reels, with denormalized `matchId`.
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Public read access is granted to news articles, matches, players, and highlight reels.
 * - User data and forum posts are strictly owned by the user, enforced through path-based authorization.
 * - Administrative roles or custom claims are not supported in this initial prototyping phase.
 * - Data validation is minimal, focusing on authorization and relational integrity rather than schema enforcement.
 *
 * Denormalization for Authorization:
 * The `highlight_reels` collection denormalizes the `matchId` field to allow for efficient querying without requiring additional reads for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles and restricts write access.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Anyone can read news articles.
     * @allow create, update, delete: No one can create, update, or delete news articles.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows public reads and restricts writes to administrators (out of scope for prototyping).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to match data and restricts write access.
     * @path /matches/{matchId}
     * @allow get, list: Anyone can read match data.
     * @allow create, update, delete: No one can create, update, or delete match data.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows public reads and restricts writes to administrators (out of scope for prototyping).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to player information and restricts write access.
     * @path /players/{playerId}
     * @allow get, list: Anyone can read player information.
     * @allow create, update, delete: No one can create, update, or delete player information.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows public reads and restricts writes to administrators (out of scope for prototyping).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to highlight reels and restricts write access.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Anyone can read highlight reels.
     * @allow create, update, delete: No one can create, update, or delete highlight reels.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows public reads and restricts writes to administrators (out of scope for prototyping).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages forum posts for a specific user.  Allows a user to create, read, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: (create) - Allows a user to create a forum post under their own user ID.
     * @allow get, list: (get, list) - Allows a user to read their own forum posts.
     * @allow update: (update) - Allows a user to update their own existing forum posts.
     * @allow delete: (delete) - Allows a user to delete their own forum posts.
     * @deny create: (create) - Denies creation if the userId in the path does not match the authenticated user's ID.
     * @deny update: (update) - Denies update if the userId in the path does not match the authenticated user's ID.
     * @deny delete: (delete) - Denies deletion if the userId in the path does not match the authenticated user's ID.
     * @principle Enforces user-ownership for forum posts based on path-based authorization.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user profiles. Allows a user to create, read, update, and delete their own profile.
     * @path /users/{userId}
     * @allow create: (create) - Allows a user to create their own profile.
     * @allow get: (get) - Allows a user to read their own profile.
     * @allow update: (update) - Allows a user to update their own profile.
     * @allow delete: (delete) - Allows a user to delete their own profile.
     * @deny create: (create) - Denies creation if the userId in the path does not match the authenticated user's ID.
     * @deny update: (update) - Denies update if the userId in the path does not match the authenticated user's ID.
     * @deny delete: (delete) - Denies deletion if the userId in the path does not match the authenticated user's ID.
     * @principle Enforces user-ownership for profiles based on path-based authorization.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}