/**
 * @fileOverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * (e.g., forum posts) and assumes public read access for global data collections
 * (e.g., news articles, matches, players). Write access to global collections is
 * implicitly restricted and should be managed through backend processes. Data
 * consistency between paths and document content is enforced where applicable.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public news articles.
 * - /matches/{matchId}: Public match data.
 * - /players/{playerId}: Public player information.
 * - /highlight_reels/{highlightReelId}: Public highlight reels with denormalized matchId.
 * - /users/{userId}: Private user data.
 * - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user.
 * - /team_categories/{categoryId}: Public team categories.
 * - /teams/{teamId}: Public team data.
 * - /members/{memberId}: Public member data.
 * - /group_members/{memberId}: Public group member data.
 * - /polls/{pollId}: Public polls
 * - /polls/{pollId}/responses/{responseId}: Poll responses.
 * - /events/{eventId}: Public events data.
 * - /chat_rooms/{roomId}/messages/{messageId}: Chat messages within a room.
 * - /users/{userId}/chat_status/{roomId}: User's chat status in a room.
 *
 * Key Security Decisions:
 * - Public read access is granted to news articles, matches, players, highlight reels,
 *   team categories, teams, members, group members, events, and polls.
 * - User-generated content (forum posts) is stored under user-specific paths for
 *   ownership enforcement.
 * - The rules explicitly deny write access to global collections to regular users.
 * - Data consistency is enforced between the path and document content for user-owned
 *   forum posts and user documents.
 * - List operations are generally allowed for owner-specific collections and
 *   denied where data should not be publicly enumerable.
 * - The data model denormalizes data to avoid costly or impossible `get()` calls in
 *   security rules.
 *
 * Denormalization for Authorization:
 * - Forum posts are stored under `/users/{userId}/forum_posts/{postId}` to avoid
 *   needing to read the user document for authorization.
 * - Highlight reels include the `matchId` to avoid needing to read the match document
 *   for authorization (although in this ruleset, highlight reels are public).
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public data is stored
 *   in top-level collections like `/news_articles` and `/matches`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles.  Write access is denied to regular users.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reading of news articles, while restricting modifications to authorized users.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is denied to regular users.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public access to match information while preventing unauthorized modifications.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Write access is denied to regular users.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public visibility of player information but restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is denied to regular users.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Grants open read access to highlight reels, while preventing unauthorized writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts. Allows a user to create, read, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.resource.data.userId != userId;
     * @principle Enforces document ownership and requires a valid user ID for creation.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user documents. Allows a user to create their own document, and read, update, and delete it.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @principle Enforces document ownership and requires a valid user ID for creation.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Write access is denied to regular users.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Provides open access to team category data, restricting write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams. Write access is denied to regular users.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public viewing of teams while preventing unauthorized changes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows public read access to member data. Write access is denied to regular users.
      * @path /members/{memberId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Public data, admin updates only.
      */
     match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group member data. Write access is denied to regular users.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to polls. Write access is denied to regular users.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public data, admin updates only.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any signed-in user to create a poll response.  Restricts read to signed-in users, and enforces ownership for updates and deletes.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isExistingOwner(request.auth.uid) && resource.data.userId == request.auth.uid;
     * @allow delete: if isExistingOwner(request.auth.uid);
     * @principle Requires a valid user ID and enforces document ownership.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Allows public read access to events. Write access is denied to regular users.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public data, admin updates only.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows read access to chat messages for any signed-in user. Write access is open to any signed-in user.
      * @path /chat_rooms/{roomId}/messages/{messageId}
      * @allow get, list: if isSignedIn();
      * @allow create: if isSignedIn();
      * @deny update, delete: if false;
      */
     match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID of the owner.
     * @return {bool} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId - The user ID of the owner.
     * @return {bool} True if the request is made by the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}