/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and efficient data retrieval by leveraging path-based ownership and avoiding `get()` calls. It enforces a strict user-ownership model for user-generated content and assumes read-only access for most users to global data.
 *
 * Data Structure:
 * The data is organized into top-level collections for global data (news articles, matches, players, highlight reels, teams, polls, events, locations, and event titles) and user-scoped subcollections for user-generated content (forum posts under /users/{userId}, poll responses under /polls/{pollId}, event responses under /events/{eventId}, chat messages under /chat_rooms/{roomId}, chat status under /users/{userId}).
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed as there are no rules allowing it on the `/users` collection.
 * - Global data collections (e.g., `/news_articles`, `/matches`) are publicly readable but require authentication for write operations.
 * - Path-based ownership is enforced for user-generated content under `/users/{userId}`.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized in the `/highlight_reels/{highlightReelId}` collection to avoid `get()` calls for authorization based on match data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles and requires authentication for write access.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to matches and requires authentication for write access.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to players and requires authentication for write access.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to highlight reels and requires authentication for write access.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Enforces ownership for forum posts under a user's path.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && resource.data.userId == userId;
     * @allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
     * @deny create: if !isOwner(userId) || request.resource.data.userId != userId;
     * @deny update, delete: if !isExistingOwner(userId) || resource.data.userId != userId;
     * @principle Enforces document ownership for writes and ensures data consistency between path and document fields.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Enforces ownership for user documents, allowing self-creation.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isExistingOwner(userId) && resource.data.id == userId;
     * @allow delete: if isExistingOwner(userId) && resource.data.id == userId;
     * @deny create: if !isOwner(userId) || request.resource.data.id != userId;
     * @deny update, delete: if !isExistingOwner(userId) || resource.data.id != userId;
     * @principle Enforces document ownership for writes and ensures data consistency between path and document fields. Allows user self-creation.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Grants public read access to team categories and requires authentication for write access.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to teams and requires authentication for write access.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to members and requires authentication for write access.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to group members and requires authentication for write access.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    /**
     * @description Grants public read access to polls and requires authentication for write access.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
     match /polls/{pollId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

    /**
     * @description Allows authenticated users to create, read, update, and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @principle Enforces that users can only manage their own poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    /**
     * @description Grants public read access to events and requires authentication for write access.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
     match /events/{eventId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

    /**
     * @description Allows authenticated users to create, read, update, and delete their own event responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @principle Enforces that users can only manage their own event responses.
     */
    match /events/{eventId}/responses/{responseId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows authenticated users to read and create chat messages in a specific chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Enforces that users can only create chat messages with their own user ID.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and update their own chat status for a specific chat room.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces that users can only manage their own chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Grants public read access to locations and requires authentication for write access.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
     match /locations/{locationId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }
    /**
     * @description Grants public read access to event titles and requires authentication for write access.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public reads, but requires any user to be authenticated for writes.
     */
     match /event_titles/{eventTitleId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}