/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user-generated content and restricts administrative privileges to authorized users. It prioritizes data isolation and prevents unauthorized access.
 *
 * Data Structure:
 * - User-specific data (forum posts, user profiles, chat status) is nested under `/users/{userId}`.
 * - Global data (news articles, matches, players, highlight reels, teams, locations, event titles) resides in top-level collections.
 * - Polls and Events are stored in top-level collections, with responses in subcollections.
 * - Chat messages are stored in a nested structure: `/chat_rooms/{roomId}/messages/{messageId}`.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed.
 * - Read-only collections (e.g., news articles, matches, players) are publicly readable, with restricted write access.
 * - All write operations require authentication.
 * - Administrative privileges are granted based on the existence of a document in the `/admins/{userId}` collection.
 * - The event create, update and delete operations can be done by admins or trainers
 *
 * Denormalization for Authorization:
 * - HighlightReels include a denormalized `matchId` to avoid needing to read the associated Match document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all news articles, but restricts write access to admins only.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all match data, but restricts write access to admins only.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all player data, but restricts write access to admins only.
     * @path /players/{playerId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all highlight reels, but restricts write access to admins only.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): if isSignedIn() && isOwner(userId)
     * @allow (get, list): if isSignedIn() && isOwner(userId)
     * @allow (update, delete): if isSignedIn() && isExistingOwner(userId)
     * @deny (create, update, delete): if !isSignedIn() || !isOwner(userId)
     * @principle Enforces user-ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create and manage their own user document.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && isOwner(userId)
     * @allow (get, update, delete): if isSignedIn() && isExistingOwner(userId)
     * @deny (create, update, delete): if !isSignedIn() || !isOwner(userId)
     * @principle Enforces user-ownership for profile management.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /admins/{userId}
     * @allow (get, list): if isSignedIn() && isAdmin()
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn() || !isAdmin()
     * @principle Controls admin access.
     */
    match /admins/{userId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all team categories, but restricts write access to admins only.
     * @path /team_categories/{categoryId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all teams, but restricts write access to admins only.
     * @path /teams/{teamId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all members, but restricts write access to admins only.
     * @path /members/{memberId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all group members, but restricts write access to admins only.
     * @path /group_members/{memberId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

     /**
      * @description Allows read access to all polls, but restricts write access to admins only.
      * @path /polls/{pollId}
      * @allow (get, list): if true
      * @allow (create, update, delete): if isSignedIn() && isAdmin()
      * @deny (create, update, delete): if !isSignedIn()
      * @principle Public read, admin-only writes.
      */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows a user to create a response to a poll if signed in.
     *              Restricts read, update and delete access to admins only.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): if isSignedIn()
     * @allow (get, list, update, delete): if isSignedIn() && isAdmin()
     * @deny (get, list, update, delete): if !isSignedIn() || !isAdmin()
     * @principle Signed-in users can create poll responses; admins manage the responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all events, but restricts write access to admins and trainers only.
     * @path /events/{eventId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && (isAdmin() || isTrainer())
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin/trainer-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (isAdmin() || isTrainer());
      allow update: if isSignedIn() && (isAdmin() || isTrainer());
      allow delete: if isSignedIn() && (isAdmin() || isTrainer());
    }

    /**
     * @description Allows a user to create a response to an event if signed in.
     *              Restricts read, update and delete access to admins only.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (create): if isSignedIn()
     * @allow (get, list, update, delete): if isSignedIn() && isAdmin()
     * @deny (get, list, update, delete): if !isSignedIn() || !isAdmin()
     * @principle Signed-in users can create event responses; admins manage the responses.
     */
    match /events/{eventId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows all users to read messages, but only signed-in users to create them. Only admins can update or delete messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn() && isAdmin()
     * @deny (update, delete): if !isSignedIn() || !isAdmin()
     * @principle Open chat for reading; signed-in users can post; admins manage.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows a user to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create, get, update, delete): if isSignedIn() && isOwner(userId)
     * @deny (create, get, update, delete): if !isSignedIn() || !isOwner(userId)
     * @principle Enforces user-ownership for chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Allows read access to all locations, but restricts write access to admins only.
     * @path /locations/{locationId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows read access to all event titles, but restricts write access to admins only.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isAdmin()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, admin-only writes.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }


    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the requested user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in, is the owner, and the document exists.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their UID in the /admins/{userId} collection.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is a trainer by verifying the existence of their UID in the /trainers/{userId} collection.
     */
    function isTrainer() {
        return exists(/databases/$(database)/documents/trainers/$(request.auth.uid));
    }
  }
}