/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence, leveraging path-based ownership and denormalization to minimize `get()` calls and ensure efficient data access. It enforces a strict user-ownership model for user-generated content and assumes global data is primarily read-only.
 *
 * Data Structure:
 * - Global data (news articles, matches, players, highlight reels, teams, team categories, members, group_members, polls) resides in top-level collections.
 * - User-specific data (forum posts, user profiles) is nested under `/users/{userId}`.
 * - Polls are stored in a top-level collection `/polls/{pollId}`, and poll responses are stored in the `/polls/{pollId}/responses/{responseId}` subcollection.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the rules structure.
 * - Global data collections are publicly readable but writable only by authorized users (authorization to be added at the application level).
 * - Path-based ownership is enforced for user-generated content.
 * - Data validation is minimized for rapid prototyping, focusing on authorization-critical fields only.
 * - Destructive operations are protected by existence checks to prevent accidental data loss.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to news articles for all users. Write access is denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only write (currently write is disallowed for all).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to match data for all users. Write access is denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only write (currently write is disallowed for all).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to player data for all users. Write access is denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only write (currently write is disallowed for all).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to highlight reels for all users. Write access is denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only write (currently write is disallowed for all).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read access to team categories for all users. Write access is denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only write (currently write is disallowed for all).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to teams for all users. Write access is denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read, owner-only write (currently write is disallowed for all).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
     /**
      * @description Allows read access to members for all users. Write access is denied.
      * @path /members/{memberId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Public read, owner-only write (currently write is disallowed for all).
      */
     match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
     /**
      * @description Allows read access to group members for all users. Write access is denied.
      * @path /group_members/{memberId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false;
      * @principle Public read, owner-only write (currently write is disallowed for all).
      */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
     /**
      * @description Allows read access to polls for all users. Owner can create/update/delete.
      * @path /polls/{pollId}
      * @allow get, list: if true;
      * @allow create: if request.auth.uid == request.resource.data.createdBy;
      * @allow update: if isExistingOwner(resource.data.createdBy);
      * @allow delete: if isExistingOwner(resource.data.createdBy);
      * @principle Public read, owner-only write.
      */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.createdBy;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows users to create poll responses if the poll exists.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Only authenticated users can create poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the resource.
   * @param {string} userId The user ID to check against.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of the resource and the resource exists.
   * @param {string} userId The user ID to check against.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}