/**
 * @file Firestore Security Rules for Werkself Hub.
 *
 * @description This ruleset enforces a combination of public read access and owner-only write access for general content,
 *              along with strict user-ownership for personal data and content. The structure leverages path-based
 *              authorization to minimize the need for complex `get()` calls and maximize query performance.
 *
 * @dataStructure
 * - /news_articles/{newsArticleId}: Publicly readable news articles.
 * - /matches/{matchId}: Publicly readable match data.
 * - /players/{playerId}: Publicly readable player information.
 * - /highlight_reels/{highlightReelId}: Publicly readable highlight reels.
 * - /users/{userId}: User profiles, accessible only to the respective user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts owned by a specific user, accessible only to that user.
 * - /team_categories/{categoryId}: Publicly readable team categories.
 * - /teams/{teamId}: Publicly readable team data.
 * - /members/{memberId}: Publicly readable member data.
 * - /group_members/{memberId}: Publicly readable group member data.
 *
 * @keySecurityDecisions
 * - Public read access is granted for general content like news articles, matches, and player data.
 * - User-generated content (forum posts) and profile data are strictly controlled by user ownership.
 * - Listing of user documents is allowed only for the owner. Listing of other public collections is enabled.
 * - No schema validation is performed beyond authorization checks, in line with the prototyping phase.
 *
 * @denormalizationForAuthorization
 * - The 'matchId' is denormalized into the HighlightReel entity to prevent rules from having to read the parent match document.
 * - The 'userId' is encoded into the /users/{userId}/forum_posts/{postId} path to prevent rules from having to read the parent user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, with owner-only access for writes.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Anyone can read news articles.
     * @allow (create) Only the owner can create an article with their user ID as the author.
     * @allow (update, delete) Only the original author can modify or delete the article.
     * @deny (create) Non-authenticated users cannot create articles.
     * @deny (update, delete) Other users cannot modify or delete another user's article.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) Anyone can read match data.
     * @deny (create, update, delete) No one can create, update, or delete match data through the client.
     * @principle Grants public read access, restricts writes.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data.
     * @path /players/{playerId}
     * @allow (get, list) Anyone can read player data.
     * @deny (create, update, delete) No one can create, update, or delete player data through the client.
     * @principle Grants public read access, restricts writes.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) Anyone can read highlight reels.
     * @deny (create, update, delete) No one can create, update, or delete highlight reels through the client.
     * @principle Grants public read access, restricts writes.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list) The owner can read and list their own forum posts.
     * @allow (create) The owner can create forum posts under their user ID.
     * @allow (update, delete) The owner can update and delete their own forum posts.
     * @deny (create) Non-authenticated users cannot create forum posts.
     * @deny (update, delete) Other users cannot modify or delete another user's forum posts.
     * @deny (create, update, delete) Cannot create/update/delete if the document does not exist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own user document.
     * @path /users/{userId}
     * @allow (get) The owner can read their own user document.
     * @allow (create) A user can create their own document with their user ID.
     * @allow (update, delete) The owner can update and delete their own user document.
     * @deny (create) Non-authenticated users cannot create user documents.
     * @deny (update, delete) Other users cannot modify or delete another user's document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list) Anyone can read team categories.
     * @deny (create, update, delete) No one can create, update, or delete team categories through the client.
     * @principle Grants public read access, restricts writes.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data.
     * @path /teams/{teamId}
     * @allow (get, list) Anyone can read team data.
     * @deny (create, update, delete) No one can create, update, or delete team data through the client.
     * @principle Grants public read access, restricts writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
        /**
     * @description Allows public read access to member data.
     * @path /members/{memberId}
     * @allow (get, list) Anyone can read member data.
     * @deny (create, update, delete) No one can create, update, or delete member data through the client.
     * @principle Grants public read access, restricts writes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows public read access to group member data.
     * @path /group_members/{memberId}
     * @allow (get, list) Anyone can read group member data.
     * @deny (create, update, delete) No one can create, update, or delete group member data through the client.
     * @principle Grants public read access, restricts writes.
     */
        match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}