/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of data access for prototyping purposes, focusing on securing user-specific data while allowing open reads for all other content.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles. Write access needs to be configured.
 * - `/matches/{matchId}`: Publicly readable match data. Write access needs to be configured.
 * - `/players/{playerId}`: Publicly readable player data. Write access needs to be configured.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels. Write access needs to be configured.
 * - `/users/{userId}`: User profile data, accessible only to the authenticated user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - All collections are publicly readable.
 * - Write access to news articles, matches, players, and highlight reels is not yet configured, requiring future refinement.
 * - User data and forum posts are strictly controlled by path-based ownership.
 * - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletions.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No one can create, update, or delete news articles without further configuration.
     * @principle Allows public read access.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletions.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No one can create, update, or delete match data without further configuration.
     * @principle Allows public read access.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletions.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @deny (create, update, delete): No one can create, update, or delete player data without further configuration.
     * @principle Allows public read access.
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletions.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No one can create, update, or delete highlight reels without further configuration.
     * @principle Allows public read access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to user documents, allowing each user to read and write their own data.
     * @path /users/{userId}
     * @allow (create): A user can create their own document if the userId matches their auth.uid.
     * @allow (get, update, delete): A user can only access their own document.
     * @deny: Any other operation is denied.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to forum posts, allowing each user to read and write their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): A user can create their own forum post under their user ID.
     * @allow (get, list, update, delete): A user can only access their own forum posts.
     * @deny: Any other operation is denied.
     * @principle Enforces path-based ownership for user-generated content.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}