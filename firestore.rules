/**
 * @file Firestore Security Rules for Werkself Hub
 * @description This ruleset enforces a user-ownership model for user-generated content and public read access for global data.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player information.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels with denormalized `matchId`.
 * - `/users/{userId}`: User profile data, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 * - `/team_categories/{categoryId}`: Public team categories.
 * - `/teams/{teamId}`: Public team data.
 * - `/members/{memberId}`: Public, denormalized user data for team lookups.
 * - `/group_members/{memberId}`: Public, lightweight user data for group lookups.
 * - `/polls/{pollId}`: Public polls.
 * - `/polls/{pollId}/responses/{responseId}`: Poll responses.
 * - `/events/{eventId}`: Public events.
 * - `/events/{eventId}/responses/{responseId}`: Event RSVP responses.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within rooms.
 * - `/users/{userId}/chat_status/{roomId}`: User-specific chat read status.
 * - `/locations/{locationId}`: Public locations.
 *
 * Key Security Decisions:
 * - **User Ownership**: User-generated content (forum posts, user profiles, chat read status) is strictly controlled by user ID in the path.
 * - **Public Read Access**: News articles, matches, players, teams and locations are publicly readable.
 * - **No User Listing**: Listing of all users is not permitted for privacy reasons.
 * - **Admin Roles**: This ruleset does not implement admin roles.  Administrative privileges must be managed in the application code.
 *
 * Denormalization for Authorization:
 * - Highlight reels denormalize `matchId` to allow efficient querying without needing to `get()` the `Match` document.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is signed in and the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is signed in, the user IDs match, and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No user can create, update, or delete news articles through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @deny (create, update, delete): No user can create, update, or delete match data through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for players.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player information.
     * @deny (create, update, delete): No user can create, update, or delete player information through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reels.
     * @deny (create, update, delete): No user can create, update, or delete highlight reels through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for forum posts created by a specific user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create): The user can create a forum post under their own user ID.
     * @allow (get, list): The user can read their own forum posts.
     * @allow (update, delete): The user can update/delete their own forum posts, provided they exist.
     * @deny (create): A user cannot create a forum post under another user's ID.
     * @deny (get, list): A user cannot read forum posts belonging to another user.
     * @deny (update, delete): A user cannot update/delete forum posts belonging to another user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create): A user can create their own profile (self-registration).
     * @allow (get): A user can read their own profile data.
     * @allow (update): A user can update their own profile data, provided it exists.
     * @allow (delete): A user can delete their own profile data, provided it exists.
     * @deny (create): A user cannot create a profile with an ID that doesn't match their auth ID.
     * @deny (get): A user cannot read another user's profile data.
     * @deny (update): A user cannot update another user's profile data.
     * @deny (delete): A user cannot delete another user's profile data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false; // User listing is denied
    }

    /**
     * @description Rules for team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team categories.
     * @deny (create, update, delete): No user can create, update, or delete team categories through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @deny (create, update, delete): No user can create, update, or delete team data through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for denormalized member data.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @deny (create, update, delete): No user can create, update, or delete member data through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for lightweight group member data.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @deny (create, update, delete): No user can create, update, or delete group member data through the client.
     * @principle Public read, admin-only write (enforced at application level).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for polls.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read polls.
     * @deny (create, update, delete): No user can create, update, or delete polls through the client.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create): Any signed-in user can create a poll response.
     * @allow (get, list): Any signed-in user can read poll responses.
     * @allow (update, delete): No user can update or delete poll responses through the client.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for events.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read events.
     * @allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
     * @allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Rules for event responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (create): Any signed-in user can create an event response.
     * @allow (get, list): Any signed-in user can read event responses.
     * @allow (update, delete): No user can update or delete event responses through the client.
     */
    match /events/{eventId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for chat messages.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow create: if isSignedIn();
     * @allow get, list: if isSignedIn();
     * @allow update, delete: if false;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for user chat status.
     * @path /users/{userId}/chat_status/{roomId}
     *   A user can create/update/get their own chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
        allow create: if isOwner(userId);
        allow get: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
        allow list: if false;
    }

      /**
       * @description Rules for locations.
       * @path /locations/{locationId}
       * @allow (get, list): Any user can read location data.
       * @deny (create, update, delete): No user can create, update, or delete location data through the client.
       * @principle Public read, admin-only write (enforced at application level).
       */
      match /locations/{locationId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }
  }
}