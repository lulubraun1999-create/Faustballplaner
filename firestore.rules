/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * Path-based authorization is favored for user-specific data, and explicit ownership checks are used for shared resources.
 * Data validation is limited to authorization-critical fields, allowing for flexible prototyping.
 *
 * Data Structure:
 * - Top-level collections: /news_articles, /matches, /players, /highlight_reels, /polls, /events, /locations, /event_titles, /teams, /team_categories, /members, /group_members
 * - User-scoped subcollections: /users/{userId}/forum_posts, /users/{userId}/chat_status
 * - Poll subcollections: /polls/{pollId}/responses
 * - Event subcollections: /events/{eventId}/responses
 * - Chatroom subcollections: /chat_rooms/{roomId}/messages
 * - Admin collection: /admins/{userId}
 *
 * Key Security Decisions:
 * - Admin role is determined by the existence of a document in the `/admins/{userId}` collection.
 * - User data is secured using path-based ownership under `/users/{userId}`.
 * - Public read access is enabled for top-level collections like `/news_articles`, `/matches`, and `/players`. Write access to these collections must be controlled via the `isAdmin()` function.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` document to avoid needing to perform additional reads for authorization.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading all news articles. Write operations are restricted to admins.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for all articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading all match data. Write operations are restricted to admins.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for all match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading all player data. Write operations are restricted to admins.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for all player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading all highlight reel data. Write operations are restricted to admins.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access for highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get, list: if request.auth.uid == userId;
     * @allow update: if request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth.uid == userId && resource != null;
     * @principle Enforces path-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create and manage their own user document.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if request.auth.uid == userId;
     * @deny list: if false;
     * @allow update: if request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth.uid == userId && resource != null;
     * @principle Enforces path-based ownership for user documents.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows an admin to create, read, update, and delete admin documents.  The existence of the document confers admin rights.
     * @path /admins/{userId}
     * @allow create: if isAdmin();
     * @allow get: if isAdmin();
     * @deny list: if false;
     * @allow update: if isAdmin() && resource != null;
     * @allow delete: if isAdmin() && resource != null;
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{userId} {
      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows reading team categories. Write operations are restricted to admins.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading team data. Write operations are restricted to admins.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading member data. Write operations are restricted to admins.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading group member data. Write operations are restricted to admins.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows reading poll data. Write operations are restricted to admins.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows a user to create, read, update, and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     *  @allow create: if request.auth.uid == request.resource.data.userId;
     *  @allow get: if request.auth.uid == resource.data.userId;
     *  @allow list: if true;
     *  @allow update: if request.auth.uid == resource.data.userId && resource != null;
     *  @allow delete: if request.auth.uid == resource.data.userId && resource != null;
     * @principle Enforces path-based ownership for poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if true; // Public listing of responses is enabled.
      allow update: if isExistingOwnerResponse(resource.data.userId);
      allow delete: if isExistingOwnerResponse(resource.data.userId);
    }

    /**
     * @description Allows reading event data. Write operations are restricted to admins.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows a user to create, read, update, and delete their own event responses.
     * @path /events/{eventId}/responses/{responseId}
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @allow get: if request.auth.uid == resource.data.userId;
     * @allow list: if true;
     * @allow update: if request.auth.uid == resource.data.userId && resource != null;
     * @allow delete: if request.auth.uid == resource.data.userId && resource != null;
     * @principle Enforces ownership for event responses.
     */
    match /events/{eventId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if true; // Public listing of event responses is enabled.
      allow update: if isExistingOwnerResponse(resource.data.userId);
      allow delete: if isExistingOwnerResponse(resource.data.userId);
    }

    /**
     * @description Allows any authenticated user to read messages in a chat room. Write operations are allowed for any authenticated user.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows open read and write access to chat messages for signed-in users.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if request.auth.uid == userId;
     * @deny list: if false;
     * @allow update: if request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth.uid == userId && resource != null;
     * @principle Enforces path-based ownership for chat status.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows reading location data. Write operations are restricted to admins.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Allows reading event title data. Write operations are restricted to admins.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /event_titles/{eventTitleId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    // ----- Helper Functions -----

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID and the resource exists.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user ID matches the authenticated user's ID and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

       /**
         * @description Checks if the user ID matches the authenticated user's ID and the resource exists.
         * @param {string} userId The user ID to check.
         * @return {bool} True if the user ID matches the authenticated user's ID and resource exists, false otherwise.
         */
        function isExistingOwnerResponse(userId) {
            return isSignedIn() && request.auth.uid == userId && resource != null;
        }

    /**
     * @description Checks if the user is an admin based on the existence of a document in the /admins collection.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}