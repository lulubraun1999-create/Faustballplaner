/**
 * @fileOverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content and open read access for global data.
 *
 * Data Structure:
 * - Global data (news, matches, players, highlight reels, polls, events, teams, and team categories) resides in top-level collections.
 * - User-specific data (forum posts, user profiles, and chat statuses) is nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Global data collections are publicly readable, with the assumption that writes are managed by trusted application code (admin access is not enforced in rules).
 * - User-generated content (forum posts) is owned by the user who created it, enforced through path-based ownership.
 * - User profiles are private and accessible only to the user themselves.
 * - User listing is implicitly denied (no `allow list: if true;` on `/users`).
 * - No custom claims are used; all auth decisions are based on `request.auth.uid`.
 *
 * Denormalization for Authorization:
 * - The `ForumPost` entity includes a `userId` field, but authorization is based on the path `/users/{userId}/forum_posts/{postId}`.  The `userId` property is not validated against `request.auth.uid` because the path enforces ownership. This avoids needing to query a separate collection to determine ownership.
 * - HighlightReels denormalize `matchId` onto the document to avoid needing to query the `matches` collection for authorization.
 *
 * Structural Segregation:
 * - User-specific content is stored under the `/users/{userId}` collection to ensure private data is not mixed with public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Any authenticated or unauthenticated user can read news articles.
     * @deny (create, update, delete) No user can create, update, or delete news articles through client-side rules.
     * @principle Allows public read access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to matches.
     * @path /matches/{matchId}
     * @allow (get, list) Any authenticated or unauthenticated user can read match data.
     * @deny (create, update, delete) No user can create, update, or delete matches through client-side rules.
     * @principle Allows public read access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to players.
     * @path /players/{playerId}
     * @allow (get, list) Any authenticated or unauthenticated user can read player data.
     * @deny (create, update, delete) No user can create, update, or delete players through client-side rules.
     * @principle Allows public read access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) Any authenticated or unauthenticated user can read highlight reel data.
     * @deny (create, update, delete) No user can create, update, or delete highlight reels through client-side rules.
     * @principle Allows public read access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts. Enforces path-based ownership.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User 'abc' can create a post under /users/abc/forum_posts/post1.
     * @allow (get, list) User 'abc' can read their own posts under /users/abc/forum_posts.
     * @allow (update, delete) User 'abc' can update/delete their own post /users/abc/forum_posts/post1.
     * @deny (create) User 'def' cannot create a post under /users/abc/forum_posts/post1.
     * @deny (update, delete) User 'def' cannot update/delete a post under /users/abc/forum_posts/post1.
     * @principle Enforces document ownership for writes; allows owner-only reads.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document. Enforces path-based ownership.
     * @path /users/{userId}
     * @allow (create) User 'abc' can create their own profile document at /users/abc.
     * @allow (get) User 'abc' can read their own profile document at /users/abc.
     * @allow (update) User 'abc' can update their own profile document at /users/abc.
     * @allow (delete) User 'abc' can delete their own profile document at /users/abc.
     * @deny (create) User 'def' cannot create a profile document at /users/abc.
     * @deny (get, update, delete) User 'def' cannot read, update, or delete the profile document at /users/abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories.
     * @path /team_categories/{categoryId}
     * @allow (get, list) Any authenticated or unauthenticated user can read team category data.
     * @deny (create, update, delete) No user can create, update, or delete team categories through client-side rules.
     * @principle Allows public read access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams.
     * @path /teams/{teamId}
     * @allow (get, list) Any authenticated or unauthenticated user can read team data.
     * @deny (create, update, delete) No user can create, update, or delete teams through client-side rules.
     * @principle Allows public read access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to members.
     * @path /members/{memberId}
     * @allow (get, list) Any authenticated or unauthenticated user can read member data.
     * @deny (create, update, delete) No user can create, update, or delete members through client-side rules.
     * @principle Allows public read access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Allows public read access to group members.
     * @path /group_members/{memberId}
     * @allow (get, list) Any authenticated or unauthenticated user can read group member data.
     * @deny (create, update, delete) No user can create, update, or delete group members through client-side rules.
     * @principle Allows public read access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows public read access to polls.
      * @path /polls/{pollId}
      * @allow (get, list) Any authenticated or unauthenticated user can read poll data.
      * @deny (create, update, delete) No user can create, update, or delete polls through client-side rules.
      * @principle Allows public read access.
      */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create a poll response.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (create) Any authenticated user can create a response.
     * @allow (get, list) Any authenticated or unauthenticated user can read poll response data.
     * @deny (update, delete) No user can update or delete any poll response through client-side rules.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
      /**
       * @description Allows public read access to events.
       * @path /events/{eventId}
       * @allow (get, list) Any authenticated or unauthenticated user can read event data.
       * @deny (create, update, delete) No user can create, update, or delete events through client-side rules.
       * @principle Allows public read access.
       */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
      /**
       * @description Allows any authenticated user to create a chat message.
       * @path /chat_rooms/{roomId}/messages/{messageId}
       *  @allow (create) Any authenticated user can create a chat message.
       *  @allow (get, list) Any authenticated or unauthenticated user can read a chat message.
       * @deny (update, delete) No user can update or delete any chat message through client-side rules.
       */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own chat status document. Enforces path-based ownership.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow (create) User 'abc' can create their own chat status document at /users/abc/chat_status/room1.
     * @allow (get) User 'abc' can read their own chat status document at /users/abc/chat_status/room1.
     * @allow (update) User 'abc' can update their own chat status document at /users/abc/chat_status/room1.
     * @allow (delete) User 'abc' can delete their own chat status document at /users/abc/chat_status/room1.
     * @deny (create) User 'def' cannot create a chat status document at /users/abc/chat_status/room1.
     * @deny (get, update, delete) User 'def' cannot read, update, or delete the chat status document at /users/abc/chat_status/room1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing chat status is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}