/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It leverages path-based authorization and denormalization to minimize reads and ensure efficient and secure data access.
 * All potentially private data is located under the `/users/{userId}` path and secured via ownership checks.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles. Write access should be restricted to admins (not implemented in rules).
 * - `/matches/{matchId}`: Publicly readable match data. Write access should be restricted to admins (not implemented in rules).
 * - `/players/{playerId}`: Publicly readable player data. Write access should be restricted to admins (not implemented in rules).
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels. Write access should be restricted to admins (not implemented in rules).
 * - `/users/{userId}`: User profile data, accessible only to the owning user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to the owning user.
 * - `/team_categories/{categoryId}`: Publicly readable team categories. Write access should be restricted to admins (not implemented in rules).
 * - `/teams/{teamId}`: Publicly readable team data. Write access should be restricted to admins (not implemented in rules).
 * - `/members/{memberId}`: Publicly readable member data. Write access should be restricted to admins (not implemented in rules).
 * - `/group_members/{memberId}`: Publicly readable group member data. Write access should be restricted to admins (not implemented in rules).
 * - `/polls/{pollId}`: Publicly readable poll data. Write access should be restricted to admins (not implemented in rules).
 * - `/polls/{pollId}/responses/{responseId}`: Poll responses, accessible only by authenticated users.
 * - `/events/{eventId}`: Publicly readable event data. Write access should be restricted to admins or team-specific roles (not implemented in rules).
 * - `/event_overrides/{overrideId}`: Publicly readable event overrides. Write access should be restricted to admins or team-specific roles (not implemented in rules).
 * - `/event_responses/{responseId}`: Publicly readable event responses. Write access should be restricted to admins or team-specific roles (not implemented in rules).
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within a room. Write access should be restricted to authenticated users.
 * - `/users/{userId}/chat_status/{roomId}`: User-specific chat status. Accessible only by the owning user.
 * - `/locations/{locationId}`: Publicly readable location data. Write access should be restricted to admins (not implemented in rules).
 * - `/event_titles/{eventTitleId}`: Publicly readable event titles. Write access should be restricted to admins (not implemented in rules).
 * - `/teams/{teamId}/penalties/{penaltyId}`: Penalties for a team. Write access should be restricted to admins or team-specific roles (not implemented in rules).
 * - `/teams/{teamId}/transactions/{transactionId}`: Treasury transactions for a team. Write access should be restricted to admins or team-specific roles (not implemented in rules).
 * - `/user_penalties/{userPenaltyId}`: Publicly readable user penalties. Write access should be restricted to admins or team-specific roles (not implemented in rules).
 *
 * Key Security Decisions:
 * - Public Read Access: Collections like `news_articles`, `matches`, and `players` are publicly readable (`allow get, list: if true;`).
 * - User Ownership: The `/users/{userId}` collection enforces strict user ownership using `isOwner(userId)`.  This extends to subcollections like `/users/{userId}/forum_posts/{postId}` and `/users/{userId}/chat_status/{roomId}`.
 * - No User Listing: The `list` operation is not allowed on the `/users` collection to prevent unauthorized enumeration of user accounts.
 * - Unrestricted Data Shapes:  Data validation is omitted in this prototyping phase to allow for flexible schema evolution.  In a production environment, thorough data validation would be essential.
 *
 * Denormalization for Authorization:
 * - The `ForumPost` entity includes a `userId` field, which is used in conjunction with the path-based ownership to authorize write access.
 *
 * Structural Segregation:
 * - User-specific data (forum posts, chat status) is stored under the `/users/{userId}` path, while global data (news articles, matches, players) resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /players/{playerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /highlight_reels/{highlightReelId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-specific ownership for forum posts. A user can only create, read, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User with matching userId in path
     * @allow (get, list, update, delete) Owner of the post
     * @deny (create) User with non-matching userId
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific ownership for user documents. A user can only create, read, update, and delete their own document.
     * @path /users/{userId}
     * @allow (create) User with matching userId in path
     * @allow (get, update, delete) Owner of the user document
     * @deny (list) Prevents listing all users
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Do not allow listing of users.
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /team_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read member data, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read group member data, but restricts creation, updates, and deletion.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /group_members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read poll data, but restricts creation, updates, and deletion.
     * @path /polls/{pollId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /polls/{pollId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to create poll responses, but restricts reading, updating, and deleting responses.
     * @path /polls/{pollId}/responses/{responseId}
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

   /**
     * @description Allows anyone to read event data, but restricts creation, updates, and deletion.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read event override data, but restricts creation, updates, and deletion.
     * @path /event_overrides/{overrideId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /event_overrides/{overrideId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read event response data, but restricts creation, updates, and deletion.
     * @path /event_responses/{responseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /event_responses/{responseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to create chat messages.  Read, update, and delete are denied.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-specific ownership for chat status documents. A user can only create, read, update, and delete their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     */
    match /users/{userId}/chat_status/{roomId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read location data, but restricts creation, updates, and deletion.
     * @path /locations/{locationId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read event title data, but restricts creation, updates, and deletion.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /event_titles/{eventTitleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read penalty data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}/penalties/{penaltyId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /teams/{teamId}/penalties/{penaltyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read treasury transaction data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}/transactions/{transactionId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /teams/{teamId}/transactions/{transactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

      /**
     * @description Allows anyone to read user penalty data, but restricts creation, updates, and deletion.
     * @path /user_penalties/{userPenaltyId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, restricted write
     */
    match /user_penalties/{userPenaltyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in (authenticated).
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource (based on user ID).
     * @param {string} userId The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing resource.
     * @param {string} userId The user ID to compare with the resource's data.
     * @return {boolean} True if the user is the owner of an existing resource, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}