/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy: This ruleset prioritizes security and assumes a strict
 * default posture. It uses path-based ownership for user-generated content
 * and assumes global data is read-only for most users. All write operations
 * are secured with authorization checks, and data validation is minimal in
 * the prototyping phase.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Global data resides in top-level collections like `/news_articles`,
 *   `/matches`, and `/players`.
 * - Subcollections such as `/teams/{teamId}/penalties/{penaltyId}` are used
 *   to organize team-specific data.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Public read access is granted to certain top-level collections like
 *   `/news_articles` and `/matches`.
 * - All write operations require authentication.
 * - No custom claims or role-based access control (RBAC) is implemented in
 *   this version; the application relies on Database Access Control (DBAC).
 * - To avoid needing to make expensive `get()` calls in the rules, the database
 *   schema denormalizes data to allow simple authorization checks based on the
 *   content of the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Only allows authenticated users to create, update, or delete them.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to news articles, but secures writes to authenticated users.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read match data. Only allows authenticated users to create, update, or delete match data.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to match data, but secures writes to authenticated users.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read player data. Only allows authenticated users to create, update, or delete player data.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to player data, but secures writes to authenticated users.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read highlight reels. Only allows authenticated users to create, update, or delete highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to highlight reels, but secures writes to authenticated users.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows a user to manage their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @allow create: if request.resource.data.userId == request.auth.uid;
     * @allow update: if resource.data.userId == userId;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces path-based ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny list: if true;
     * @allow create: if request.resource.data.id == request.auth.uid;
     * @allow update: if resource.data.id == userId;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces path-based ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Only allows authenticated users to create, update, or delete team categories.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to team categories, but secures writes to authenticated users.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to teams. Only allows authenticated users to create, update, or delete teams.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to teams, but secures writes to authenticated users.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

     /**
      * @description Allows public read access to members. Only allows authenticated users to create, update, or delete members.
      * @path /members/{memberId}
      * @allow get, list: if true;
      * @allow create: if isSignedIn();
      * @allow update: if isSignedIn();
      * @allow delete: if isSignedIn();
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to members, but secures writes to authenticated users.
      */
     match /members/{memberId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }

     /**
      * @description Allows public read access to group members. Only allows authenticated users to create, update, or delete group members.
      * @path /group_members/{memberId}
      * @allow get, list: if true;
      * @allow create: if isSignedIn();
      * @allow update: if isSignedIn();
      * @allow delete: if isSignedIn();
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to group members, but secures writes to authenticated users.
      */
     match /group_members/{memberId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }

      /**
       * @description Allows anyone to read polls. Only allows authenticated users to create, update, or delete them.
       * @path /polls/{pollId}
       * @allow get, list: if true;
       * @allow create: if isSignedIn();
       * @allow update: if isSignedIn();
       * @allow delete: if isSignedIn();
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public read access to polls, but secures writes to authenticated users.
       */
      match /polls/{pollId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Allows anyone to read poll responses. Only allows authenticated users to create, update, or delete them.
       * @path /polls/{pollId}/responses/{responseId}
       * @allow get, list: if true;
       * @allow create: if isSignedIn();
       * @allow update: if isSignedIn();
       * @allow delete: if isSignedIn();
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public read access to poll responses, but secures writes to authenticated users.
       */
      match /polls/{pollId}/responses/{responseId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Allows anyone to read events. Only allows authenticated users to create, update, or delete them.
       * @path /events/{eventId}
       * @allow get, list: if true;
       * @allow create: if isSignedIn();
       * @allow update: if isSignedIn();
       * @allow delete: if isSignedIn();
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public read access to events, but secures writes to authenticated users.
       */
      match /events/{eventId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description Allows anyone to read event overrides. Only allows authenticated users to create, update, or delete them.
       * @path /event_overrides/{overrideId}
       * @allow get, list: if true;
       * @allow create: if isSignedIn();
       * @allow update: if isSignedIn();
       * @allow delete: if isSignedIn();
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public read access to event overrides, but secures writes to authenticated users.
       */
      match /event_overrides/{overrideId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

     /**
      * @description Allows anyone to read event responses. Only allows authenticated users to create, update, or delete them.
      * @path /event_responses/{responseId}
      * @allow get, list: if true;
      * @allow create: if isSignedIn();
      * @allow update: if isSignedIn();
      * @allow delete: if isSignedIn();
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to event responses, but secures writes to authenticated users.
      */
     match /event_responses/{responseId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }

     /**
      * @description Allows anyone to read chat messages. Only allows authenticated users to create, update, or delete them.
      * @path /chat_rooms/{roomId}/messages/{messageId}
      * @allow get, list: if true;
      * @allow create: if isSignedIn();
      * @allow update: if isSignedIn();
      * @allow delete: if isSignedIn();
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to chat messages, but secures writes to authenticated users.
      */
     match /chat_rooms/{roomId}/messages/{messageId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }

      /**
       * @description Allows a user to manage their own chat status.
       * @path /users/{userId}/chat_status/{roomId}
       * @allow get: if isOwner(userId);
       * @allow create: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @deny list: if true;
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Enforces path-based ownership for user chat status.
       */
      match /users/{userId}/chat_status/{roomId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

     /**
      * @description Allows anyone to read locations. Only allows authenticated users to create, update, or delete them.
      * @path /locations/{locationId}
      * @allow get, list: if true;
      * @allow create: if isSignedIn();
      * @allow update: if isSignedIn();
      * @allow delete: if isSignedIn();
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to locations, but secures writes to authenticated users.
      */
     match /locations/{locationId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }

     /**
      * @description Allows anyone to read event titles. Only allows authenticated users to create, update, or delete them.
      * @path /event_titles/{eventTitleId}
      * @allow get, list: if true;
      * @allow create: if isSignedIn();
      * @allow update: if isSignedIn();
      * @allow delete: if isSignedIn();
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to event titles, but secures writes to authenticated users.
      */
     match /event_titles/{eventTitleId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }

     /**
      * @description Allows team-related access to penalties, but secures writes to authenticated users.
      * @path /teams/{teamId}/penalties/{penaltyId}
      * @allow get, list: if true; // TODO: Restrict list to team members or admins.
      * @allow create: if isSignedIn(); // TODO: Restrict creation to team admins.
      * @allow update: if isSignedIn(); // TODO: Restrict update to team admins.
      * @allow delete: if isSignedIn(); // TODO: Restrict deletion to team admins.
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to penalties, but secures writes to authenticated users.
      */
    match /teams/{teamId}/penalties/{penaltyId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }

      /**
       * @description Allows team-related access to treasury transactions, but secures writes to authenticated users.
       * @path /teams/{teamId}/transactions/{transactionId}
       * @allow get, list: if true; // TODO: Restrict list to team members or admins.
       * @allow create: if isSignedIn(); // TODO: Restrict creation to team admins.
       * @allow update: if isSignedIn(); // TODO: Restrict update to team admins.
       * @allow delete: if isSignedIn(); // TODO: Restrict deletion to team admins.
       * @deny create: if false;
       * @deny update: if false;
       * @deny delete: if false;
       * @principle Allows public read access to treasury transactions, but secures writes to authenticated users.
       */
      match /teams/{teamId}/transactions/{transactionId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }
     /**
      * @description Allows team-related access to user penalties, but secures writes to authenticated users.
      * @path /teams/{teamId}/user_penalties/{userPenaltyId}
      * @allow get, list: if true; // TODO: Restrict list to team members or admins.
      * @allow create: if isSignedIn(); // TODO: Restrict creation to team admins.
      * @allow update: if isSignedIn(); // TODO: Restrict update to team admins.
      * @allow delete: if isSignedIn(); // TODO: Restrict deletion to team admins.
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public read access to user penalties, but secures writes to authenticated users.
      */
     match /teams/{teamId}/user_penalties/{userPenaltyId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
     }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}