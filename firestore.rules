/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access to public content with strict ownership and role-based access controls for user-specific data.
 *
 * Data Structure:
 * - Public Content: Collections like `/news_articles`, `/matches`, and `/players` are designed for public read access.
 * - User-Generated Content: Forum posts are nested under `/users/{userId}/forum_posts/{postId}`, enforcing ownership.
 * - User Data: User profiles are stored in `/users/{userId}`, accessible only to the owning user.
 * - Team data: Team and Category information is stored in `/teams` and `/team_categories` respectively and are world readable.
 * - Member data: Member and GroupMember information is stored in `/members` and `/group_members` respectively and are world readable.
 * - Poll data: Polls are stored in `/polls/{pollId}` and poll responses are stored in `/polls/{pollId}/responses/{responseId}`.
 *
 * Key Security Decisions:
 * - Public Read Access: News articles, matches, and player data are publicly readable to facilitate content consumption.
 * - Owner-Only Writes: User-generated content (forum posts) and user profiles are strictly controlled by the owning user.
 * - No User Listing: Listing all users is not permitted to protect user privacy.
 * - Denormalization: The `matchId` field is denormalized in the `highlight_reels` collection to avoid complex queries and improve performance.
 * - Polls: Polls are world readable and only the creating user can modify. Poll responses are only editable by the responding user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public access to news articles while restricting modifications.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public access to match data while restricting modifications.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public access to player data while restricting modifications.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public access to highlight reels while restricting modifications.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages forum posts, allowing a user to create, read, update, and delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for forum posts.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user profiles, allowing a user to create, read, update, and delete their own profile.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for user profiles and prevents user listing.
     */
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public access to team categories while restricting modifications.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team data, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public access to team data while restricting modifications.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read member data, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public access to member data while restricting modifications.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows anyone to read group member data, but restricts creation, updates, and deletion.
      * @path /group_members/{memberId}
      * @allow get, list: if true;
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Allows public access to group member data while restricting modifications.
      */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read polls, but restricts creation, updates, and deletion to the creator.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.createdBy == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid && resource != null;
     * @principle Allows public access to polls but restricts modifications to the creator.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid && resource != null;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid && resource != null;
    }

    /**
     * @description Manages poll responses, allowing users to create, read, update, and delete their own responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if request.auth != null;
     * @allow get: if request.auth != null && request.auth.uid == resource.data.userId;
     * @allow list: if request.auth != null;
     * @allow update: if request.auth != null && request.auth.uid == resource.data.userId && resource != null;
     * @allow delete: if request.auth != null && request.auth.uid == resource.data.userId && resource != null;
     * @principle Enforces that only the user who created the response can modify or delete it.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if request.auth != null;
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId && resource != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     * @return {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     * @return {boolean} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}