/**
 * @file Firestore Security Rules for Werkself Hub
 * @core_philosophy This ruleset prioritizes strong authorization based on path-based ownership and role-based access (if applicable). It avoids complex `get()` calls to ensure performance and scalability. Data validation is relaxed in this prototyping phase to allow for rapid schema iteration.
 * @data_structure The Firestore database is organized into top-level collections for global data (news articles, matches, players, teams) and user-scoped subcollections for private data (forum posts under /users/{userId}).
 * @key_security_decisions
 *   - User listing is disallowed by default.
 *   - The default security posture is strict: If a relationship or permission is unclear, access is denied.
 *   - Public read access is granted only to explicitly public top-level collections (e.g., news_articles, matches).
 *   - Global data is assumed to be read-only for most users, with administrative access controlled at the application level.
 * @denormalization HighlightReels denormalize `matchId` to avoid requiring a `get()` call on the `/matches` collection for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Only allows authenticated users to create, update, or delete a news article if they are the author.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to news articles but restricts writes to the author.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read match data. Only allows authenticated users to create, update, or delete a match if they are the author.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to match data but restricts writes to the author.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read player data. Only allows authenticated users to create, update, or delete a player if they are the author.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to player data but restricts writes to the author.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read highlight reels. Only allows authenticated users to create, update, or delete a highlight reel if they are the author.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to highlight reels but restricts writes to the author.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.userId == userId;
     * @allow get: if request.auth != null && request.auth.uid == userId;
     * @allow list: if request.auth != null && request.auth.uid == userId;
     * @allow update: if request.auth != null && request.auth.uid == userId && resource != null;
     * @allow delete: if request.auth != null && request.auth.uid == userId && resource != null;
     * @deny create: if request.auth == null || request.auth.uid != userId;
     * @deny get: if request.auth == null || request.auth.uid != userId;
     * @deny list: if request.auth == null || request.auth.uid != userId;
     * @deny update: if request.auth == null || request.auth.uid != userId || resource == null;
     * @deny delete: if request.auth == null || request.auth.uid != userId || resource == null;
     * @principle Enforces document ownership for forum posts using path-based authorization.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to create their own user document.  Once created, only the user can read, update, or delete their own document.
     * @path /users/{userId}
     * @allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.id == userId;
     * @allow get: if request.auth != null && request.auth.uid == userId;
     * @allow list: if false;
     * @allow update: if request.auth != null && request.auth.uid == userId && resource != null && request.resource.data.id == resource.data.id;
     * @allow delete: if request.auth != null && request.auth.uid == userId && resource != null;
     * @deny create: if request.auth == null || request.auth.uid != userId;
     * @deny get: if request.auth == null || request.auth.uid != userId;
     * @deny update: if request.auth == null || request.auth.uid != userId || resource == null;
     * @deny delete: if request.auth == null || request.auth.uid != userId || resource == null;
     * @principle Enforces document ownership for user documents using path-based authorization.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read team categories. Only allows authenticated users to create, update, or delete a team category if they are the author.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to team categories but restricts writes to the author.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read team data. Only allows authenticated users to create, update, or delete a team if they are the author.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to team data but restricts writes to the author.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read member data. Only allows authenticated users to create, update, or delete a member if they are the author.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to member data but restricts writes to the author.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read group member data. Only allows authenticated users to create, update, or delete a group member if they are the author.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.author == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.author == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to group member data but restricts writes to the author.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.author == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.author);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.author);
    }

    /**
     * @description Allows anyone to read poll data. Only allows authenticated users to create a poll if they are signed in and the createdBy field matches their UID.  Only the author can update or delete.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
     * @allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Allows public read access to poll data but restricts writes to the poll creator.  Validates that the `createdBy` field matches the authenticated user's UID on create.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
     * @allow get: if request.auth != null && request.resource.data.userId == request.auth.uid;
     * @allow list: if request.auth != null;
     * @allow update: if request.auth != null && resource.data.userId == request.auth.uid && resource != null;
     * @allow delete: if request.auth != null && resource.data.userId == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny get: if request.auth == null;
     * @deny update: if request.auth == null || resource == null;
     * @deny delete: if request.auth == null || resource == null;
     * @principle Enforces document ownership for poll responses using the userId field.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }
  }
}