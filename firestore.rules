/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and efficient data retrieval using path-based ownership and structural segregation.
 * It assumes a primarily read-only posture for global data (news, matches, players) and restricts user-generated content to authenticated users with owner-only access.
 *
 * Data Structure:
 * - Global data (news articles, matches, players, highlight reels, team categories, teams, members, group_members, polls, events) resides in top-level collections.
 * - User-specific data (forum posts, user documents, chat status) is nested under `/users/{userId}`.
 * - Chat messages are in the `/chat_rooms/{roomId}/messages/{messageId}` subcollection.
 * - Poll responses are in the `/polls/{pollId}/responses/{responseId}` subcollection.
 *
 * Key Security Decisions:
 * - Global data collections (news, matches, players, highlight reels, team categories, teams, polls, events) are publicly readable. Writes are implicitly restricted and should be handled via server-side logic.
 * - User listing is disabled.
 * - Path-based ownership is strictly enforced for user-specific data.
 * - Denormalization is used extensively to avoid `get()` calls in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Writes are implicitly denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Writes are implicitly denied.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for match data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player data. Writes are implicitly denied.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Writes are implicitly denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for highlight reels.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to forum posts under a user's path.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if request.resource.data.userId != userId; // userId in path must match userId in the new document
     * @deny update: if request.resource.data.userId != resource.data.userId; // userId in the document is immutable
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to user documents. Allows self-creation.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false; // User listing is not allowed.
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if request.resource.data.id != userId; // userId in path must match userId in the new document
     * @deny update: if request.resource.data.id != resource.data.id; // userId in the document is immutable
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories. Writes are implicitly denied.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for team categories.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to teams. Writes are implicitly denied.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Allows public read access to members. Writes are implicitly denied.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for members.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to group members. Writes are implicitly denied.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for group members.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Allows public read access to polls. Writes are implicitly denied.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
     * @allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
     * @principle Enforces user-owned access to poll responses.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows public read access to events. Writes are implicitly denied.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for events.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows any signed-in user to read and write messages to a chat room.
      * @path /chat_rooms/{roomId}/messages/{messageId}
      * @allow get, list: if isSignedIn();
      * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      * @allow update: if false; // Messages should not be updated
      * @allow delete: if false; // Messages should not be deleted
      * @principle All authenticated users can read and create messages.
      */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }

     /**
      * @description Enforces owner-only access to chat status under a user's path.
      * @path /users/{userId}/chat_status/{roomId}
      * @allow get: if isSignedIn() && isOwner(userId);
      * @allow list: if false; // Listing is not allowed.
      * @allow create: if isSignedIn() && isOwner(userId);
      * @allow update: if isSignedIn() && isExistingOwner(userId);
      * @allow delete: if isSignedIn() && isExistingOwner(userId);
      * @principle Enforces document ownership and prevents unauthorized access.
      */
    match /users/{userId}/chat_status/{roomId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}