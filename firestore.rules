/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and segregation of data.
 * Path-based authorization is used extensively to avoid complex queries and ensure efficient access control.
 *
 * Data Structure:
 * - News articles, matches, players, and highlight reels are stored in top-level collections.
 * - Forum posts are nested under `/users/{userId}/forum_posts/{postId}` to enforce user ownership.
 * - User profiles are stored under `/users/{userId}` and are only accessible to the respective user.
 *
 * Key Security Decisions:
 * - Public listing is enabled for news articles, matches, players, and highlight reels, assuming this data is public.
 * - Forum posts are owned by the user and only accessible to that user.
 * - User profiles are private and only accessible to the user.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` documents to avoid needing to query the `matches` collection to determine access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles. Only allows administrators to create, update, or delete news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to news articles but restricts modifications to administrators.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Only allows administrators to create, update, or delete match data.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to match data but restricts modifications to administrators.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player data. Only allows administrators to create, update, or delete player data.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to player data but restricts modifications to administrators.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Only allows administrators to create, update, or delete highlight reels.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to highlight reels but restricts modifications to administrators.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create, get, list, update, delete) User "ktsIeHZuenhgIdwo0jWzumfHHNm1" can create/read/update/delete forum posts under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts/{postId}.
     * @deny (create, get, list, update, delete) User "otherUserId" cannot create/read/update/delete forum posts under /users/ktsIeHZuenhgIdwo0jWzumfHHNm1/forum_posts/{postId}.
     * @principle Enforces document ownership for forum posts using path-based authorization.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to read and update their own user document. Allows a user to create their own user document if the user id in request matches the document id.
     * @path /users/{userId}
     * @allow (create, get, update, delete) User "ktsIeHZuenhgIdwo0jWzumfHHNm1" can create/read/update their own profile at /users/ktsIeHZuenhgIdwo0jWzumfHHNm1.
     * @deny (create, get, update, delete) User "otherUserId" cannot create/read/update user profile at /users/ktsIeHZuenhgIdwo0jWzumfHHNm1.
     * @principle Enforces document ownership for user profiles using path-based authorization.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == userId;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read group categories. Only allows administrators to create, update, or delete group categories.
     * @path /group_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to group categories but restricts modifications to administrators.
     */
    match /group_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read groups. Only allows administrators to create, update, or delete groups.
     * @path /groups/{groupId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to groups but restricts modifications to administrators.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}