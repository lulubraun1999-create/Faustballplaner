/**
 * @fileOverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content (forum posts) and user profiles.
 * Global data (news articles, matches, players, highlight reels) is publicly readable. Write access to global data is implicitly denied.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Publicly accessible news articles.
 * - /matches/{matchId}: Publicly accessible match data.
 * - /players/{playerId}: Publicly accessible player information.
 * - /highlight_reels/{highlightReelId}: Publicly accessible highlight reels with denormalized matchId.
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Public Read Access: The collections 'news_articles', 'matches', 'players', and 'highlight_reels' are publicly readable. Write access is implicitly denied, requiring backend administration.
 * - User Data Segregation: Each user's data (profile and forum posts) is stored under their respective /users/{userId} path and is strictly accessible only to that user.
 * - No User Listing: Listing all users is not permitted.
 * - Write Restriction: The application uses DBAC, there are no custom claims. So write access to global collections must be managed on the server.
 *
 * Denormalization for Authorization:
 * - HighlightReels store the matchId to avoid needing to query the /matches collection for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles. Write access is implicitly denied.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Anyone can read news articles.
     * @deny create, update, delete: No one can create, update, or delete news articles directly.
     * @principle Allows public read access to news articles, write access is implicitly denied.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is implicitly denied.
     * @path /matches/{matchId}
     * @allow get, list: Anyone can read match data.
     * @deny create, update, delete: No one can create, update, or delete match data directly.
     * @principle Allows public read access to match data, write access is implicitly denied.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information. Write access is implicitly denied.
     * @path /players/{playerId}
     * @allow get, list: Anyone can read player information.
     * @deny create, update, delete: No one can create, update, or delete player information directly.
     * @principle Allows public read access to player information, write access is implicitly denied.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is implicitly denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: Anyone can read highlight reels.
     * @deny create, update, delete: No one can create, update, or delete highlight reels directly.
     * @principle Allows public read access to highlight reels, write access is implicitly denied.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}