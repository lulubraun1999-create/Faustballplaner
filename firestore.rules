/**
 * @fileoverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, combining path-based ownership for user-generated content with public read access for global data.  It avoids any get() calls within the rules by denormalizing any authorization-relevant data directly onto the documents.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Public news articles.
 * - `/matches/{matchId}`: Public match data.
 * - `/players/{playerId}`: Public player profiles.
 * - `/highlight_reels/{highlightReelId}`: Public highlight reels with denormalized `matchId`.
 * - `/users/{userId}`: Private user data, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user.
 * - `/team_categories/{categoryId}`: Public team categories.
 * - `/teams/{teamId}`: Public teams.
 * - `/members/{memberId}`: Public member profiles.
 * - `/group_members/{memberId}`: Public group members.
 * - `/polls/{pollId}`: Polls, write access restricted to creator.
 * - `/polls/{pollId}/responses/{responseId}`: Responses to polls, access restricted to creator.
 *
 * Key Security Decisions:
 * - Public read access is granted to news articles, matches, players, highlight reels, team categories, teams, members, and group members.
 * - User-generated content (forum posts, polls) is secured using path-based ownership.
 * - User data is private and accessible only to the user.
 * - There are no global admin roles enforced at the rule level. Administrative privileges are handled at the application level.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Highlight reels denormalize the `matchId` to allow for efficient querying without requiring a `get()` call to the `matches` collection.
 *
 * Structural Segregation:
 * - User-specific data (forum posts) is stored under the `/users/{userId}` path to leverage path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read news articles, but restricts creation, updates, and deletion.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /matches/{matchId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player profiles, but restricts creation, updates, and deletion.
     * @path /players/{playerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels, but restricts creation, updates, and deletion.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own forum posts under their user ID.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) User 'userId' can create forum posts
     * @allow (get, list, update, delete) Only the owner of the 'userId' can get, list, update, and delete their own forum posts
     * @deny (create) User can not create a forum post on another user's id.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own user document, but restricts access to other user documents.
     * @path /users/{userId}
     * @allow (create) User can create their own user document
     * @allow (get, update, delete) Only the owner of the 'userId' can get, update, and delete their own user document
     * @deny (create) User can not create a user document on another user's id.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow list: if false;
    }

    /**
     * @description Allows anyone to read team categories, but restricts creation, updates, and deletion.
     * @path /team_categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read teams, but restricts creation, updates, and deletion.
     * @path /teams/{teamId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read members, but restricts creation, updates, and deletion.
     * @path /members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read group members, but restricts creation, updates, and deletion.
     * @path /group_members/{memberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, admin-only write.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows anyone to read polls, but restricts creation, updates, and deletion to the poll creator.
      * @path /polls/{pollId}
      * @allow (get, list)
      * @allow (create) If the user is signed in and the createdBy field matches the auth.uid
      * @allow (update, delete) If the user is signed in, the poll exists, and the createdBy field matches the auth.uid
      * @deny (create) If the createdBy field does not match the auth.uid
      * @deny (update, delete) If the user is not the creator of the poll, or if the poll doesn't exist
      * @principle Public read, owner-only write, enforces creator ID on create and update.
      */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy) && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows access to poll responses based on poll creator.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Authenticated users can create, read, and list poll responses. Updates and deletes are disallowed.
     */
    match /polls/{pollId}/responses/{responseId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}