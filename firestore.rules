/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and simplicity by enforcing strict ownership for user-generated content and allowing public read access for global data.  It avoids complex queries and external `get()` calls within the rules by relying on path-based authorization and data denormalization.  It assumes administrative access is handled at the application level and focuses on securing data against unauthorized user access.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Publicly readable news articles.
 * - `/matches/{matchId}`: Publicly readable match data.
 * - `/players/{playerId}`: Publicly readable player information.
 * - `/highlight_reels/{highlightReelId}`: Publicly readable highlight reels.
 * - `/users/{userId}`: User profile information, accessible only to the user.
 * - `/users/{userId}/forum_posts/{postId}`: Forum posts created by a specific user, accessible only to that user.
 * - `/team_categories/{categoryId}`: Publicly readable team categories.
 * - `/teams/{teamId}`: Publicly readable team data.
 * - `/members/{memberId}`: Publicly readable members list.
 * - `/group_members/{memberId}`: Publicly readable list of group members.
 * - `/polls/{pollId}`: Publicly readable list of polls.
 * - `/polls/{pollId}/responses/{responseId}`: Poll responses, accessible only to the user.
 *
 * Key Security Decisions:
 * - Public Read Access: Collections like `news_articles`, `matches`, `players`, `highlight_reels`, `team_categories`, `teams`, `members`, `group_members`, and `polls` are publicly readable, assuming that all data within these collections is intended for public consumption.
 * - Strict Ownership: User-specific data under `/users/{userId}` and `/users/{userId}/forum_posts/{postId}` is strictly controlled, allowing only the authenticated user to read and write their own data.
 * - No User Listing: Listing all users is implicitly denied. The rules are structured to only allow access to specific user documents based on their UID.
 * - Denormalization for Authorization: The `highlight_reels` collection denormalizes the `matchId` field to avoid needing to perform `get()` calls on `match` documents to determine authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles.  Write access is not granted by these rules.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to match data. Write access is not granted by these rules.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to player information. Write access is not granted by these rules.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to highlight reels. Write access is not granted by these rules.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow get, list: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn();
     * @deny get, list: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @deny create: if !isOwner(userId);
     * @deny get, list: if !isOwner(userId);
     * @deny update: if !isOwner(userId);
     * @deny delete: if !isOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny list: if false;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to team categories. Write access is not granted by these rules.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team data. Write access is not granted by these rules.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to members data. Write access is not granted by these rules.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
     * @description Allows public read access to group members data. Write access is not granted by these rules.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to polls. Write access is not granted by these rules.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for global data.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create: if isSignedIn();
     * @allow get: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny list: if false;
     * @principle Enforces document ownership for writes.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
      allow list: if false;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the document and the document exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}