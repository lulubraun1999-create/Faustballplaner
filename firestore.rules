/**
 * @fileOverview Firestore Security Rules for Werkself Hub.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * Path-based authorization is leveraged to ensure users can only access their own data,
 * while global data collections are configured for public read access and restricted writes.
 *
 * Data Structure:
 * - User data is stored under `/users/{userId}`, enabling path-based authorization.
 * - User-generated content (e.g., forum posts) is nested under the user's document.
 * - Global data (e.g., news articles, matches, players) resides in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the ruleset's structure.
 * - Global data collections are designed for public read access with restricted write access.
 * - All write operations require authentication and are subject to authorization checks.
 * - No reliance on custom claims for increased security.
 *
 * Denormalization for Authorization:
 * - The `userId` field is present in ForumPost documents within the `/users/{userId}/forum_posts/{postId}` collection. This enables direct authorization without requiring additional `get()` calls.
 * - The `matchId` field is present in HighlightReel documents within the `/highlight_reels/{highlightReelId}` collection. This enables direct authorization without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * - User-specific data is stored under `/users/{userId}`, while global data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, with restricted write access.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to match data, with restricted write access.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to player data, with restricted write access.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to highlight reels, with restricted write access.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow create: if request.auth.uid == userId;
     * @allow get, list: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @deny delete: if !isSignedIn() || request.auth.uid != resource.data.userId;
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow create: if request.auth.uid == userId;
     * @allow get: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny get: if !isSignedIn();
     * @deny update: if !isSignedIn() || request.auth.uid != resource.data.id;
     * @deny delete: if !isSignedIn() || request.auth.uid != resource.data.id;
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories, with restricted write access.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to teams, with restricted write access.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
     /**
     * @description Allows public read access to members, with restricted write access.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
     /**
     * @description Allows public read access to group members, with restricted write access.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    /**
     * @description Allows public read access to polls, with restricted write access.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to create, read, update, and delete responses to a poll.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow create, get, list, update, delete: if true;
     * @principle Allows public reads and writes.
     */
    match /polls/{pollId}/responses/{responseId} {
      allow create, get, list, update, delete: if true;
    }
      /**
     * @description Allows public read access to events, with restricted write access.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
     * @description Allows anyone to create, read, update, and delete overrides to a event.
     * @path /events/{eventId}/overrides/{overrideId}
     * @allow create, get, list, update, delete: if true;
     * @principle Allows public reads and writes.
     */
     match /events/{eventId}/overrides/{overrideId} {
        allow create, get, list, update, delete: if true;
     }

      /**
     * @description Allows anyone to create, read, update, and delete responses to a event.
     * @path /events/{eventId}/responses/{responseId}
     * @allow create, get, list, update, delete: if true;
     * @principle Allows public reads and writes.
     */
     match /events/{eventId}/responses/{responseId} {
        allow create, get, list, update, delete: if true;
     }

     /**
     * @description Allows anyone to create, read, update, and delete messages to a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow create, get, list, update, delete: if true;
     * @principle Allows public reads and writes.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow create, get, list, update, delete: if true;
    }

     /**
     * @description Allows anyone to create, read, update, and delete chat status of an user.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow create, get, list, update, delete: if true;
     * @principle Allows public reads and writes.
     */
    match /users/{userId}/chat_status/{roomId} {
        allow create, get, list, update, delete: if true;
    }

    /**
     * @description Allows public read access to locations, with restricted write access.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to event titles, with restricted write access.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public reads, but restricts write access.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Denies all access to any other paths.
     * @path /
     * @deny get, list, create, update, delete: if true;
     * @principle Prevents accidental access to undefined paths.
     */
    match /{path=**} {
       allow get, list, create, update, delete: if false;
    }
  }

  /**
   * @description Checks if the requesting user is signed in.
   * @returns {boolean} True if the user is signed in, false otherwise.
   * @example isSignedIn() // Returns true if request.auth != null
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the requesting user is the owner of the document based on the provided user ID.
   * @param {string} userId - The user ID to compare against the requesting user's UID.
   * @returns {boolean} True if the user is the owner, false otherwise.
   * @example isOwner("user123") // Returns true if request.auth.uid == "user123"
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the requesting user is the owner of the document and the document exists.
   * @param {string} userId - The user ID to compare against the requesting user's UID.
   * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
   * @example isExistingOwner("user123") // Returns true if request.auth.uid == "user123" and resource != null
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}