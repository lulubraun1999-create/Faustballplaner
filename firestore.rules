/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user-generated content (forum posts)
 * and assumes public read access for global data collections (news, matches, players, highlights).
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Public collection of news articles.
 * - /matches/{matchId}: Public collection of match data.
 * - /players/{playerId}: Public collection of player profiles.
 * - /highlight_reels/{highlightReelId}: Public collection of match highlights.
 * - /users/{userId}: Private user profile data, accessible only to the user.
 * - /users/{userId}/forum_posts/{postId}: Forum posts created by a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Public Read Access: The news_articles, matches, players, and highlight_reels collections are publicly readable.  Write access is implicitly denied, requiring application-level logic to manage content creation.
 * - User Ownership: Forum posts are stored under a user-specific subcollection, enforcing strict ownership.  User profiles are also secured via path-based ownership.
 * - No User Listing: Listing all users is not permitted.
 * - Denormalization: The `highlight_reels` collection denormalizes `matchId` to avoid `get()` calls during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles.  Write access is implicitly denied.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) All users can read news articles.
     * @deny (create, update, delete) No users can create, update, or delete news articles directly.
     * @principle Public read access for global data.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match data. Write access is implicitly denied.
     * @path /matches/{matchId}
     * @allow (get, list) All users can read match data.
     * @deny (create, update, delete) No users can create, update, or delete match data directly.
     * @principle Public read access for global data.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read player profiles. Write access is implicitly denied.
     * @path /players/{playerId}
     * @allow (get, list) All users can read player profiles.
     * @deny (create, update, delete) No users can create, update, or delete player profiles directly.
     * @principle Public read access for global data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read highlight reels. Write access is implicitly denied.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list) All users can read highlight reels.
     * @deny (create, update, delete) No users can create, update, or delete highlight reels directly.
     * @principle Public read access for global data.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for forum posts. Only the owner can create, read, update, or delete their own posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (create) The user can create a new forum post under their own user ID.
     * @allow (get, list) The user can read and list their own forum posts.
     * @allow (update) The user can update their own existing forum posts.
     * @allow (delete) The user can delete their own existing forum posts.
     * @deny (create) A user cannot create a forum post under another user's ID.
     * @deny (get, list, update, delete) A user cannot access or modify another user's forum posts.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user profiles. Only the owner can create their profile, read, update, or delete their own profile data.
     * @path /users/{userId}
     * @allow (create) The user can create their profile under their own user ID.
     * @allow (get) The user can read their own profile data.
     * @allow (update) The user can update their own profile data.
     * @allow (delete) The user can delete their own profile data.
     * @deny (create) A user cannot create a profile under another user's ID.
     * @deny (get, update, delete) A user cannot access or modify another user's profile data.
     * @principle Enforces document ownership for writes and ensures that the user can only access their data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}