/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * (e.g., forum posts) and assumes read-only access for most global data. Administrative
 * privileges are managed through a dedicated 'admins' collection. Data validation is
 * minimized to enable rapid prototyping.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Global data resides in top-level collections like `/news_articles`, `/matches`, etc.
 * - Subcollections are used for nested data (e.g., `/users/{userId}/forum_posts/{postId}`).
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed (no rules for `/users`).
 * - Global data collections are generally publicly readable.
 * - The 'admins' collection grants administrative privileges.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized into the `HighlightReel` documents to avoid `get()` calls
 *   for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document based on the userId.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

     /**
     * @description Checks if the user is an admin by looking for their UID in the 'admins' collection.
     * @return {boolean} True if the user is an admin.
     */
    function isAdmin() {
        return exists(/databases/(default)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for the 'news_articles' collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): Only admins can write news articles.
     * @deny (create, update, delete): Non-admins cannot write news articles.
     * @principle Public Read with Admin-Only Writes
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'matches' collection.
     * @path /matches/{matchId}
     * @allow (get, list): Any user can read match data.
     * @allow (create, update, delete): Only admins can write match data.
     * @deny (create, update, delete): Non-admins cannot write match data.
     * @principle Public Read with Admin-Only Writes
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'players' collection.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @allow (create, update, delete): Only admins can write player data.
     * @deny (create, update, delete): Non-admins cannot write player data.
     * @principle Public Read with Admin-Only Writes
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'highlight_reels' collection.
     * @path /highlight_reels/{highlightReelId}
     * @allow (get, list): Any user can read highlight reel data.
     * @allow (create, update, delete): Only admins can write highlight reel data.
     * @deny (create, update, delete): Non-admins cannot write highlight reel data.
     * @principle Public Read with Admin-Only Writes
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'forum_posts' subcollection under a user.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow (get, list): Only the owner can read their own forum posts.
     * @allow (create): Only the owner can create forum posts under their ID.
     * @allow (update, delete): Only the owner can update/delete their existing forum posts.
     * @deny (create): Creating a post with a mismatched `userId` in the path and data is forbidden.
     * @deny (update, delete): Updating/deleting a post if not the owner is forbidden.
     * @principle Ownership
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'users' collection.
     * @path /users/{userId}
     * @allow (get): Only the owner can read their own user document.
     * @allow (create): Only the owner can create their own user document (self-registration).
     * @allow (update, delete): Only the owner can update/delete their own user document.
     * @deny (create): Creating a user document with a mismatched `userId` is forbidden.
     * @deny (update, delete): Updating/deleting a user document if not the owner is forbidden.
     *   Example: A user with UID "user123" can create/read/update/delete the document at /users/user123, but not /users/otherUser.
     * @principle Ownership
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Rules for the 'admins' collection.
     * @path /admins/{userId}
     * @allow (get): Any authenticated user can check for admin status.
     * @allow (create, update, delete): Only admins can manage other admins.
     * @deny (create, update, delete): Non-admins cannot manage admins.
     * @principle Admin-Only
     */
    match /admins/{userId} {
      allow get: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'team_categories' collection.
     * @path /team_categories/{categoryId}
     * @allow (get, list): Any user can read team categories.
     * @allow (create, update, delete): Only admins can write team categories.
     * @deny (create, update, delete): Non-admins cannot write team categories.
     * @principle Public Read with Admin-Only Writes
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'teams' collection.
     * @path /teams/{teamId}
     * @allow (get, list): Any user can read team data.
     * @allow (create, update, delete): Only admins can write team data.
     * @deny (create, update, delete): Non-admins cannot write team data.
     * @principle Public Read with Admin-Only Writes
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'members' collection.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member data.
     * @allow (create, update, delete): Only admins can write member data.
     * @deny (create, update, delete): Non-admins cannot write member data.
     * @principle Public Read with Admin-Only Writes
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'group_members' collection.
     * @path /group_members/{memberId}
     * @allow (get, list): Any user can read group member data.
     * @allow (create, update, delete): Only admins can write group member data.
     * @deny (create, update, delete): Non-admins cannot write group member data.
     * @principle Public Read with Admin-Only Writes
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'polls' collection.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read poll data.
     * @allow (create, update, delete): Only admins can write poll data.
     * @deny (create, update, delete): Non-admins cannot write poll data.
     * @principle Public Read with Admin-Only Writes
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'responses' subcollection under a poll.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow (get, list): Any authenticated user can list responses.
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @principle Ownership
     */
    match /polls/{pollId}/responses/{responseId} {
          allow get, list: if isSignedIn();
          allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
          allow update: if isSignedIn() && request.resource != null && resource.data.userId == request.auth.uid;
          allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the 'events' collection.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event data.
     * @allow (create, update, delete): Only admins can write event data.
     * @deny (create, update, delete): Non-admins cannot write event data.
     * @principle Public Read with Admin-Only Writes
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'responses' subcollection under an event.
     * @path /events/{eventId}/responses/{responseId}
     * @allow (get, list): Any authenticated user can list responses.
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @principle Ownership
     */
    match /events/{eventId}/responses/{responseId} {
          allow get, list: if isSignedIn();
          allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
          allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
          allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the 'messages' subcollection under a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list): Any authenticated user can read messages.
     * @allow create: if isSignedIn();
     * @allow update, delete: if false;
     * @principle Public Read with Authenticated Writes
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

   /**
     * @description Rules for the 'chat_status' subcollection under a user.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Ownership
     */
    match /users/{userId}/chat_status/{roomId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'locations' collection.
     * @path /locations/{locationId}
     * @allow (get, list): Any user can read location data.
     * @allow (create, update, delete): Only admins can write location data.
     * @deny (create, update, delete): Non-admins cannot write location data.
     * @principle Public Read with Admin-Only Writes
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the 'event_titles' collection.
     * @path /event_titles/{eventTitleId}
     * @allow (get, list): Any user can read event title data.
     * @allow (create, update, delete): Only admins can write event title data.
     * @deny (create, update, delete): Non-admins cannot write event title data.
     * @principle Public Read with Admin-Only Writes
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}