/**
 * @file Firestore Security Rules for Werkself Hub
 * @description This ruleset enforces a user-ownership model for user-generated content and provides public read access to global data collections.
 *
 * Data Structure:
 * - User-specific data is nested under /users/{userId}.
 * - Forum posts are stored under /users/{userId}/forum_posts/{postId} for path-based ownership.
 * - Global data (news articles, matches, players, highlight reels, team categories, teams, locations, event titles, events, event responses, and event overrides) are stored in top-level collections.
 * - Chat messages are stored in subcollections under /chat_rooms/{roomId}/messages/{messageId}.
 * - User chat statuses are stored under /users/{userId}/chat_status/{roomId}.
 * - Members and GroupMembers are stored in top-level collections for denormalized data access.
 * - Polls are stored under /polls/{pollId} with responses in the subcollection /polls/{pollId}/responses/{responseId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Global data collections (news, matches, players, etc.) are publicly readable but writable only by authorized users (enforced at the application level; rules provide a placeholder for future implementation).
 * - Path-based ownership is enforced for user-generated content to simplify security rules.
 * - All write operations require user authentication.
 *
 * Denormalization for Authorization:
 * - The `matchId` is denormalized on the `HighlightReel` entity to avoid `get()` calls to the `Match` document during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts write access.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to match data, but restricts write access.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to player data, but restricts write access.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to highlight reels, but restricts write access.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces path-based ownership for forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to create their own profile, and only access their own profile data.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to team categories, but restricts write access.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to teams, but restricts write access.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to members, but restricts write access.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to group members, but restricts write access.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (to be implemented).
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
     * @description Allows public read access to polls, but restricts write access.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to poll responses to authenticated users.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /polls/{pollId}/responses/{responseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows public read access to events, but restricts write access.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to event overrides, but restricts write access.
     * @path /event_overrides/{overrideId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /event_overrides/{overrideId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to event responses, but restricts write access.
     * @path /event_responses/{responseId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /event_responses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to chat messages, but restricts write access to signed-in users.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own chat status.
     * @path /users/{userId}/chat_status/{roomId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Restricts access to a user's own data.
     */
    match /users/{userId}/chat_status/{roomId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Allows public read access to locations, but restricts write access.
     * @path /locations/{locationId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
     * @description Allows public read access to event titles, but restricts write access.
     * @path /event_titles/{eventTitleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     */
    match /event_titles/{eventTitleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}