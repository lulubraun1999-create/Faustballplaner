/**
 * @fileoverview Firestore Security Rules for the Werkself Hub application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit data ownership. It aims to prevent unauthorized data modification
 * and exposure by enforcing strict access control patterns. Read access is generally open unless the data is considered private.
 *
 * Data Structure:
 * - Global data (news, matches, players, highlight reels) resides in top-level collections.
 * - User-specific data (forum posts, user profiles) is nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - **Ownership Enforcement**: All user-created content (e.g., forum posts) is secured using path-based ownership (`/users/{userId}/...`).
 * - **No User Listing**: Listing all users is implicitly disallowed.
 * - **Denormalization**: Rules avoid `get()` calls by requiring necessary authorization data (e.g., `createdBy` on polls) to be present on the documents themselves.
 * - **Prototyping Mode**: Data schema validation is relaxed to allow for rapid iteration, focusing primarily on authorization and relationship integrity.
 *
 * @securitymodel This ruleset enforces a strict user-ownership model for user-generated data and open read access for global application data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all news articles. Only allows write access to users who are authenicated and checks that the id matches the document id.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of news articles, restricts modifications to authenticated users.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all match data. Only allows write access to users who are authenicated.
     * @path /matches/{matchId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of match data, restricts modifications to authenticated users.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all player data. Only allows write access to users who are authenicated.
     * @path /players/{playerId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of player data, restricts modifications to authenticated users.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all highlight reel data. Only allows write access to users who are authenicated.
     * @path /highlight_reels/{highlightReelId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of highlight reel data, restricts modifications to authenticated users.
     */
    match /highlight_reels/{highlightReelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows a user to create, read, update, and delete their own forum posts.
     * @path /users/{userId}/forum_posts/{postId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @allow create: if request.resource.data.userId == userId;
     * @deny create: if request.resource.data.userId != userId;
     * @deny update: if resource.data.userId != userId;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces document ownership for all operations on forum posts. Validates the userId matches the path.
     */
    match /users/{userId}/forum_posts/{postId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and update their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isExistingOwner(userId) && resource.data.id == userId;
     * @allow delete: if false;
     * @deny create: if request.resource.data.id != userId;
     * @deny update: if resource.data.id != userId;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces document ownership for user profiles. Requires the ID to match the path.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if false;
    }

    /**
     * @description Allows read access to team category data.  Only allows write access to users who are authenicated.
     * @path /team_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of team category data, restricts modifications to authenticated users.
     */
    match /team_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to team data. Only allows write access to users who are authenicated.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of team data, restricts modifications to authenticated users.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to member data. Only allows write access to users who are authenicated.
     * @path /members/{memberId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of member data, restricts modifications to authenticated users.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

   /**
     * @description Allows read access to group member data. Only allows write access to users who are authenicated.
     * @path /group_members/{memberId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of group member data, restricts modifications to authenticated users.
     */
    match /group_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

   /**
     * @description Allows read access to poll data. Only allows write access to users who are authenicated, and ensures that createdBy matches the user id.
     * @path /polls/{pollId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
     * @allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public reading of poll data, restricts modifications to authenticated users.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid && resource != null;
    }

   /**
     * @description Allows a user to create, read, update, and delete their own poll responses.
     * @path /polls/{pollId}/responses/{responseId}
     * @allow get: if isOwner(userId);
     * @allow list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     */
    match /polls/{pollId}/responses/{responseId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    //------------------ Helper Functions ------------------//

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }
  }
}